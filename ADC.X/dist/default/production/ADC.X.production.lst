

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Oct 27 05:45:35 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 2.10
    40                           ; Generated 31/07/2019 GMT
    41                           ; 
    42                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F45K50 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _ANSELCbits	set	3933
    74  0000                     _ANSELBbits	set	3932
    75  0000                     _ANSELAbits	set	3931
    76  0000                     _ANSELE	set	3935
    77  0000                     _ANSELD	set	3934
    78  0000                     _ADRESL	set	4035
    79  0000                     _ADRESH	set	4036
    80  0000                     _ADCON2bits	set	4032
    81  0000                     _ADCON1bits	set	4033
    82  0000                     _ADCON0bits	set	4034
    83  0000                     _TRISCbits	set	3988
    84  0000                     _TRISBbits	set	3987
    85  0000                     _TRISAbits	set	3986
    86  0000                     _PORTEbits	set	3972
    87  0000                     _PORTDbits	set	3971
    88  0000                     _TRISE	set	3990
    89  0000                     _TRISD	set	3989
    90  0000                     _OSCCON2	set	4050
    91  0000                     _OSCCON	set	4051
    92                           
    93                           	psect	smallconst
    94  000800                     __psmallconst:
    95                           	opt callstack 0
    96  000800  00                 	db	0
    97  000801                     STR_2:
    98                           
    99                           ; BSR set to: 15
   100  000801  25                 	db	37
   101  000802  34                 	db	52	;'4'
   102  000803  2E                 	db	46
   103  000804  31                 	db	49	;'1'
   104  000805  75                 	db	117	;'u'
   105  000806  00                 	db	0
   106  000807                     STR_1:
   107                           
   108                           ; BSR set to: 15
   109  000807  48                 	db	72	;'H'
   110  000808  4F                 	db	79	;'O'
   111  000809  4C                 	db	76	;'L'
   112  00080A  41                 	db	65	;'A'
   113  00080B  00                 	db	0
   114  0000                     
   115                           ; #config settings
   116  00080C  00                 	db	0	; dummy byte at the end
   117  0000                     
   118                           	psect	cinit
   119  00185E                     __pcinit:
   120                           	opt callstack 0
   121  00185E                     start_initialization:
   122                           	opt callstack 0
   123  00185E                     __initialization:
   124                           	opt callstack 0
   125                           
   126                           ; Clear objects allocated to BANK0 (66 bytes)
   127  00185E  EE00  F060         	lfsr	0,__pbssBANK0
   128  001862  0E42               	movlw	66
   129  001864                     clear_0:
   130  001864  6AEE               	clrf	postinc0,c
   131  001866  06E8               	decf	wreg,f,c
   132  001868  E1FD               	bnz	clear_0
   133  00186A                     end_of_initialization:
   134                           	opt callstack 0
   135  00186A                     __end_of__initialization:
   136                           	opt callstack 0
   137  00186A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   138  00186C  6EF8               	movwf	tblptru,c
   139  00186E  0100               	movlb	0
   140  001870  EF34  F008         	goto	_main	;jump to C main() function
   141                           
   142                           	psect	bssBANK0
   143  000060                     __pbssBANK0:
   144                           	opt callstack 0
   145  000060                     _nout:
   146                           	opt callstack 0
   147  000060                     	ds	2
   148  000062                     _width:
   149                           	opt callstack 0
   150  000062                     	ds	2
   151  000064                     _prec:
   152                           	opt callstack 0
   153  000064                     	ds	2
   154  000066                     _flags:
   155                           	opt callstack 0
   156  000066                     	ds	2
   157  000068                     _conversion:
   158                           	opt callstack 0
   159  000068                     	ds	2
   160  00006A                     _pot2:
   161                           	opt callstack 0
   162  00006A                     	ds	2
   163  00006C                     _pot1:
   164                           	opt callstack 0
   165  00006C                     	ds	2
   166  00006E                     _pot:
   167                           	opt callstack 0
   168  00006E                     	ds	2
   169  000070                     _dbuf:
   170                           	opt callstack 0
   171  000070                     	ds	32
   172  000090                     _valor2:
   173                           	opt callstack 0
   174  000090                     	ds	6
   175  000096                     _valor1:
   176                           	opt callstack 0
   177  000096                     	ds	6
   178  00009C                     _valor:
   179                           	opt callstack 0
   180  00009C                     	ds	6
   181                           
   182                           	psect	cstackBANK0
   183  0000A2                     __pcstackBANK0:
   184                           	opt callstack 0
   185  0000A2                     	ds	2
   186  0000A4                     sprintf@ap:
   187                           	opt callstack 0
   188                           
   189                           ; 2 bytes @ 0x2
   190  0000A4                     	ds	2
   191  0000A6                     sprintf@f:
   192                           	opt callstack 0
   193                           
   194                           ; 6 bytes @ 0x4
   195  0000A6                     	ds	6
   196  0000AC                     
   197                           ; 2 bytes @ 0xA
   198  0000AC                     	ds	2
   199  0000AE                     
   200                           ; 3 bytes @ 0xC
   201  0000AE                     	ds	3
   202  0000B1                     ??_main:
   203                           
   204                           ; 1 bytes @ 0xF
   205  0000B1                     	ds	2
   206                           
   207                           	psect	cstackCOMRAM
   208  000001                     __pcstackCOMRAM:
   209                           	opt callstack 0
   210  000001                     ?_analogRead:
   211                           	opt callstack 0
   212  000001                     ?_strlen:
   213                           	opt callstack 0
   214  000001                     ?_isdigit:
   215                           	opt callstack 0
   216  000001                     ?_isspace:
   217                           	opt callstack 0
   218  000001                     ?___wmul:
   219                           	opt callstack 0
   220  000001                     ?___lodiv:
   221                           	opt callstack 0
   222  000001                     ?___lomod:
   223                           	opt callstack 0
   224  000001                     busdata@a:
   225                           	opt callstack 0
   226  000001                     ___wmul@multiplier:
   227                           	opt callstack 0
   228  000001                     isdigit@c:
   229                           	opt callstack 0
   230  000001                     isspace@c:
   231                           	opt callstack 0
   232  000001                     fputc@c:
   233                           	opt callstack 0
   234  000001                     strlen@s:
   235                           	opt callstack 0
   236  000001                     ___lodiv@dividend:
   237                           	opt callstack 0
   238  000001                     ___lomod@dividend:
   239                           	opt callstack 0
   240                           
   241                           ; 8 bytes @ 0x0
   242  000001                     	ds	1
   243  000002                     comando@a:
   244                           	opt callstack 0
   245                           
   246                           ; 1 bytes @ 0x1
   247  000002                     	ds	1
   248  000003                     ??_analogRead:
   249  000003                     ??_isdigit:
   250  000003                     ??_isspace:
   251  000003                     setCursor@y:
   252                           	opt callstack 0
   253  000003                     caracter@m:
   254                           	opt callstack 0
   255  000003                     ___wmul@multiplicand:
   256                           	opt callstack 0
   257  000003                     fputc@fp:
   258                           	opt callstack 0
   259  000003                     strlen@a:
   260                           	opt callstack 0
   261                           
   262                           ; 2 bytes @ 0x2
   263  000003                     	ds	1
   264  000004                     ??_setCursor:
   265  000004                     caracter@n:
   266                           	opt callstack 0
   267  000004                     analogRead@canal:
   268                           	opt callstack 0
   269                           
   270                           ; 1 bytes @ 0x3
   271  000004                     	ds	1
   272  000005                     ??_fputc:
   273  000005                     caracter@a:
   274                           	opt callstack 0
   275  000005                     ___wmul@product:
   276                           	opt callstack 0
   277                           
   278                           ; 2 bytes @ 0x4
   279  000005                     	ds	1
   280  000006                     print@a:
   281                           	opt callstack 0
   282                           
   283                           ; 2 bytes @ 0x5
   284  000006                     	ds	1
   285  000007                     setCursor@m:
   286                           	opt callstack 0
   287  000007                     _isspace$1125:
   288                           	opt callstack 0
   289                           
   290                           ; 1 bytes @ 0x6
   291  000007                     	ds	1
   292  000008                     ??_print:
   293  000008                     ?_atoi:
   294                           	opt callstack 0
   295  000008                     setCursor@n:
   296                           	opt callstack 0
   297  000008                     atoi@s:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0x7
   301  000008                     	ds	1
   302  000009                     setCursor@x:
   303                           	opt callstack 0
   304  000009                     ___lodiv@divisor:
   305                           	opt callstack 0
   306  000009                     ___lomod@divisor:
   307                           	opt callstack 0
   308                           
   309                           ; 8 bytes @ 0x8
   310  000009                     	ds	1
   311  00000A                     ??_atoi:
   312  00000A                     print@k:
   313                           	opt callstack 0
   314  00000A                     fputs@s:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0x9
   318  00000A                     	ds	2
   319  00000C                     fputs@fp:
   320                           	opt callstack 0
   321                           
   322                           ; 2 bytes @ 0xB
   323  00000C                     	ds	2
   324  00000E                     fputs@c:
   325                           	opt callstack 0
   326  00000E                     atoi@neg:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0xD
   330  00000E                     	ds	1
   331  00000F                     fputs@i:
   332                           	opt callstack 0
   333                           
   334                           ; 2 bytes @ 0xE
   335  00000F                     	ds	1
   336  000010                     _atoi$1107:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0xF
   340  000010                     	ds	1
   341  000011                     ?_pad:
   342                           	opt callstack 0
   343  000011                     ___lomod@counter:
   344                           	opt callstack 0
   345  000011                     pad@fp:
   346                           	opt callstack 0
   347  000011                     ___lodiv@quotient:
   348                           	opt callstack 0
   349                           
   350                           ; 8 bytes @ 0x10
   351  000011                     	ds	1
   352  000012                     _atoi$1109:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x11
   356  000012                     	ds	1
   357  000013                     pad@buf:
   358                           	opt callstack 0
   359                           
   360                           ; 2 bytes @ 0x12
   361  000013                     	ds	1
   362  000014                     _atoi$1108:
   363                           	opt callstack 0
   364                           
   365                           ; 1 bytes @ 0x13
   366  000014                     	ds	1
   367  000015                     pad@p:
   368                           	opt callstack 0
   369  000015                     atoi@n:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x14
   373  000015                     	ds	2
   374  000017                     ??_pad:
   375                           
   376                           ; 1 bytes @ 0x16
   377  000017                     	ds	1
   378  000018                     pad@i:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x17
   382  000018                     	ds	1
   383  000019                     ___lodiv@counter:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0x18
   387  000019                     	ds	1
   388  00001A                     pad@w:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x19
   392  00001A                     	ds	2
   393  00001C                     ?_utoa:
   394                           	opt callstack 0
   395  00001C                     utoa@fp:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x1B
   399  00001C                     	ds	2
   400  00001E                     utoa@d:
   401                           	opt callstack 0
   402                           
   403                           ; 8 bytes @ 0x1D
   404  00001E                     	ds	8
   405  000026                     ??_utoa:
   406                           
   407                           ; 1 bytes @ 0x25
   408  000026                     	ds	8
   409  00002E                     utoa@p:
   410                           	opt callstack 0
   411                           
   412                           ; 2 bytes @ 0x2D
   413  00002E                     	ds	2
   414  000030                     utoa@w:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x2F
   418  000030                     	ds	2
   419  000032                     utoa@n:
   420                           	opt callstack 0
   421                           
   422                           ; 8 bytes @ 0x31
   423  000032                     	ds	8
   424  00003A                     utoa@i:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x39
   428  00003A                     	ds	2
   429  00003C                     ?_vfpfcnvrt:
   430                           	opt callstack 0
   431  00003C                     vfpfcnvrt@fp:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x3B
   435  00003C                     	ds	2
   436  00003E                     vfpfcnvrt@fmt:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x3D
   440  00003E                     	ds	2
   441  000040                     vfpfcnvrt@ap:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x3F
   445  000040                     	ds	2
   446  000042                     ??_vfpfcnvrt:
   447                           
   448                           ; 1 bytes @ 0x41
   449  000042                     	ds	4
   450  000046                     vfpfcnvrt@llu:
   451                           	opt callstack 0
   452                           
   453                           ; 8 bytes @ 0x45
   454  000046                     	ds	8
   455  00004E                     _vfpfcnvrt$651:
   456                           	opt callstack 0
   457                           
   458                           ; 2 bytes @ 0x4D
   459  00004E                     	ds	2
   460  000050                     _vfpfcnvrt$652:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x4F
   464  000050                     	ds	2
   465  000052                     ?_vfprintf:
   466                           	opt callstack 0
   467  000052                     vfprintf@fp:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0x51
   471  000052                     	ds	2
   472  000054                     vfprintf@fmt:
   473                           	opt callstack 0
   474                           
   475                           ; 2 bytes @ 0x53
   476  000054                     	ds	2
   477  000056                     vfprintf@ap:
   478                           	opt callstack 0
   479                           
   480                           ; 2 bytes @ 0x55
   481  000056                     	ds	2
   482  000058                     vfprintf@cfmt:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x57
   486  000058                     	ds	2
   487  00005A                     ?_sprintf:
   488                           	opt callstack 0
   489  00005A                     sprintf@s:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x59
   493  00005A                     	ds	2
   494  00005C                     sprintf@fmt:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x5B
   498  00005C                     	ds	4
   499  000060                     
   500                           ; 1 bytes @ 0x5F
   501 ;;
   502 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   503 ;;
   504 ;; *************** function _main *****************
   505 ;; Defined at:
   506 ;;		line 20 in file "main.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;  argc            2   10[BANK0 ] int 
   509 ;;  argv            3   12[BANK0 ] PTR PTR unsigned char 
   510 ;; Auto vars:     Size  Location     Type
   511 ;;		None
   512 ;; Return value:  Size  Location     Type
   513 ;;                  2   10[BANK0 ] int 
   514 ;; Registers used:
   515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   521 ;;      Params:         0       5       0       0       0       0       0       0       0
   522 ;;      Locals:         0       0       0       0       0       0       0       0       0
   523 ;;      Temps:          0       2       0       0       0       0       0       0       0
   524 ;;      Totals:         0       7       0       0       0       0       0       0       0
   525 ;;Total ram usage:        7 bytes
   526 ;; Hardware stack levels required when called:    8
   527 ;; This function calls:
   528 ;;		_ADC_begin
   529 ;;		_analogRead
   530 ;;		_begin
   531 ;;		_oscilador
   532 ;;		_print
   533 ;;		_registros
   534 ;;		_setCursor
   535 ;;		_sprintf
   536 ;; This function is called by:
   537 ;;		Startup code after reset
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text0
   542  001068                     __ptext0:
   543                           	opt callstack 0
   544  001068                     _main:
   545                           	opt callstack 23
   546  001068                     
   547                           ;main.c: 22:     oscilador();
   548  001068  EC44  F00C         	call	_oscilador	;wreg free
   549                           
   550                           ;main.c: 23:     registros();
   551  00106C  EC3A  F00C         	call	_registros	;wreg free
   552                           
   553                           ;main.c: 25:     begin();
   554  001070  EC50  F00B         	call	_begin	;wreg free
   555                           
   556                           ;main.c: 26:     ADC_begin();
   557  001074  ECEB  F00B         	call	_ADC_begin	;wreg free
   558  001078                     
   559                           ;main.c: 28:     setCursor(2,1);
   560  001078  0E01               	movlw	1
   561  00107A  6E03               	movwf	setCursor@y^0,c
   562  00107C  0E02               	movlw	2
   563  00107E  ECA7  F007         	call	_setCursor
   564  001082                     
   565                           ;main.c: 29:     _delay((unsigned long)((5000)*(2000000/4000.0)));
   566  001082  0E0D               	movlw	13
   567  001084  0100               	movlb	0	; () banked
   568  001086  6FB2               	movwf	(??_main+1)& (0+255),b
   569  001088  0EAF               	movlw	175
   570  00108A  6FB1               	movwf	??_main& (0+255),b
   571  00108C  0EB6               	movlw	182
   572  00108E                     u1357:
   573  00108E  2EE8               	decfsz	wreg,f,c
   574  001090  D7FE               	bra	u1357
   575  001092  2FB1               	decfsz	??_main& (0+255),f,b
   576  001094  D7FC               	bra	u1357
   577  001096  2FB2               	decfsz	(??_main+1)& (0+255),f,b
   578  001098  D7FA               	bra	u1357
   579  00109A  F000               	nop	
   580  00109C                     
   581                           ;main.c: 30:     print("HOLA");
   582  00109C  0E07               	movlw	low STR_1
   583  00109E  6E06               	movwf	print@a^0,c
   584  0010A0  0E08               	movlw	high STR_1
   585  0010A2  6E07               	movwf	(print@a+1)^0,c
   586  0010A4  EC60  F00A         	call	_print	;wreg free
   587  0010A8                     l1953:
   588                           
   589                           ;main.c: 32:         pot=analogRead(0b00000);
   590  0010A8  0E00               	movlw	0
   591  0010AA  EC97  F00B         	call	_analogRead
   592  0010AE  C001  F06E         	movff	?_analogRead,_pot
   593  0010B2  C002  F06F         	movff	?_analogRead+1,_pot+1
   594  0010B6                     
   595                           ;main.c: 33:         pot1=analogRead(0b01100);
   596  0010B6  0E0C               	movlw	12
   597  0010B8  EC97  F00B         	call	_analogRead
   598  0010BC  C001  F06C         	movff	?_analogRead,_pot1
   599  0010C0  C002  F06D         	movff	?_analogRead+1,_pot1+1
   600  0010C4                     
   601                           ;main.c: 34:         pot2=analogRead(0b01110);
   602  0010C4  0E0E               	movlw	14
   603  0010C6  EC97  F00B         	call	_analogRead
   604  0010CA  C001  F06A         	movff	?_analogRead,_pot2
   605  0010CE  C002  F06B         	movff	?_analogRead+1,_pot2+1
   606  0010D2                     
   607                           ;main.c: 36:         sprintf(valor,"%4.1u",pot);
   608  0010D2  0E9C               	movlw	low _valor
   609  0010D4  6E5A               	movwf	sprintf@s^0,c
   610  0010D6  0E00               	movlw	high _valor
   611  0010D8  6E5B               	movwf	(sprintf@s+1)^0,c
   612  0010DA  0E01               	movlw	low STR_2
   613  0010DC  6E5C               	movwf	sprintf@fmt^0,c
   614  0010DE  0E08               	movlw	high STR_2
   615  0010E0  6E5D               	movwf	(sprintf@fmt+1)^0,c
   616  0010E2  C06E  F05E         	movff	_pot,?_sprintf+4
   617  0010E6  C06F  F05F         	movff	_pot+1,?_sprintf+5
   618  0010EA  ECFE  F00A         	call	_sprintf	;wreg free
   619  0010EE                     
   620                           ;main.c: 37:         sprintf(valor1,"%4.1u",pot1);
   621  0010EE  0E96               	movlw	low _valor1
   622  0010F0  6E5A               	movwf	sprintf@s^0,c
   623  0010F2  0E00               	movlw	high _valor1
   624  0010F4  6E5B               	movwf	(sprintf@s+1)^0,c
   625  0010F6  0E01               	movlw	low STR_2
   626  0010F8  6E5C               	movwf	sprintf@fmt^0,c
   627  0010FA  0E08               	movlw	high STR_2
   628  0010FC  6E5D               	movwf	(sprintf@fmt+1)^0,c
   629  0010FE  C06C  F05E         	movff	_pot1,?_sprintf+4
   630  001102  C06D  F05F         	movff	_pot1+1,?_sprintf+5
   631  001106  ECFE  F00A         	call	_sprintf	;wreg free
   632  00110A                     
   633                           ;main.c: 38:         sprintf(valor2,"%4.1u",pot2);
   634  00110A  0E90               	movlw	low _valor2
   635  00110C  6E5A               	movwf	sprintf@s^0,c
   636  00110E  0E00               	movlw	high _valor2
   637  001110  6E5B               	movwf	(sprintf@s+1)^0,c
   638  001112  0E01               	movlw	low STR_2
   639  001114  6E5C               	movwf	sprintf@fmt^0,c
   640  001116  0E08               	movlw	high STR_2
   641  001118  6E5D               	movwf	(sprintf@fmt+1)^0,c
   642  00111A  C06A  F05E         	movff	_pot2,?_sprintf+4
   643  00111E  C06B  F05F         	movff	_pot2+1,?_sprintf+5
   644  001122  ECFE  F00A         	call	_sprintf	;wreg free
   645  001126                     
   646                           ;main.c: 40:         setCursor(2,2);
   647  001126  0E02               	movlw	2
   648  001128  6E03               	movwf	setCursor@y^0,c
   649  00112A  0E02               	movlw	2
   650  00112C  ECA7  F007         	call	_setCursor
   651  001130                     
   652                           ;main.c: 41:         print(valor);
   653  001130  0E9C               	movlw	low _valor
   654  001132  6E06               	movwf	print@a^0,c
   655  001134  0E00               	movlw	high _valor
   656  001136  6E07               	movwf	(print@a+1)^0,c
   657  001138  EC60  F00A         	call	_print	;wreg free
   658  00113C                     
   659                           ;main.c: 42:         setCursor(2,3);
   660  00113C  0E03               	movlw	3
   661  00113E  6E03               	movwf	setCursor@y^0,c
   662  001140  0E02               	movlw	2
   663  001142  ECA7  F007         	call	_setCursor
   664  001146                     
   665                           ;main.c: 43:         print(valor1);
   666  001146  0E96               	movlw	low _valor1
   667  001148  6E06               	movwf	print@a^0,c
   668  00114A  0E00               	movlw	high _valor1
   669  00114C  6E07               	movwf	(print@a+1)^0,c
   670  00114E  EC60  F00A         	call	_print	;wreg free
   671  001152                     
   672                           ;main.c: 44:         setCursor(2,4);
   673  001152  0E04               	movlw	4
   674  001154  6E03               	movwf	setCursor@y^0,c
   675  001156  0E02               	movlw	2
   676  001158  ECA7  F007         	call	_setCursor
   677  00115C                     
   678                           ;main.c: 45:         print(valor2);
   679  00115C  0E90               	movlw	low _valor2
   680  00115E  6E06               	movwf	print@a^0,c
   681  001160  0E00               	movlw	high _valor2
   682  001162  6E07               	movwf	(print@a+1)^0,c
   683  001164  EC60  F00A         	call	_print	;wreg free
   684  001168  EF54  F008         	goto	l1953
   685  00116C  EF00  F000         	goto	start
   686  001170                     __end_of_main:
   687                           	opt callstack 0
   688                           
   689 ;; *************** function _sprintf *****************
   690 ;; Defined at:
   691 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  s               2   89[COMRAM] PTR unsigned char 
   694 ;;		 -> valor2(6), valor1(6), valor(6), 
   695 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
   696 ;;		 -> STR_4(6), STR_3(6), STR_2(6), 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  f               6    4[BANK0 ] struct _IO_FILE
   699 ;;  ap              2    2[BANK0 ] PTR void [1]
   700 ;;		 -> ?_sprintf(2), 
   701 ;;  ret             2    0        int 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  2   89[COMRAM] int 
   704 ;; Registers used:
   705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   711 ;;      Params:         6       0       0       0       0       0       0       0       0
   712 ;;      Locals:         0      10       0       0       0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0       0       0
   714 ;;      Totals:         6      10       0       0       0       0       0       0       0
   715 ;;Total ram usage:       16 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    7
   718 ;; This function calls:
   719 ;;		_vfprintf
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text1
   726  0015FC                     __ptext1:
   727                           	opt callstack 0
   728  0015FC                     _sprintf:
   729                           	opt callstack 23
   730  0015FC  0E5E               	movlw	low (?_sprintf+4)
   731  0015FE  0100               	movlb	0	; () banked
   732  001600  6FA4               	movwf	sprintf@ap& (0+255),b
   733  001602  0E00               	movlw	high (?_sprintf+4)
   734  001604  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
   735  001606  C05A  F0A6         	movff	sprintf@s,sprintf@f
   736  00160A  C05B  F0A7         	movff	sprintf@s+1,sprintf@f+1
   737  00160E                     
   738                           ; BSR set to: 0
   739  00160E  0E00               	movlw	0
   740  001610  6FA9               	movwf	(sprintf@f+3)& (0+255),b
   741  001612  0E00               	movlw	0
   742  001614  6FA8               	movwf	(sprintf@f+2)& (0+255),b
   743  001616                     
   744                           ; BSR set to: 0
   745  001616  0E00               	movlw	0
   746  001618  6FAB               	movwf	(sprintf@f+5)& (0+255),b
   747  00161A  0E00               	movlw	0
   748  00161C  6FAA               	movwf	(sprintf@f+4)& (0+255),b
   749  00161E                     
   750                           ; BSR set to: 0
   751  00161E  0EA6               	movlw	low sprintf@f
   752  001620  6E52               	movwf	vfprintf@fp^0,c
   753  001622  0E00               	movlw	high sprintf@f
   754  001624  6E53               	movwf	(vfprintf@fp+1)^0,c
   755  001626  C05C  F054         	movff	sprintf@fmt,vfprintf@fmt
   756  00162A  C05D  F055         	movff	sprintf@fmt+1,vfprintf@fmt+1
   757  00162E  0EA4               	movlw	low sprintf@ap
   758  001630  6E56               	movwf	vfprintf@ap^0,c
   759  001632  0E00               	movlw	high sprintf@ap
   760  001634  6E57               	movwf	(vfprintf@ap+1)^0,c
   761  001636  EC9F  F00A         	call	_vfprintf	;wreg free
   762  00163A  0100               	movlb	0	; () banked
   763  00163C  51A8               	movf	(sprintf@f+2)& (0+255),w,b
   764  00163E  245A               	addwf	sprintf@s^0,w,c
   765  001640  6ED9               	movwf	fsr2l,c
   766  001642  51A9               	movf	(sprintf@f+3)& (0+255),w,b
   767  001644  205B               	addwfc	(sprintf@s+1)^0,w,c
   768  001646  6EDA               	movwf	fsr2h,c
   769  001648  0E00               	movlw	0
   770  00164A  6EDF               	movwf	indf2,c
   771  00164C                     
   772                           ; BSR set to: 0
   773  00164C  0012               	return		;funcret
   774  00164E                     __end_of_sprintf:
   775                           	opt callstack 0
   776                           
   777 ;; *************** function _vfprintf *****************
   778 ;; Defined at:
   779 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  fp              2   81[COMRAM] PTR struct _IO_FILE
   782 ;;		 -> sprintf@f(6), 
   783 ;;  fmt             2   83[COMRAM] PTR const unsigned char 
   784 ;;		 -> STR_4(6), STR_3(6), STR_2(6), 
   785 ;;  ap              2   85[COMRAM] PTR PTR void 
   786 ;;		 -> sprintf@ap(2), 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  cfmt            2   87[COMRAM] PTR unsigned char 
   789 ;;		 -> STR_4(6), STR_3(6), STR_2(6), 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  2   81[COMRAM] int 
   792 ;; Registers used:
   793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   799 ;;      Params:         6       0       0       0       0       0       0       0       0
   800 ;;      Locals:         2       0       0       0       0       0       0       0       0
   801 ;;      Temps:          0       0       0       0       0       0       0       0       0
   802 ;;      Totals:         8       0       0       0       0       0       0       0       0
   803 ;;Total ram usage:        8 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; Hardware stack levels required when called:    6
   806 ;; This function calls:
   807 ;;		_vfpfcnvrt
   808 ;; This function is called by:
   809 ;;		_sprintf
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  00153E                     __ptext2:
   815                           	opt callstack 0
   816  00153E                     _vfprintf:
   817                           	opt callstack 23
   818  00153E                     
   819                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   820  00153E  C054  F058         	movff	vfprintf@fmt,vfprintf@cfmt
   821  001542  C055  F059         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   822  001546                     
   823                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   824  001546  0E00               	movlw	0
   825  001548  0100               	movlb	0	; () banked
   826  00154A  6F61               	movwf	(_nout+1)& (0+255),b
   827  00154C  0E00               	movlw	0
   828  00154E  6F60               	movwf	_nout& (0+255),b
   829                           
   830                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   831  001550  EFBD  F00A         	goto	l1867
   832  001554                     l1865:
   833                           
   834                           ; BSR set to: 0
   835                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   836  001554  C052  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   837  001558  C053  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   838  00155C  0E58               	movlw	low vfprintf@cfmt
   839  00155E  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   840  001560  0E00               	movlw	high vfprintf@cfmt
   841  001562  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   842  001564  C056  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   843  001568  C057  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   844  00156C  EC07  F004         	call	_vfpfcnvrt	;wreg free
   845  001570  503C               	movf	?_vfpfcnvrt^0,w,c
   846  001572  0100               	movlb	0	; () banked
   847  001574  2760               	addwf	_nout& (0+255),f,b
   848  001576  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   849  001578  2361               	addwfc	(_nout+1)& (0+255),f,b
   850  00157A                     l1867:
   851                           
   852                           ; BSR set to: 0
   853                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   854  00157A  C058  FFF6         	movff	vfprintf@cfmt,tblptrl
   855  00157E  C059  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   856  001582                     	if	0	;tblptru may be non-zero
   857  001582                     	endif
   858  001582                     	if	0	;tblptru may be non-zero
   859  001582                     	endif
   860  001582  0008               	tblrd		*
   861  001584  50F5               	movf	tablat,w,c
   862  001586  0900               	iorlw	0
   863  001588  A4D8               	btfss	status,2,c
   864  00158A  EFC9  F00A         	goto	u1201
   865  00158E  EFCB  F00A         	goto	u1200
   866  001592                     u1201:
   867  001592  EFAA  F00A         	goto	l1865
   868  001596                     u1200:
   869  001596                     
   870                           ; BSR set to: 0
   871                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   872  001596  C060  F052         	movff	_nout,?_vfprintf
   873  00159A  C061  F053         	movff	_nout+1,?_vfprintf+1
   874  00159E                     
   875                           ; BSR set to: 0
   876  00159E  0012               	return		;funcret
   877  0015A0                     __end_of_vfprintf:
   878                           	opt callstack 0
   879                           
   880 ;; *************** function _vfpfcnvrt *****************
   881 ;; Defined at:
   882 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   885 ;;		 -> sprintf@f(6), 
   886 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   887 ;;		 -> vfprintf@cfmt(2), 
   888 ;;  ap              2   63[COMRAM] PTR PTR void 
   889 ;;		 -> sprintf@ap(2), 
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  llu             8   69[COMRAM] unsigned long long 
   892 ;;  ll              8    0        long long 
   893 ;;  f               4    0        long long 
   894 ;;  vp              3    0        PTR void 
   895 ;;  ct              3    0        unsigned char [3]
   896 ;;  cp              3    0        PTR unsigned char 
   897 ;;  i               2    0        int 
   898 ;;  done            2    0        int 
   899 ;;  c               1    0        unsigned char 
   900 ;; Return value:  Size  Location     Type
   901 ;;                  2   59[COMRAM] int 
   902 ;; Registers used:
   903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   909 ;;      Params:         6       0       0       0       0       0       0       0       0
   910 ;;      Locals:        12       0       0       0       0       0       0       0       0
   911 ;;      Temps:          4       0       0       0       0       0       0       0       0
   912 ;;      Totals:        22       0       0       0       0       0       0       0       0
   913 ;;Total ram usage:       22 bytes
   914 ;; Hardware stack levels used:    1
   915 ;; Hardware stack levels required when called:    5
   916 ;; This function calls:
   917 ;;		_atoi
   918 ;;		_fputc
   919 ;;		_isdigit
   920 ;;		_utoa
   921 ;; This function is called by:
   922 ;;		_vfprintf
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           	psect	text3
   927  00080E                     __ptext3:
   928                           	opt callstack 0
   929  00080E                     _vfpfcnvrt:
   930                           	opt callstack 23
   931  00080E                     
   932                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   933  00080E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   934  000812  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   935  000816  CFDE FFF6          	movff	postinc2,tblptrl
   936  00081A  CFDD FFF7          	movff	postdec2,tblptrh
   937  00081E                     	if	0	;tblptru may be non-zero
   938  00081E                     	endif
   939  00081E                     	if	0	;tblptru may be non-zero
   940  00081E                     	endif
   941  00081E  0008               	tblrd		*
   942  000820  50F5               	movf	tablat,w,c
   943  000822  0A25               	xorlw	37
   944  000824  A4D8               	btfss	status,2,c
   945  000826  EF17  F004         	goto	u1071
   946  00082A  EF19  F004         	goto	u1070
   947  00082E                     u1071:
   948  00082E  EFC2  F005         	goto	l1841
   949  000832                     u1070:
   950  000832                     
   951                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   952  000832  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   953  000836  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   954  00083A  2ADE               	incf	postinc2,f,c
   955  00083C  0E00               	movlw	0
   956  00083E  22DD               	addwfc	postdec2,f,c
   957  000840                     
   958                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   959  000840  0E00               	movlw	0
   960  000842  0100               	movlb	0	; () banked
   961  000844  6F63               	movwf	(_width+1)& (0+255),b
   962  000846  0E00               	movlw	0
   963  000848  6F62               	movwf	_width& (0+255),b
   964  00084A  C062  F066         	movff	_width,_flags
   965  00084E  C063  F067         	movff	_width+1,_flags+1
   966  000852                     
   967                           ; BSR set to: 0
   968                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   969  000852  6964               	setf	_prec& (0+255),b
   970  000854  6965               	setf	(_prec+1)& (0+255),b
   971  000856                     
   972                           ; BSR set to: 0
   973                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
   974  000856  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   975  00085A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   976  00085E  CFDE FFF6          	movff	postinc2,tblptrl
   977  000862  CFDD FFF7          	movff	postdec2,tblptrh
   978  000866                     	if	0	;tblptru may be non-zero
   979  000866                     	endif
   980  000866                     	if	0	;tblptru may be non-zero
   981  000866                     	endif
   982  000866  0008               	tblrd		*
   983  000868  50F5               	movf	tablat,w,c
   984  00086A  0A2A               	xorlw	42
   985  00086C  A4D8               	btfss	status,2,c
   986  00086E  EF3B  F004         	goto	u1081
   987  000872  EF3D  F004         	goto	u1080
   988  000876                     u1081:
   989  000876  EF66  F004         	goto	l1787
   990  00087A                     u1080:
   991  00087A                     
   992                           ; BSR set to: 0
   993                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
   994  00087A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   995  00087E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   996  000882  2ADE               	incf	postinc2,f,c
   997  000884  0E00               	movlw	0
   998  000886  22DD               	addwfc	postdec2,f,c
   999                           
  1000                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1001  000888  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1002  00088C  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1003  000890  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1004  000894  0E02               	movlw	2
  1005  000896  26DE               	addwf	postinc2,f,c
  1006  000898  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1007  00089C  0E00               	movlw	0
  1008  00089E  22DD               	addwfc	postdec2,f,c
  1009  0008A0  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1010  0008A4  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1011  0008A8  CFDE F062          	movff	postinc2,_width
  1012  0008AC  CFDD F063          	movff	postdec2,_width+1
  1013  0008B0                     
  1014                           ; BSR set to: 0
  1015                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1016  0008B0  BF63               	btfsc	(_width+1)& (0+255),7,b
  1017  0008B2  EF5F  F004         	goto	u1090
  1018  0008B6  EF5D  F004         	goto	u1091
  1019  0008BA                     u1091:
  1020  0008BA  EFA9  F004         	goto	l1797
  1021  0008BE                     u1090:
  1022  0008BE                     
  1023                           ; BSR set to: 0
  1024                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1025  0008BE  8166               	bsf	_flags& (0+255),0,b
  1026                           
  1027                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1028  0008C0  6D62               	negf	_width& (0+255),b
  1029  0008C2  1F63               	comf	(_width+1)& (0+255),f,b
  1030  0008C4  B0D8               	btfsc	status,0,c
  1031  0008C6  2B63               	incf	(_width+1)& (0+255),f,b
  1032  0008C8  EFA9  F004         	goto	l1797
  1033  0008CC                     l1787:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1037  0008CC  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1038  0008D0  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1039  0008D4  CFDE F008          	movff	postinc2,atoi@s
  1040  0008D8  CFDD F009          	movff	postdec2,atoi@s+1
  1041  0008DC  ECDF  F006         	call	_atoi	;wreg free
  1042  0008E0  C008  F062         	movff	?_atoi,_width
  1043  0008E4  C009  F063         	movff	?_atoi+1,_width+1
  1044                           
  1045                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1046  0008E8  EF7D  F004         	goto	l1791
  1047  0008EC                     l1789:
  1048                           
  1049                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1050  0008EC  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1051  0008F0  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1052  0008F4  2ADE               	incf	postinc2,f,c
  1053  0008F6  0E00               	movlw	0
  1054  0008F8  22DD               	addwfc	postdec2,f,c
  1055  0008FA                     l1791:
  1056  0008FA  0ED0               	movlw	208
  1057  0008FC  6E42               	movwf	??_vfpfcnvrt^0,c
  1058  0008FE  0EFF               	movlw	255
  1059  000900  6E43               	movwf	(??_vfpfcnvrt+1)^0,c
  1060  000902  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1061  000906  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1062  00090A  CFDE FFF6          	movff	postinc2,tblptrl
  1063  00090E  CFDD FFF7          	movff	postdec2,tblptrh
  1064  000912                     	if	0	;tblptru may be non-zero
  1065  000912                     	endif
  1066  000912                     	if	0	;tblptru may be non-zero
  1067  000912                     	endif
  1068  000912  0008               	tblrd		*
  1069  000914  50F5               	movf	tablat,w,c
  1070  000916  6E44               	movwf	(??_vfpfcnvrt+2)^0,c
  1071  000918  6A45               	clrf	(??_vfpfcnvrt+3)^0,c
  1072  00091A  5042               	movf	??_vfpfcnvrt^0,w,c
  1073  00091C  2644               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1074  00091E  5043               	movf	(??_vfpfcnvrt+1)^0,w,c
  1075  000920  2245               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1076  000922  5045               	movf	(??_vfpfcnvrt+3)^0,w,c
  1077  000924  E10A               	bnz	u1100
  1078  000926  0E0A               	movlw	10
  1079  000928  5C44               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1080  00092A  A0D8               	btfss	status,0,c
  1081  00092C  EF9A  F004         	goto	u1101
  1082  000930  EF9D  F004         	goto	u1100
  1083  000934                     u1101:
  1084  000934  0E01               	movlw	1
  1085  000936  EF9E  F004         	goto	u1110
  1086  00093A                     u1100:
  1087  00093A  0E00               	movlw	0
  1088  00093C                     u1110:
  1089  00093C  6E4E               	movwf	_vfpfcnvrt$651^0,c
  1090  00093E  6A4F               	clrf	(_vfpfcnvrt$651+1)^0,c
  1091  000940  504E               	movf	_vfpfcnvrt$651^0,w,c
  1092  000942  104F               	iorwf	(_vfpfcnvrt$651+1)^0,w,c
  1093  000944  A4D8               	btfss	status,2,c
  1094  000946  EFA7  F004         	goto	u1121
  1095  00094A  EFA9  F004         	goto	u1120
  1096  00094E                     u1121:
  1097  00094E  EF76  F004         	goto	l1789
  1098  000952                     u1120:
  1099  000952                     l1797:
  1100                           
  1101                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
  1102  000952  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1103  000956  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1104  00095A  CFDE FFF6          	movff	postinc2,tblptrl
  1105  00095E  CFDD FFF7          	movff	postdec2,tblptrh
  1106  000962                     	if	0	;tblptru may be non-zero
  1107  000962                     	endif
  1108  000962                     	if	0	;tblptru may be non-zero
  1109  000962                     	endif
  1110  000962  0008               	tblrd		*
  1111  000964  50F5               	movf	tablat,w,c
  1112  000966  0A2E               	xorlw	46
  1113  000968  A4D8               	btfss	status,2,c
  1114  00096A  EFB9  F004         	goto	u1131
  1115  00096E  EFBB  F004         	goto	u1130
  1116  000972                     u1131:
  1117  000972  EF39  F005         	goto	l1817
  1118  000976                     u1130:
  1119  000976                     
  1120                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
  1121  000976  0E00               	movlw	0
  1122  000978  0100               	movlb	0	; () banked
  1123  00097A  6F65               	movwf	(_prec+1)& (0+255),b
  1124  00097C  0E00               	movlw	0
  1125  00097E  6F64               	movwf	_prec& (0+255),b
  1126  000980                     
  1127                           ; BSR set to: 0
  1128                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
  1129  000980  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1130  000984  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1131  000988  2ADE               	incf	postinc2,f,c
  1132  00098A  0E00               	movlw	0
  1133  00098C  22DD               	addwfc	postdec2,f,c
  1134  00098E                     
  1135                           ; BSR set to: 0
  1136                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
  1137  00098E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1138  000992  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1139  000996  CFDE FFF6          	movff	postinc2,tblptrl
  1140  00099A  CFDD FFF7          	movff	postdec2,tblptrh
  1141  00099E                     	if	0	;tblptru may be non-zero
  1142  00099E                     	endif
  1143  00099E                     	if	0	;tblptru may be non-zero
  1144  00099E                     	endif
  1145  00099E  0008               	tblrd		*
  1146  0009A0  50F5               	movf	tablat,w,c
  1147  0009A2  0A2A               	xorlw	42
  1148  0009A4  A4D8               	btfss	status,2,c
  1149  0009A6  EFD7  F004         	goto	u1141
  1150  0009AA  EFD9  F004         	goto	u1140
  1151  0009AE                     u1141:
  1152  0009AE  EFF6  F004         	goto	l1807
  1153  0009B2                     u1140:
  1154  0009B2                     
  1155                           ; BSR set to: 0
  1156                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
  1157  0009B2  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1158  0009B6  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1159  0009BA  2ADE               	incf	postinc2,f,c
  1160  0009BC  0E00               	movlw	0
  1161  0009BE  22DD               	addwfc	postdec2,f,c
  1162                           
  1163                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  1164  0009C0  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1165  0009C4  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1166  0009C8  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1167  0009CC  0E02               	movlw	2
  1168  0009CE  26DE               	addwf	postinc2,f,c
  1169  0009D0  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1170  0009D4  0E00               	movlw	0
  1171  0009D6  22DD               	addwfc	postdec2,f,c
  1172  0009D8  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1173  0009DC  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1174  0009E0  CFDE F064          	movff	postinc2,_prec
  1175  0009E4  CFDD F065          	movff	postdec2,_prec+1
  1176                           
  1177                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
  1178  0009E8  EF39  F005         	goto	l1817
  1179  0009EC                     l1807:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
  1183  0009EC  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1184  0009F0  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1185  0009F4  CFDE F008          	movff	postinc2,atoi@s
  1186  0009F8  CFDD F009          	movff	postdec2,atoi@s+1
  1187  0009FC  ECDF  F006         	call	_atoi	;wreg free
  1188  000A00  C008  F064         	movff	?_atoi,_prec
  1189  000A04  C009  F065         	movff	?_atoi+1,_prec+1
  1190                           
  1191                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1192  000A08  EF0D  F005         	goto	l1811
  1193  000A0C                     l1809:
  1194                           
  1195                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
  1196  000A0C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1197  000A10  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1198  000A14  2ADE               	incf	postinc2,f,c
  1199  000A16  0E00               	movlw	0
  1200  000A18  22DD               	addwfc	postdec2,f,c
  1201  000A1A                     l1811:
  1202  000A1A  0ED0               	movlw	208
  1203  000A1C  6E42               	movwf	??_vfpfcnvrt^0,c
  1204  000A1E  0EFF               	movlw	255
  1205  000A20  6E43               	movwf	(??_vfpfcnvrt+1)^0,c
  1206  000A22  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1207  000A26  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1208  000A2A  CFDE FFF6          	movff	postinc2,tblptrl
  1209  000A2E  CFDD FFF7          	movff	postdec2,tblptrh
  1210  000A32                     	if	0	;tblptru may be non-zero
  1211  000A32                     	endif
  1212  000A32                     	if	0	;tblptru may be non-zero
  1213  000A32                     	endif
  1214  000A32  0008               	tblrd		*
  1215  000A34  50F5               	movf	tablat,w,c
  1216  000A36  6E44               	movwf	(??_vfpfcnvrt+2)^0,c
  1217  000A38  6A45               	clrf	(??_vfpfcnvrt+3)^0,c
  1218  000A3A  5042               	movf	??_vfpfcnvrt^0,w,c
  1219  000A3C  2644               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1220  000A3E  5043               	movf	(??_vfpfcnvrt+1)^0,w,c
  1221  000A40  2245               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1222  000A42  5045               	movf	(??_vfpfcnvrt+3)^0,w,c
  1223  000A44  E10A               	bnz	u1150
  1224  000A46  0E0A               	movlw	10
  1225  000A48  5C44               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1226  000A4A  A0D8               	btfss	status,0,c
  1227  000A4C  EF2A  F005         	goto	u1151
  1228  000A50  EF2D  F005         	goto	u1150
  1229  000A54                     u1151:
  1230  000A54  0E01               	movlw	1
  1231  000A56  EF2E  F005         	goto	u1160
  1232  000A5A                     u1150:
  1233  000A5A  0E00               	movlw	0
  1234  000A5C                     u1160:
  1235  000A5C  6E50               	movwf	_vfpfcnvrt$652^0,c
  1236  000A5E  6A51               	clrf	(_vfpfcnvrt$652+1)^0,c
  1237  000A60  5050               	movf	_vfpfcnvrt$652^0,w,c
  1238  000A62  1051               	iorwf	(_vfpfcnvrt$652+1)^0,w,c
  1239  000A64  A4D8               	btfss	status,2,c
  1240  000A66  EF37  F005         	goto	u1171
  1241  000A6A  EF39  F005         	goto	u1170
  1242  000A6E                     u1171:
  1243  000A6E  EF06  F005         	goto	l1809
  1244  000A72                     u1170:
  1245  000A72                     l1817:
  1246                           
  1247                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1248  000A72  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1249  000A76  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1250  000A7A  CFDE FFF6          	movff	postinc2,tblptrl
  1251  000A7E  CFDD FFF7          	movff	postdec2,tblptrh
  1252  000A82                     	if	0	;tblptru may be non-zero
  1253  000A82                     	endif
  1254  000A82                     	if	0	;tblptru may be non-zero
  1255  000A82                     	endif
  1256  000A82  0008               	tblrd		*
  1257  000A84  50F5               	movf	tablat,w,c
  1258  000A86  0A75               	xorlw	117
  1259  000A88  A4D8               	btfss	status,2,c
  1260  000A8A  EF49  F005         	goto	u1181
  1261  000A8E  EF4B  F005         	goto	u1180
  1262  000A92                     u1181:
  1263  000A92  EF8C  F005         	goto	l1825
  1264  000A96                     u1180:
  1265  000A96                     
  1266                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1267  000A96  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1268  000A9A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1269  000A9E  2ADE               	incf	postinc2,f,c
  1270  000AA0  0E00               	movlw	0
  1271  000AA2  22DD               	addwfc	postdec2,f,c
  1272                           
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1274  000AA4  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1275  000AA8  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1276  000AAC  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1277  000AB0  0E02               	movlw	2
  1278  000AB2  26DE               	addwf	postinc2,f,c
  1279  000AB4  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1280  000AB8  0E00               	movlw	0
  1281  000ABA  22DD               	addwfc	postdec2,f,c
  1282  000ABC  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1283  000AC0  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1284  000AC4  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
  1285  000AC8  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
  1286  000ACC  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1287  000AD0  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1288  000AD4  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
  1289  000AD6  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
  1290  000AD8  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
  1291  000ADA  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
  1292  000ADC  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
  1293  000ADE  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
  1294  000AE0                     
  1295                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1296  000AE0  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
  1297  000AE4  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1298  000AE8  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1299  000AEC  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1300  000AF0  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1301  000AF4  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1302  000AF8  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1303  000AFC  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1304  000B00  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1305  000B04  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1306  000B08  ECDE  F005         	call	_utoa	;wreg free
  1307  000B0C  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1308  000B10  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1309  000B14  EFDD  F005         	goto	l219
  1310  000B18                     l1825:
  1311                           
  1312                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1313  000B18  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1314  000B1C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1315  000B20  CFDE FFF6          	movff	postinc2,tblptrl
  1316  000B24  CFDD FFF7          	movff	postdec2,tblptrh
  1317  000B28                     	if	0	;tblptru may be non-zero
  1318  000B28                     	endif
  1319  000B28                     	if	0	;tblptru may be non-zero
  1320  000B28                     	endif
  1321  000B28  0008               	tblrd		*
  1322  000B2A  50F5               	movf	tablat,w,c
  1323  000B2C  0A25               	xorlw	37
  1324  000B2E  A4D8               	btfss	status,2,c
  1325  000B30  EF9C  F005         	goto	u1191
  1326  000B34  EF9E  F005         	goto	u1190
  1327  000B38                     u1191:
  1328  000B38  EFB5  F005         	goto	l1835
  1329  000B3C                     u1190:
  1330  000B3C                     
  1331                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1332  000B3C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1333  000B40  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1334  000B44  2ADE               	incf	postinc2,f,c
  1335  000B46  0E00               	movlw	0
  1336  000B48  22DD               	addwfc	postdec2,f,c
  1337  000B4A                     
  1338                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1339  000B4A  0E00               	movlw	0
  1340  000B4C  6E02               	movwf	(fputc@c+1)^0,c
  1341  000B4E  0E25               	movlw	37
  1342  000B50  6E01               	movwf	fputc@c^0,c
  1343  000B52  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1344  000B56  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1345  000B5A  EC98  F009         	call	_fputc	;wreg free
  1346  000B5E                     l1831:
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1349  000B5E  0E00               	movlw	0
  1350  000B60  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1351  000B62  0E01               	movlw	1
  1352  000B64  6E3C               	movwf	?_vfpfcnvrt^0,c
  1353  000B66  EFDD  F005         	goto	l219
  1354  000B6A                     l1835:
  1355                           
  1356                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1357  000B6A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1358  000B6E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1359  000B72  2ADE               	incf	postinc2,f,c
  1360  000B74  0E00               	movlw	0
  1361  000B76  22DD               	addwfc	postdec2,f,c
  1362  000B78                     
  1363                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1364  000B78  0E00               	movlw	0
  1365  000B7A  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1366  000B7C  0E00               	movlw	0
  1367  000B7E  6E3C               	movwf	?_vfpfcnvrt^0,c
  1368  000B80  EFDD  F005         	goto	l219
  1369  000B84                     l1841:
  1370                           
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1372  000B84  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1373  000B88  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1374  000B8C  CFDE FFF6          	movff	postinc2,tblptrl
  1375  000B90  CFDD FFF7          	movff	postdec2,tblptrh
  1376  000B94                     	if	0	;tblptru may be non-zero
  1377  000B94                     	endif
  1378  000B94                     	if	0	;tblptru may be non-zero
  1379  000B94                     	endif
  1380  000B94  0008               	tblrd		*
  1381  000B96  50F5               	movf	tablat,w,c
  1382  000B98  6E01               	movwf	fputc@c^0,c
  1383  000B9A  6A02               	clrf	(fputc@c+1)^0,c
  1384  000B9C  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1385  000BA0  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1386  000BA4  EC98  F009         	call	_fputc	;wreg free
  1387  000BA8                     
  1388                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1389  000BA8  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1390  000BAC  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1391  000BB0  2ADE               	incf	postinc2,f,c
  1392  000BB2  0E00               	movlw	0
  1393  000BB4  22DD               	addwfc	postdec2,f,c
  1394  000BB6  EFAF  F005         	goto	l1831
  1395  000BBA                     l219:
  1396  000BBA  0012               	return		;funcret
  1397  000BBC                     __end_of_vfpfcnvrt:
  1398                           	opt callstack 0
  1399                           
  1400 ;; *************** function _utoa *****************
  1401 ;; Defined at:
  1402 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1405 ;;		 -> sprintf@f(6), 
  1406 ;;  d               8   29[COMRAM] unsigned long long 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  n               8   49[COMRAM] unsigned long long 
  1409 ;;  i               2   57[COMRAM] int 
  1410 ;;  w               2   47[COMRAM] int 
  1411 ;;  p               2   45[COMRAM] int 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  2   27[COMRAM] int 
  1414 ;; Registers used:
  1415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1421 ;;      Params:        10       0       0       0       0       0       0       0       0
  1422 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1423 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1424 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1425 ;;Total ram usage:       32 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    4
  1428 ;; This function calls:
  1429 ;;		___lodiv
  1430 ;;		___lomod
  1431 ;;		_pad
  1432 ;; This function is called by:
  1433 ;;		_vfpfcnvrt
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text4
  1438  000BBC                     __ptext4:
  1439                           	opt callstack 0
  1440  000BBC                     _utoa:
  1441                           	opt callstack 23
  1442  000BBC                     
  1443                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1444  000BBC  0100               	movlb	0	; () banked
  1445  000BBE  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1446  000BC0  EFE4  F005         	goto	u931
  1447  000BC4  EFE6  F005         	goto	u930
  1448  000BC8                     u931:
  1449  000BC8  EFE7  F005         	goto	l1689
  1450  000BCC                     u930:
  1451  000BCC                     
  1452                           ; BSR set to: 0
  1453                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1454  000BCC  9366               	bcf	_flags& (0+255),1,b
  1455  000BCE                     l1689:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1459  000BCE  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1460  000BD0  EFF4  F005         	goto	u940
  1461  000BD4  5165               	movf	(_prec+1)& (0+255),w,b
  1462  000BD6  E106               	bnz	u941
  1463  000BD8  0564               	decf	_prec& (0+255),w,b
  1464  000BDA  B0D8               	btfsc	status,0,c
  1465  000BDC  EFF2  F005         	goto	u941
  1466  000BE0  EFF4  F005         	goto	u940
  1467  000BE4                     u941:
  1468  000BE4  EFFA  F005         	goto	l184
  1469  000BE8                     u940:
  1470  000BE8                     
  1471                           ; BSR set to: 0
  1472  000BE8  0E00               	movlw	0
  1473  000BEA  6E2F               	movwf	(utoa@p+1)^0,c
  1474  000BEC  0E01               	movlw	1
  1475  000BEE  6E2E               	movwf	utoa@p^0,c
  1476  000BF0  EFFE  F005         	goto	l186
  1477  000BF4                     l184:
  1478                           
  1479                           ; BSR set to: 0
  1480  000BF4  C064  F02E         	movff	_prec,utoa@p
  1481  000BF8  C065  F02F         	movff	_prec+1,utoa@p+1
  1482  000BFC                     l186:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1486  000BFC  C062  F030         	movff	_width,utoa@w
  1487  000C00  C063  F031         	movff	_width+1,utoa@w+1
  1488                           
  1489                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1490  000C04  C01E  F032         	movff	utoa@d,utoa@n
  1491  000C08  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1492  000C0C  C020  F034         	movff	utoa@d+2,utoa@n+2
  1493  000C10  C021  F035         	movff	utoa@d+3,utoa@n+3
  1494  000C14  C022  F036         	movff	utoa@d+4,utoa@n+4
  1495  000C18  C023  F037         	movff	utoa@d+5,utoa@n+5
  1496  000C1C  C024  F038         	movff	utoa@d+6,utoa@n+6
  1497  000C20  C025  F039         	movff	utoa@d+7,utoa@n+7
  1498  000C24                     
  1499                           ; BSR set to: 0
  1500                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1501  000C24  0E00               	movlw	0
  1502  000C26  6E3B               	movwf	(utoa@i+1)^0,c
  1503  000C28  0E1F               	movlw	31
  1504  000C2A  6E3A               	movwf	utoa@i^0,c
  1505  000C2C                     
  1506                           ; BSR set to: 0
  1507                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1508  000C2C  0E00               	movlw	0
  1509  000C2E  6F8F               	movwf	(_dbuf+31)& (0+255),b
  1510                           
  1511                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1512  000C30  EF90  F006         	goto	l1707
  1513  000C34                     l1697:
  1514                           
  1515                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1516  000C34  063A               	decf	utoa@i^0,f,c
  1517  000C36  A0D8               	btfss	status,0,c
  1518  000C38  063B               	decf	(utoa@i+1)^0,f,c
  1519  000C3A                     
  1520                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1521  000C3A  0E70               	movlw	low _dbuf
  1522  000C3C  243A               	addwf	utoa@i^0,w,c
  1523  000C3E  6ED9               	movwf	fsr2l,c
  1524  000C40  0E00               	movlw	high _dbuf
  1525  000C42  203B               	addwfc	(utoa@i+1)^0,w,c
  1526  000C44  6EDA               	movwf	fsr2h,c
  1527  000C46  C032  F001         	movff	utoa@n,___lomod@dividend
  1528  000C4A  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1529  000C4E  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1530  000C52  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1531  000C56  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1532  000C5A  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1533  000C5E  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1534  000C62  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1535  000C66  0E0A               	movlw	10
  1536  000C68  6E09               	movwf	___lomod@divisor^0,c
  1537  000C6A  0E00               	movlw	0
  1538  000C6C  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1539  000C6E  0E00               	movlw	0
  1540  000C70  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1541  000C72  0E00               	movlw	0
  1542  000C74  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1543  000C76  0E00               	movlw	0
  1544  000C78  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1545  000C7A  0E00               	movlw	0
  1546  000C7C  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1547  000C7E  0E00               	movlw	0
  1548  000C80  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1549  000C82  0E00               	movlw	0
  1550  000C84  6E10               	movwf	(___lomod@divisor+7)^0,c
  1551  000C86  EC30  F009         	call	___lomod	;wreg free
  1552  000C8A  C001  F026         	movff	?___lomod,??_utoa
  1553  000C8E  C002  F027         	movff	?___lomod+1,??_utoa+1
  1554  000C92  C003  F028         	movff	?___lomod+2,??_utoa+2
  1555  000C96  C004  F029         	movff	?___lomod+3,??_utoa+3
  1556  000C9A  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1557  000C9E  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1558  000CA2  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1559  000CA6  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1560  000CAA  5026               	movf	??_utoa^0,w,c
  1561  000CAC  0F30               	addlw	48
  1562  000CAE  6EDF               	movwf	indf2,c
  1563  000CB0                     
  1564                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1565  000CB0  062E               	decf	utoa@p^0,f,c
  1566  000CB2  A0D8               	btfss	status,0,c
  1567  000CB4  062F               	decf	(utoa@p+1)^0,f,c
  1568  000CB6                     
  1569                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1570  000CB6  0630               	decf	utoa@w^0,f,c
  1571  000CB8  A0D8               	btfss	status,0,c
  1572  000CBA  0631               	decf	(utoa@w+1)^0,f,c
  1573  000CBC                     
  1574                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1575  000CBC  C032  F001         	movff	utoa@n,___lodiv@dividend
  1576  000CC0  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1577  000CC4  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1578  000CC8  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1579  000CCC  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1580  000CD0  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1581  000CD4  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1582  000CD8  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1583  000CDC  0E0A               	movlw	10
  1584  000CDE  6E09               	movwf	___lodiv@divisor^0,c
  1585  000CE0  0E00               	movlw	0
  1586  000CE2  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1587  000CE4  0E00               	movlw	0
  1588  000CE6  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1589  000CE8  0E00               	movlw	0
  1590  000CEA  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1591  000CEC  0E00               	movlw	0
  1592  000CEE  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1593  000CF0  0E00               	movlw	0
  1594  000CF2  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1595  000CF4  0E00               	movlw	0
  1596  000CF6  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1597  000CF8  0E00               	movlw	0
  1598  000CFA  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1599  000CFC  ECB8  F008         	call	___lodiv	;wreg free
  1600  000D00  C001  F032         	movff	?___lodiv,utoa@n
  1601  000D04  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1602  000D08  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1603  000D0C  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1604  000D10  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1605  000D14  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1606  000D18  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1607  000D1C  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1608  000D20                     l1707:
  1609                           
  1610                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1611  000D20  503A               	movf	utoa@i^0,w,c
  1612  000D22  103B               	iorwf	(utoa@i+1)^0,w,c
  1613  000D24  B4D8               	btfsc	status,2,c
  1614  000D26  EF97  F006         	goto	u951
  1615  000D2A  EF99  F006         	goto	u950
  1616  000D2E                     u951:
  1617  000D2E  EFCA  F006         	goto	l1717
  1618  000D32                     u950:
  1619  000D32  5032               	movf	utoa@n^0,w,c
  1620  000D34  1033               	iorwf	(utoa@n+1)^0,w,c
  1621  000D36  1034               	iorwf	(utoa@n+2)^0,w,c
  1622  000D38  1035               	iorwf	(utoa@n+3)^0,w,c
  1623  000D3A  1036               	iorwf	(utoa@n+4)^0,w,c
  1624  000D3C  1037               	iorwf	(utoa@n+5)^0,w,c
  1625  000D3E  1038               	iorwf	(utoa@n+6)^0,w,c
  1626  000D40  1039               	iorwf	(utoa@n+7)^0,w,c
  1627  000D42  A4D8               	btfss	status,2,c
  1628  000D44  EFA6  F006         	goto	u961
  1629  000D48  EFA8  F006         	goto	u960
  1630  000D4C                     u961:
  1631  000D4C  EF1A  F006         	goto	l1697
  1632  000D50                     u960:
  1633  000D50  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1634  000D52  EFB5  F006         	goto	u970
  1635  000D56  502F               	movf	(utoa@p+1)^0,w,c
  1636  000D58  E106               	bnz	u971
  1637  000D5A  042E               	decf	utoa@p^0,w,c
  1638  000D5C  B0D8               	btfsc	status,0,c
  1639  000D5E  EFB3  F006         	goto	u971
  1640  000D62  EFB5  F006         	goto	u970
  1641  000D66                     u971:
  1642  000D66  EF1A  F006         	goto	l1697
  1643  000D6A                     u970:
  1644  000D6A  BE31               	btfsc	(utoa@w+1)^0,7,c
  1645  000D6C  EFC0  F006         	goto	u981
  1646  000D70  5031               	movf	(utoa@w+1)^0,w,c
  1647  000D72  E108               	bnz	u980
  1648  000D74  0430               	decf	utoa@w^0,w,c
  1649  000D76  A0D8               	btfss	status,0,c
  1650  000D78  EFC0  F006         	goto	u981
  1651  000D7C  EFC2  F006         	goto	u980
  1652  000D80                     u981:
  1653  000D80  EFCA  F006         	goto	l1717
  1654  000D84                     u980:
  1655  000D84  0100               	movlb	0	; () banked
  1656  000D86  B366               	btfsc	_flags& (0+255),1,b
  1657  000D88  EFC8  F006         	goto	u991
  1658  000D8C  EFCA  F006         	goto	u990
  1659  000D90                     u991:
  1660  000D90  EF1A  F006         	goto	l1697
  1661  000D94                     u990:
  1662  000D94                     l1717:
  1663                           
  1664                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1665  000D94  C01C  F011         	movff	utoa@fp,pad@fp
  1666  000D98  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1667  000D9C  0E70               	movlw	low _dbuf
  1668  000D9E  243A               	addwf	utoa@i^0,w,c
  1669  000DA0  6E13               	movwf	pad@buf^0,c
  1670  000DA2  0E00               	movlw	high _dbuf
  1671  000DA4  203B               	addwfc	(utoa@i+1)^0,w,c
  1672  000DA6  6E14               	movwf	(pad@buf+1)^0,c
  1673  000DA8  C030  F015         	movff	utoa@w,pad@p
  1674  000DAC  C031  F016         	movff	utoa@w+1,pad@p+1
  1675  000DB0  ECFD  F009         	call	_pad	;wreg free
  1676  000DB4  C011  F01C         	movff	?_pad,?_utoa
  1677  000DB8  C012  F01D         	movff	?_pad+1,?_utoa+1
  1678  000DBC  0012               	return		;funcret
  1679  000DBE                     __end_of_utoa:
  1680                           	opt callstack 0
  1681                           
  1682 ;; *************** function _pad *****************
  1683 ;; Defined at:
  1684 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1687 ;;		 -> sprintf@f(6), 
  1688 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1689 ;;		 -> dbuf(32), 
  1690 ;;  p               2   20[COMRAM] int 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  w               2   25[COMRAM] int 
  1693 ;;  i               2   23[COMRAM] int 
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  2   16[COMRAM] int 
  1696 ;; Registers used:
  1697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1703 ;;      Params:         6       0       0       0       0       0       0       0       0
  1704 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1705 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1706 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1707 ;;Total ram usage:       11 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    3
  1710 ;; This function calls:
  1711 ;;		_fputc
  1712 ;;		_fputs
  1713 ;;		_strlen
  1714 ;; This function is called by:
  1715 ;;		_utoa
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text5
  1720  0013FA                     __ptext5:
  1721                           	opt callstack 0
  1722  0013FA                     _pad:
  1723                           	opt callstack 23
  1724  0013FA                     
  1725                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1726  0013FA  0100               	movlb	0	; () banked
  1727  0013FC  A166               	btfss	_flags& (0+255),0,b
  1728  0013FE  EF03  F00A         	goto	u741
  1729  001402  EF05  F00A         	goto	u740
  1730  001406                     u741:
  1731  001406  EF0F  F00A         	goto	l1591
  1732  00140A                     u740:
  1733  00140A                     
  1734                           ; BSR set to: 0
  1735                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1736  00140A  C013  F00A         	movff	pad@buf,fputs@s
  1737  00140E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1738  001412  C011  F00C         	movff	pad@fp,fputs@fp
  1739  001416  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1740  00141A  EC75  F00B         	call	_fputs	;wreg free
  1741  00141E                     l1591:
  1742                           
  1743                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1744  00141E  BE16               	btfsc	(pad@p+1)^0,7,c
  1745  001420  EF14  F00A         	goto	u751
  1746  001424  EF16  F00A         	goto	u750
  1747  001428                     u751:
  1748  001428  EF1C  F00A         	goto	l1595
  1749  00142C                     u750:
  1750  00142C  C015  F01A         	movff	pad@p,pad@w
  1751  001430  C016  F01B         	movff	pad@p+1,pad@w+1
  1752  001434  EF20  F00A         	goto	l174
  1753  001438                     l1595:
  1754  001438  0E00               	movlw	0
  1755  00143A  6E1B               	movwf	(pad@w+1)^0,c
  1756  00143C  0E00               	movlw	0
  1757  00143E  6E1A               	movwf	pad@w^0,c
  1758  001440                     l174:
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1761  001440  0E00               	movlw	0
  1762  001442  6E19               	movwf	(pad@i+1)^0,c
  1763  001444  0E00               	movlw	0
  1764  001446  6E18               	movwf	pad@i^0,c
  1765                           
  1766                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1767  001448  EF32  F00A         	goto	l1601
  1768  00144C                     l1597:
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1771  00144C  0E00               	movlw	0
  1772  00144E  6E02               	movwf	(fputc@c+1)^0,c
  1773  001450  0E20               	movlw	32
  1774  001452  6E01               	movwf	fputc@c^0,c
  1775  001454  C011  F003         	movff	pad@fp,fputc@fp
  1776  001458  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1777  00145C  EC98  F009         	call	_fputc	;wreg free
  1778  001460                     
  1779                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1780  001460  4A18               	infsnz	pad@i^0,f,c
  1781  001462  2A19               	incf	(pad@i+1)^0,f,c
  1782  001464                     l1601:
  1783                           
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1785  001464  501A               	movf	pad@w^0,w,c
  1786  001466  5C18               	subwf	pad@i^0,w,c
  1787  001468  5019               	movf	(pad@i+1)^0,w,c
  1788  00146A  0A80               	xorlw	128
  1789  00146C  6E17               	movwf	??_pad^0,c
  1790  00146E  501B               	movf	(pad@w+1)^0,w,c
  1791  001470  0A80               	xorlw	128
  1792  001472  5817               	subwfb	??_pad^0,w,c
  1793  001474  A0D8               	btfss	status,0,c
  1794  001476  EF3F  F00A         	goto	u761
  1795  00147A  EF41  F00A         	goto	u760
  1796  00147E                     u761:
  1797  00147E  EF26  F00A         	goto	l1597
  1798  001482                     u760:
  1799  001482                     
  1800                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1801  001482  0100               	movlb	0	; () banked
  1802  001484  B166               	btfsc	_flags& (0+255),0,b
  1803  001486  EF47  F00A         	goto	u771
  1804  00148A  EF49  F00A         	goto	u770
  1805  00148E                     u771:
  1806  00148E  EF53  F00A         	goto	l1605
  1807  001492                     u770:
  1808  001492                     
  1809                           ; BSR set to: 0
  1810                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1811  001492  C013  F00A         	movff	pad@buf,fputs@s
  1812  001496  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1813  00149A  C011  F00C         	movff	pad@fp,fputs@fp
  1814  00149E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1815  0014A2  EC75  F00B         	call	_fputs	;wreg free
  1816  0014A6                     l1605:
  1817                           
  1818                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1819  0014A6  C013  F001         	movff	pad@buf,strlen@s
  1820  0014AA  C014  F002         	movff	pad@buf+1,strlen@s+1
  1821  0014AE  ECD0  F00B         	call	_strlen	;wreg free
  1822  0014B2  501A               	movf	pad@w^0,w,c
  1823  0014B4  2401               	addwf	?_strlen^0,w,c
  1824  0014B6  6E11               	movwf	?_pad^0,c
  1825  0014B8  501B               	movf	(pad@w+1)^0,w,c
  1826  0014BA  2002               	addwfc	(?_strlen+1)^0,w,c
  1827  0014BC  6E12               	movwf	(?_pad+1)^0,c
  1828  0014BE  0012               	return		;funcret
  1829  0014C0                     __end_of_pad:
  1830                           	opt callstack 0
  1831                           
  1832 ;; *************** function _strlen *****************
  1833 ;; Defined at:
  1834 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1837 ;;		 -> dbuf(32), 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1840 ;;		 -> dbuf(32), 
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  2    0[COMRAM] unsigned int 
  1843 ;; Registers used:
  1844 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1850 ;;      Params:         2       0       0       0       0       0       0       0       0
  1851 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1853 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1854 ;;Total ram usage:        4 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_pad
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text6
  1864  0017A0                     __ptext6:
  1865                           	opt callstack 0
  1866  0017A0                     _strlen:
  1867                           	opt callstack 25
  1868  0017A0  C001  F003         	movff	strlen@s,strlen@a
  1869  0017A4  C002  F004         	movff	strlen@s+1,strlen@a+1
  1870  0017A8  EFD8  F00B         	goto	l1581
  1871  0017AC                     l1579:
  1872  0017AC  4A01               	infsnz	strlen@s^0,f,c
  1873  0017AE  2A02               	incf	(strlen@s+1)^0,f,c
  1874  0017B0                     l1581:
  1875  0017B0  C001  FFD9         	movff	strlen@s,fsr2l
  1876  0017B4  C002  FFDA         	movff	strlen@s+1,fsr2h
  1877  0017B8  50DF               	movf	indf2,w,c
  1878  0017BA  A4D8               	btfss	status,2,c
  1879  0017BC  EFE2  F00B         	goto	u731
  1880  0017C0  EFE4  F00B         	goto	u730
  1881  0017C4                     u731:
  1882  0017C4  EFD6  F00B         	goto	l1579
  1883  0017C8                     u730:
  1884  0017C8  5003               	movf	strlen@a^0,w,c
  1885  0017CA  5C01               	subwf	strlen@s^0,w,c
  1886  0017CC  6E01               	movwf	?_strlen^0,c
  1887  0017CE  5004               	movf	(strlen@a+1)^0,w,c
  1888  0017D0  5802               	subwfb	(strlen@s+1)^0,w,c
  1889  0017D2  6E02               	movwf	(?_strlen+1)^0,c
  1890  0017D4  0012               	return		;funcret
  1891  0017D6                     __end_of_strlen:
  1892                           	opt callstack 0
  1893                           
  1894 ;; *************** function _fputs *****************
  1895 ;; Defined at:
  1896 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1899 ;;		 -> dbuf(32), 
  1900 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1901 ;;		 -> sprintf@f(6), 
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  i               2   14[COMRAM] int 
  1904 ;;  c               1   13[COMRAM] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  2    9[COMRAM] int 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1914 ;;      Params:         4       0       0       0       0       0       0       0       0
  1915 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1917 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1918 ;;Total ram usage:        7 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    2
  1921 ;; This function calls:
  1922 ;;		_fputc
  1923 ;; This function is called by:
  1924 ;;		_pad
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text7
  1929  0016EA                     __ptext7:
  1930                           	opt callstack 0
  1931  0016EA                     _fputs:
  1932                           	opt callstack 23
  1933  0016EA  0E00               	movlw	0
  1934  0016EC  6E10               	movwf	(fputs@i+1)^0,c
  1935  0016EE  0E00               	movlw	0
  1936  0016F0  6E0F               	movwf	fputs@i^0,c
  1937  0016F2  EF86  F00B         	goto	l1575
  1938  0016F6                     l1571:
  1939  0016F6  C00E  F001         	movff	fputs@c,fputc@c
  1940  0016FA  6A02               	clrf	(fputc@c+1)^0,c
  1941  0016FC  C00C  F003         	movff	fputs@fp,fputc@fp
  1942  001700  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1943  001704  EC98  F009         	call	_fputc	;wreg free
  1944  001708  4A0F               	infsnz	fputs@i^0,f,c
  1945  00170A  2A10               	incf	(fputs@i+1)^0,f,c
  1946  00170C                     l1575:
  1947  00170C  500F               	movf	fputs@i^0,w,c
  1948  00170E  240A               	addwf	fputs@s^0,w,c
  1949  001710  6ED9               	movwf	fsr2l,c
  1950  001712  5010               	movf	(fputs@i+1)^0,w,c
  1951  001714  200B               	addwfc	(fputs@s+1)^0,w,c
  1952  001716  6EDA               	movwf	fsr2h,c
  1953  001718  50DF               	movf	indf2,w,c
  1954  00171A  6E0E               	movwf	fputs@c^0,c
  1955  00171C  500E               	movf	fputs@c^0,w,c
  1956  00171E  A4D8               	btfss	status,2,c
  1957  001720  EF94  F00B         	goto	u721
  1958  001724  EF96  F00B         	goto	u720
  1959  001728                     u721:
  1960  001728  EF7B  F00B         	goto	l1571
  1961  00172C                     u720:
  1962  00172C  0012               	return		;funcret
  1963  00172E                     __end_of_fputs:
  1964                           	opt callstack 0
  1965                           
  1966 ;; *************** function _fputc *****************
  1967 ;; Defined at:
  1968 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  c               2    0[COMRAM] int 
  1971 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1972 ;;		 -> sprintf@f(6), 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  2    0[COMRAM] int 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1984 ;;      Params:         4       0       0       0       0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1986 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1987 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1988 ;;Total ram usage:        9 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    1
  1991 ;; This function calls:
  1992 ;;		_putch
  1993 ;; This function is called by:
  1994 ;;		_pad
  1995 ;;		_vfpfcnvrt
  1996 ;;		_fputs
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text8
  2001  001330                     __ptext8:
  2002                           	opt callstack 0
  2003  001330                     _fputc:
  2004                           	opt callstack 23
  2005  001330  5003               	movf	fputc@fp^0,w,c
  2006  001332  1004               	iorwf	(fputc@fp+1)^0,w,c
  2007  001334  B4D8               	btfsc	status,2,c
  2008  001336  EF9F  F009         	goto	u681
  2009  00133A  EFA1  F009         	goto	u680
  2010  00133E                     u681:
  2011  00133E  EFAA  F009         	goto	l1559
  2012  001342                     u680:
  2013  001342  5003               	movf	fputc@fp^0,w,c
  2014  001344  1004               	iorwf	(fputc@fp+1)^0,w,c
  2015  001346  A4D8               	btfss	status,2,c
  2016  001348  EFA8  F009         	goto	u691
  2017  00134C  EFAA  F009         	goto	u690
  2018  001350                     u691:
  2019  001350  EFAF  F009         	goto	l1561
  2020  001354                     u690:
  2021  001354                     l1559:
  2022  001354  5001               	movf	fputc@c^0,w,c
  2023  001356  EC49  F00C         	call	_putch
  2024  00135A  EFFC  F009         	goto	l957
  2025  00135E                     l1561:
  2026  00135E  EE20 F004          	lfsr	2,4
  2027  001362  5003               	movf	fputc@fp^0,w,c
  2028  001364  26D9               	addwf	fsr2l,f,c
  2029  001366  5004               	movf	(fputc@fp+1)^0,w,c
  2030  001368  22DA               	addwfc	fsr2h,f,c
  2031  00136A  50DE               	movf	postinc2,w,c
  2032  00136C  10DE               	iorwf	postinc2,w,c
  2033  00136E  B4D8               	btfsc	status,2,c
  2034  001370  EFBC  F009         	goto	u701
  2035  001374  EFBE  F009         	goto	u700
  2036  001378                     u701:
  2037  001378  EFD9  F009         	goto	l1565
  2038  00137C                     u700:
  2039  00137C  EE20 F004          	lfsr	2,4
  2040  001380  5003               	movf	fputc@fp^0,w,c
  2041  001382  26D9               	addwf	fsr2l,f,c
  2042  001384  5004               	movf	(fputc@fp+1)^0,w,c
  2043  001386  22DA               	addwfc	fsr2h,f,c
  2044  001388  EE10 F002          	lfsr	1,2
  2045  00138C  5003               	movf	fputc@fp^0,w,c
  2046  00138E  26E1               	addwf	fsr1l,f,c
  2047  001390  5004               	movf	(fputc@fp+1)^0,w,c
  2048  001392  22E2               	addwfc	fsr1h,f,c
  2049  001394  50DE               	movf	postinc2,w,c
  2050  001396  5CE6               	subwf	postinc1,w,c
  2051  001398  50E6               	movf	postinc1,w,c
  2052  00139A  0A80               	xorlw	128
  2053  00139C  6E09               	movwf	(??_fputc+4)^0,c
  2054  00139E  50DE               	movf	postinc2,w,c
  2055  0013A0  0A80               	xorlw	128
  2056  0013A2  5809               	subwfb	(??_fputc+4)^0,w,c
  2057  0013A4  B0D8               	btfsc	status,0,c
  2058  0013A6  EFD7  F009         	goto	u711
  2059  0013AA  EFD9  F009         	goto	u710
  2060  0013AE                     u711:
  2061  0013AE  EFFC  F009         	goto	l957
  2062  0013B2                     u710:
  2063  0013B2                     l1565:
  2064  0013B2  EE20 F002          	lfsr	2,2
  2065  0013B6  5003               	movf	fputc@fp^0,w,c
  2066  0013B8  26D9               	addwf	fsr2l,f,c
  2067  0013BA  5004               	movf	(fputc@fp+1)^0,w,c
  2068  0013BC  22DA               	addwfc	fsr2h,f,c
  2069  0013BE  CFDE F005          	movff	postinc2,??_fputc
  2070  0013C2  CFDD F006          	movff	postdec2,??_fputc+1
  2071  0013C6  C003  FFD9         	movff	fputc@fp,fsr2l
  2072  0013CA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2073  0013CE  CFDE F007          	movff	postinc2,??_fputc+2
  2074  0013D2  CFDD F008          	movff	postdec2,??_fputc+3
  2075  0013D6  5005               	movf	??_fputc^0,w,c
  2076  0013D8  2407               	addwf	(??_fputc+2)^0,w,c
  2077  0013DA  6ED9               	movwf	fsr2l,c
  2078  0013DC  5006               	movf	(??_fputc+1)^0,w,c
  2079  0013DE  2008               	addwfc	(??_fputc+3)^0,w,c
  2080  0013E0  6EDA               	movwf	fsr2h,c
  2081  0013E2  C001  FFDF         	movff	fputc@c,indf2
  2082  0013E6  EE20 F002          	lfsr	2,2
  2083  0013EA  5003               	movf	fputc@fp^0,w,c
  2084  0013EC  26D9               	addwf	fsr2l,f,c
  2085  0013EE  5004               	movf	(fputc@fp+1)^0,w,c
  2086  0013F0  22DA               	addwfc	fsr2h,f,c
  2087  0013F2  2ADE               	incf	postinc2,f,c
  2088  0013F4  0E00               	movlw	0
  2089  0013F6  22DD               	addwfc	postdec2,f,c
  2090  0013F8                     l957:
  2091  0013F8  0012               	return		;funcret
  2092  0013FA                     __end_of_fputc:
  2093                           	opt callstack 0
  2094                           
  2095 ;; *************** function _putch *****************
  2096 ;; Defined at:
  2097 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  c               1    wreg     unsigned char 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  c               1    0[COMRAM] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2111 ;;      Params:         0       0       0       0       0       0       0       0       0
  2112 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2114 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2115 ;;Total ram usage:        0 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_fputc
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text9
  2125  001892                     __ptext9:
  2126                           	opt callstack 0
  2127  001892                     _putch:
  2128                           	opt callstack 23
  2129  001892  0012               	return		;funcret
  2130  001894                     __end_of_putch:
  2131                           	opt callstack 0
  2132                           
  2133 ;; *************** function ___lomod *****************
  2134 ;; Defined at:
  2135 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lomod.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  dividend        8    0[COMRAM] unsigned long long 
  2138 ;;  divisor         8    8[COMRAM] unsigned long long 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  counter         1   16[COMRAM] unsigned char 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  8    0[COMRAM] unsigned long long 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2150 ;;      Params:        16       0       0       0       0       0       0       0       0
  2151 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2153 ;;      Totals:        17       0       0       0       0       0       0       0       0
  2154 ;;Total ram usage:       17 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_utoa
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text10
  2164  001260                     __ptext10:
  2165                           	opt callstack 0
  2166  001260                     ___lomod:
  2167                           	opt callstack 26
  2168  001260  5009               	movf	___lomod@divisor^0,w,c
  2169  001262  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  2170  001264  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  2171  001266  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  2172  001268  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  2173  00126A  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  2174  00126C  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  2175  00126E  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  2176  001270  B4D8               	btfsc	status,2,c
  2177  001272  EF3D  F009         	goto	u841
  2178  001276  EF3F  F009         	goto	u840
  2179  00127A                     u841:
  2180  00127A  EF87  F009         	goto	l677
  2181  00127E                     u840:
  2182  00127E  0E01               	movlw	1
  2183  001280  6E11               	movwf	___lomod@counter^0,c
  2184  001282  EF4D  F009         	goto	l1647
  2185  001286                     l1645:
  2186  001286  90D8               	bcf	status,0,c
  2187  001288  3609               	rlcf	___lomod@divisor^0,f,c
  2188  00128A  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  2189  00128C  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  2190  00128E  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  2191  001290  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  2192  001292  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  2193  001294  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  2194  001296  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  2195  001298  2A11               	incf	___lomod@counter^0,f,c
  2196  00129A                     l1647:
  2197  00129A  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  2198  00129C  EF52  F009         	goto	u851
  2199  0012A0  EF54  F009         	goto	u850
  2200  0012A4                     u851:
  2201  0012A4  EF43  F009         	goto	l1645
  2202  0012A8                     u850:
  2203  0012A8                     l1649:
  2204  0012A8  5009               	movf	___lomod@divisor^0,w,c
  2205  0012AA  5C01               	subwf	___lomod@dividend^0,w,c
  2206  0012AC  500A               	movf	(___lomod@divisor+1)^0,w,c
  2207  0012AE  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  2208  0012B0  500B               	movf	(___lomod@divisor+2)^0,w,c
  2209  0012B2  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  2210  0012B4  500C               	movf	(___lomod@divisor+3)^0,w,c
  2211  0012B6  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  2212  0012B8  500D               	movf	(___lomod@divisor+4)^0,w,c
  2213  0012BA  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  2214  0012BC  500E               	movf	(___lomod@divisor+5)^0,w,c
  2215  0012BE  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  2216  0012C0  500F               	movf	(___lomod@divisor+6)^0,w,c
  2217  0012C2  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  2218  0012C4  5010               	movf	(___lomod@divisor+7)^0,w,c
  2219  0012C6  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  2220  0012C8  A0D8               	btfss	status,0,c
  2221  0012CA  EF69  F009         	goto	u861
  2222  0012CE  EF6B  F009         	goto	u860
  2223  0012D2                     u861:
  2224  0012D2  EF7B  F009         	goto	l1653
  2225  0012D6                     u860:
  2226  0012D6  5009               	movf	___lomod@divisor^0,w,c
  2227  0012D8  5E01               	subwf	___lomod@dividend^0,f,c
  2228  0012DA  500A               	movf	(___lomod@divisor+1)^0,w,c
  2229  0012DC  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  2230  0012DE  500B               	movf	(___lomod@divisor+2)^0,w,c
  2231  0012E0  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  2232  0012E2  500C               	movf	(___lomod@divisor+3)^0,w,c
  2233  0012E4  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  2234  0012E6  500D               	movf	(___lomod@divisor+4)^0,w,c
  2235  0012E8  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  2236  0012EA  500E               	movf	(___lomod@divisor+5)^0,w,c
  2237  0012EC  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  2238  0012EE  500F               	movf	(___lomod@divisor+6)^0,w,c
  2239  0012F0  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  2240  0012F2  5010               	movf	(___lomod@divisor+7)^0,w,c
  2241  0012F4  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  2242  0012F6                     l1653:
  2243  0012F6  90D8               	bcf	status,0,c
  2244  0012F8  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  2245  0012FA  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  2246  0012FC  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  2247  0012FE  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  2248  001300  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  2249  001302  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  2250  001304  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  2251  001306  3209               	rrcf	___lomod@divisor^0,f,c
  2252  001308  2E11               	decfsz	___lomod@counter^0,f,c
  2253  00130A  EF54  F009         	goto	l1649
  2254  00130E                     l677:
  2255  00130E  C001  F001         	movff	___lomod@dividend,?___lomod
  2256  001312  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2257  001316  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2258  00131A  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2259  00131E  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2260  001322  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2261  001326  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2262  00132A  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2263  00132E  0012               	return		;funcret
  2264  001330                     __end_of___lomod:
  2265                           	opt callstack 0
  2266                           
  2267 ;; *************** function ___lodiv *****************
  2268 ;; Defined at:
  2269 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lodiv.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  dividend        8    0[COMRAM] unsigned long long 
  2272 ;;  divisor         8    8[COMRAM] unsigned long long 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  quotient        8   16[COMRAM] unsigned long long 
  2275 ;;  counter         1   24[COMRAM] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  8    0[COMRAM] unsigned long long 
  2278 ;; Registers used:
  2279 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2285 ;;      Params:        16       0       0       0       0       0       0       0       0
  2286 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2288 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2289 ;;Total ram usage:       25 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_utoa
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text11
  2299  001170                     __ptext11:
  2300                           	opt callstack 0
  2301  001170                     ___lodiv:
  2302                           	opt callstack 26
  2303  001170  EE20  F011         	lfsr	2,___lodiv@quotient
  2304  001174  0E07               	movlw	7
  2305  001176                     u801:
  2306  001176  6ADE               	clrf	postinc2,c
  2307  001178  06E8               	decf	wreg,f,c
  2308  00117A  E2FD               	bc	u801
  2309  00117C  5009               	movf	___lodiv@divisor^0,w,c
  2310  00117E  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2311  001180  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2312  001182  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2313  001184  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2314  001186  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2315  001188  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2316  00118A  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2317  00118C  B4D8               	btfsc	status,2,c
  2318  00118E  EFCB  F008         	goto	u811
  2319  001192  EFCD  F008         	goto	u810
  2320  001196                     u811:
  2321  001196  EF1F  F009         	goto	l667
  2322  00119A                     u810:
  2323  00119A  0E01               	movlw	1
  2324  00119C  6E19               	movwf	___lodiv@counter^0,c
  2325  00119E  EFDB  F008         	goto	l1627
  2326  0011A2                     l1625:
  2327  0011A2  90D8               	bcf	status,0,c
  2328  0011A4  3609               	rlcf	___lodiv@divisor^0,f,c
  2329  0011A6  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2330  0011A8  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2331  0011AA  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2332  0011AC  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2333  0011AE  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2334  0011B0  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2335  0011B2  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2336  0011B4  2A19               	incf	___lodiv@counter^0,f,c
  2337  0011B6                     l1627:
  2338  0011B6  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2339  0011B8  EFE0  F008         	goto	u821
  2340  0011BC  EFE2  F008         	goto	u820
  2341  0011C0                     u821:
  2342  0011C0  EFD1  F008         	goto	l1625
  2343  0011C4                     u820:
  2344  0011C4                     l1629:
  2345  0011C4  90D8               	bcf	status,0,c
  2346  0011C6  3611               	rlcf	___lodiv@quotient^0,f,c
  2347  0011C8  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2348  0011CA  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2349  0011CC  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2350  0011CE  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2351  0011D0  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2352  0011D2  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2353  0011D4  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2354  0011D6  5009               	movf	___lodiv@divisor^0,w,c
  2355  0011D8  5C01               	subwf	___lodiv@dividend^0,w,c
  2356  0011DA  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2357  0011DC  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2358  0011DE  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2359  0011E0  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2360  0011E2  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2361  0011E4  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2362  0011E6  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2363  0011E8  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2364  0011EA  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2365  0011EC  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2366  0011EE  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2367  0011F0  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2368  0011F2  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2369  0011F4  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2370  0011F6  A0D8               	btfss	status,0,c
  2371  0011F8  EF00  F009         	goto	u831
  2372  0011FC  EF02  F009         	goto	u830
  2373  001200                     u831:
  2374  001200  EF13  F009         	goto	l1637
  2375  001204                     u830:
  2376  001204  5009               	movf	___lodiv@divisor^0,w,c
  2377  001206  5E01               	subwf	___lodiv@dividend^0,f,c
  2378  001208  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2379  00120A  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2380  00120C  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2381  00120E  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2382  001210  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2383  001212  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2384  001214  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2385  001216  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2386  001218  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2387  00121A  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2388  00121C  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2389  00121E  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2390  001220  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2391  001222  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2392  001224  8011               	bsf	___lodiv@quotient^0,0,c
  2393  001226                     l1637:
  2394  001226  90D8               	bcf	status,0,c
  2395  001228  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2396  00122A  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2397  00122C  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2398  00122E  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2399  001230  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2400  001232  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2401  001234  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2402  001236  3209               	rrcf	___lodiv@divisor^0,f,c
  2403  001238  2E19               	decfsz	___lodiv@counter^0,f,c
  2404  00123A  EFE2  F008         	goto	l1629
  2405  00123E                     l667:
  2406  00123E  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2407  001242  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2408  001246  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2409  00124A  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2410  00124E  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2411  001252  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2412  001256  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2413  00125A  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2414  00125E  0012               	return		;funcret
  2415  001260                     __end_of___lodiv:
  2416                           	opt callstack 0
  2417                           
  2418 ;; *************** function _atoi *****************
  2419 ;; Defined at:
  2420 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2423 ;;		 -> STR_4(6), STR_3(6), STR_2(6), 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  n               2   20[COMRAM] int 
  2426 ;;  neg             2   13[COMRAM] int 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  2    7[COMRAM] int 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2436 ;;      Params:         2       0       0       0       0       0       0       0       0
  2437 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2438 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2439 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2440 ;;Total ram usage:       15 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    1
  2443 ;; This function calls:
  2444 ;;		___wmul
  2445 ;;		_isdigit
  2446 ;;		_isspace
  2447 ;; This function is called by:
  2448 ;;		_vfpfcnvrt
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text12
  2453  000DBE                     __ptext12:
  2454                           	opt callstack 0
  2455  000DBE                     _atoi:
  2456                           	opt callstack 26
  2457  000DBE  0E00               	movlw	0
  2458  000DC0  6E16               	movwf	(atoi@n+1)^0,c
  2459  000DC2  0E00               	movlw	0
  2460  000DC4  6E15               	movwf	atoi@n^0,c
  2461  000DC6  0E00               	movlw	0
  2462  000DC8  6E0F               	movwf	(atoi@neg+1)^0,c
  2463  000DCA  0E00               	movlw	0
  2464  000DCC  6E0E               	movwf	atoi@neg^0,c
  2465  000DCE  EFEB  F006         	goto	l1725
  2466  000DD2                     l1723:
  2467  000DD2  4A08               	infsnz	atoi@s^0,f,c
  2468  000DD4  2A09               	incf	(atoi@s+1)^0,f,c
  2469  000DD6                     l1725:
  2470  000DD6  0E01               	movlw	1
  2471  000DD8  6E14               	movwf	_atoi$1108^0,c
  2472  000DDA  C008  FFF6         	movff	atoi@s,tblptrl
  2473  000DDE  C009  FFF7         	movff	atoi@s+1,tblptrh
  2474  000DE2                     	if	0	;tblptru may be non-zero
  2475  000DE2                     	endif
  2476  000DE2                     	if	0	;tblptru may be non-zero
  2477  000DE2                     	endif
  2478  000DE2  0008               	tblrd		*
  2479  000DE4  50F5               	movf	tablat,w,c
  2480  000DE6  0A20               	xorlw	32
  2481  000DE8  B4D8               	btfsc	status,2,c
  2482  000DEA  EFF9  F006         	goto	u1001
  2483  000DEE  EFFB  F006         	goto	u1000
  2484  000DF2                     u1001:
  2485  000DF2  EF18  F007         	goto	l1733
  2486  000DF6                     u1000:
  2487  000DF6  0EF7               	movlw	247
  2488  000DF8  6E0A               	movwf	??_atoi^0,c
  2489  000DFA  0EFF               	movlw	255
  2490  000DFC  6E0B               	movwf	(??_atoi+1)^0,c
  2491  000DFE  C008  FFF6         	movff	atoi@s,tblptrl
  2492  000E02  C009  FFF7         	movff	atoi@s+1,tblptrh
  2493  000E06                     	if	0	;tblptru may be non-zero
  2494  000E06                     	endif
  2495  000E06                     	if	0	;tblptru may be non-zero
  2496  000E06                     	endif
  2497  000E06  0008               	tblrd		*
  2498  000E08  50F5               	movf	tablat,w,c
  2499  000E0A  6E0C               	movwf	(??_atoi+2)^0,c
  2500  000E0C  6A0D               	clrf	(??_atoi+3)^0,c
  2501  000E0E  500A               	movf	??_atoi^0,w,c
  2502  000E10  260C               	addwf	(??_atoi+2)^0,f,c
  2503  000E12  500B               	movf	(??_atoi+1)^0,w,c
  2504  000E14  220D               	addwfc	(??_atoi+3)^0,f,c
  2505  000E16  500D               	movf	(??_atoi+3)^0,w,c
  2506  000E18  E109               	bnz	u1010
  2507  000E1A  0E05               	movlw	5
  2508  000E1C  5C0C               	subwf	(??_atoi+2)^0,w,c
  2509  000E1E  A0D8               	btfss	status,0,c
  2510  000E20  EF14  F007         	goto	u1011
  2511  000E24  EF16  F007         	goto	u1010
  2512  000E28                     u1011:
  2513  000E28  EF18  F007         	goto	l1733
  2514  000E2C                     u1010:
  2515  000E2C  0E00               	movlw	0
  2516  000E2E  6E14               	movwf	_atoi$1108^0,c
  2517  000E30                     l1733:
  2518  000E30  C014  F010         	movff	_atoi$1108,_atoi$1107
  2519  000E34  6A11               	clrf	(_atoi$1107+1)^0,c
  2520  000E36  5010               	movf	_atoi$1107^0,w,c
  2521  000E38  1011               	iorwf	(_atoi$1107+1)^0,w,c
  2522  000E3A  A4D8               	btfss	status,2,c
  2523  000E3C  EF22  F007         	goto	u1021
  2524  000E40  EF24  F007         	goto	u1020
  2525  000E44                     u1021:
  2526  000E44  EFE9  F006         	goto	l1723
  2527  000E48                     u1020:
  2528  000E48  EF2E  F007         	goto	l1743
  2529  000E4C                     l1739:
  2530  000E4C  0E00               	movlw	0
  2531  000E4E  6E0F               	movwf	(atoi@neg+1)^0,c
  2532  000E50  0E01               	movlw	1
  2533  000E52  6E0E               	movwf	atoi@neg^0,c
  2534  000E54                     l1741:
  2535  000E54  4A08               	infsnz	atoi@s^0,f,c
  2536  000E56  2A09               	incf	(atoi@s+1)^0,f,c
  2537  000E58  EF63  F007         	goto	l1749
  2538  000E5C                     l1743:
  2539  000E5C  C008  FFF6         	movff	atoi@s,tblptrl
  2540  000E60  C009  FFF7         	movff	atoi@s+1,tblptrh
  2541  000E64                     	if	0	;tblptru may be non-zero
  2542  000E64                     	endif
  2543  000E64                     	if	0	;tblptru may be non-zero
  2544  000E64                     	endif
  2545  000E64  0008               	tblrd		*
  2546  000E66  50F5               	movf	tablat,w,c
  2547  000E68  6E0A               	movwf	??_atoi^0,c
  2548  000E6A  6A0B               	clrf	(??_atoi+1)^0,c
  2549                           
  2550                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2551                           ; Switch size 1, requested type "simple"
  2552                           ; Number of cases is 1, Range of values is 0 to 0
  2553                           ; switch strategies available:
  2554                           ; Name         Instructions Cycles
  2555                           ; simple_byte            4     3 (average)
  2556                           ;	Chosen strategy is simple_byte
  2557  000E6C  500B               	movf	(??_atoi+1)^0,w,c
  2558  000E6E  0A00               	xorlw	0	; case 0
  2559  000E70  B4D8               	btfsc	status,2,c
  2560  000E72  EF3D  F007         	goto	l2127
  2561  000E76  EF63  F007         	goto	l1749
  2562  000E7A                     l2127:
  2563                           
  2564                           ; Switch size 1, requested type "simple"
  2565                           ; Number of cases is 2, Range of values is 43 to 45
  2566                           ; switch strategies available:
  2567                           ; Name         Instructions Cycles
  2568                           ; simple_byte            7     4 (average)
  2569                           ;	Chosen strategy is simple_byte
  2570  000E7A  500A               	movf	??_atoi^0,w,c
  2571  000E7C  0A2B               	xorlw	43	; case 43
  2572  000E7E  B4D8               	btfsc	status,2,c
  2573  000E80  EF2A  F007         	goto	l1741
  2574  000E84  0A06               	xorlw	6	; case 45
  2575  000E86  B4D8               	btfsc	status,2,c
  2576  000E88  EF26  F007         	goto	l1739
  2577  000E8C  EF63  F007         	goto	l1749
  2578  000E90                     l1745:
  2579  000E90  C015  F001         	movff	atoi@n,___wmul@multiplier
  2580  000E94  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2581  000E98  0E00               	movlw	0
  2582  000E9A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2583  000E9C  0E0A               	movlw	10
  2584  000E9E  6E03               	movwf	___wmul@multiplicand^0,c
  2585  000EA0  EC01  F00C         	call	___wmul	;wreg free
  2586  000EA4  C008  FFF6         	movff	atoi@s,tblptrl
  2587  000EA8  C009  FFF7         	movff	atoi@s+1,tblptrh
  2588  000EAC                     	if	0	;tblptru may be non-zero
  2589  000EAC                     	endif
  2590  000EAC                     	if	0	;tblptru may be non-zero
  2591  000EAC                     	endif
  2592  000EAC  0008               	tblrd		*
  2593  000EAE  50F5               	movf	tablat,w,c
  2594  000EB0  5E01               	subwf	?___wmul^0,f,c
  2595  000EB2  0E00               	movlw	0
  2596  000EB4  5A02               	subwfb	(?___wmul+1)^0,f,c
  2597  000EB6  0E30               	movlw	48
  2598  000EB8  2401               	addwf	?___wmul^0,w,c
  2599  000EBA  6E15               	movwf	atoi@n^0,c
  2600  000EBC  0E00               	movlw	0
  2601  000EBE  2002               	addwfc	(?___wmul+1)^0,w,c
  2602  000EC0  6E16               	movwf	(atoi@n+1)^0,c
  2603  000EC2  EF2A  F007         	goto	l1741
  2604  000EC6                     l1749:
  2605  000EC6  0ED0               	movlw	208
  2606  000EC8  6E0A               	movwf	??_atoi^0,c
  2607  000ECA  0EFF               	movlw	255
  2608  000ECC  6E0B               	movwf	(??_atoi+1)^0,c
  2609  000ECE  C008  FFF6         	movff	atoi@s,tblptrl
  2610  000ED2  C009  FFF7         	movff	atoi@s+1,tblptrh
  2611  000ED6                     	if	0	;tblptru may be non-zero
  2612  000ED6                     	endif
  2613  000ED6                     	if	0	;tblptru may be non-zero
  2614  000ED6                     	endif
  2615  000ED6  0008               	tblrd		*
  2616  000ED8  50F5               	movf	tablat,w,c
  2617  000EDA  6E0C               	movwf	(??_atoi+2)^0,c
  2618  000EDC  6A0D               	clrf	(??_atoi+3)^0,c
  2619  000EDE  500A               	movf	??_atoi^0,w,c
  2620  000EE0  260C               	addwf	(??_atoi+2)^0,f,c
  2621  000EE2  500B               	movf	(??_atoi+1)^0,w,c
  2622  000EE4  220D               	addwfc	(??_atoi+3)^0,f,c
  2623  000EE6  500D               	movf	(??_atoi+3)^0,w,c
  2624  000EE8  E10A               	bnz	u1030
  2625  000EEA  0E0A               	movlw	10
  2626  000EEC  5C0C               	subwf	(??_atoi+2)^0,w,c
  2627  000EEE  A0D8               	btfss	status,0,c
  2628  000EF0  EF7C  F007         	goto	u1031
  2629  000EF4  EF7F  F007         	goto	u1030
  2630  000EF8                     u1031:
  2631  000EF8  0E01               	movlw	1
  2632  000EFA  EF80  F007         	goto	u1040
  2633  000EFE                     u1030:
  2634  000EFE  0E00               	movlw	0
  2635  000F00                     u1040:
  2636  000F00  6E12               	movwf	_atoi$1109^0,c
  2637  000F02  6A13               	clrf	(_atoi$1109+1)^0,c
  2638  000F04  5012               	movf	_atoi$1109^0,w,c
  2639  000F06  1013               	iorwf	(_atoi$1109+1)^0,w,c
  2640  000F08  A4D8               	btfss	status,2,c
  2641  000F0A  EF89  F007         	goto	u1051
  2642  000F0E  EF8B  F007         	goto	u1050
  2643  000F12                     u1051:
  2644  000F12  EF48  F007         	goto	l1745
  2645  000F16                     u1050:
  2646  000F16  500E               	movf	atoi@neg^0,w,c
  2647  000F18  100F               	iorwf	(atoi@neg+1)^0,w,c
  2648  000F1A  A4D8               	btfss	status,2,c
  2649  000F1C  EF92  F007         	goto	u1061
  2650  000F20  EF94  F007         	goto	u1060
  2651  000F24                     u1061:
  2652  000F24  EFA2  F007         	goto	l928
  2653  000F28                     u1060:
  2654  000F28  C015  F00A         	movff	atoi@n,??_atoi
  2655  000F2C  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2656  000F30  1E0A               	comf	??_atoi^0,f,c
  2657  000F32  1E0B               	comf	(??_atoi+1)^0,f,c
  2658  000F34  4A0A               	infsnz	??_atoi^0,f,c
  2659  000F36  2A0B               	incf	(??_atoi+1)^0,f,c
  2660  000F38  C00A  F008         	movff	??_atoi,?_atoi
  2661  000F3C  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2662  000F40  EFA6  F007         	goto	l931
  2663  000F44                     l928:
  2664  000F44  C015  F008         	movff	atoi@n,?_atoi
  2665  000F48  C016  F009         	movff	atoi@n+1,?_atoi+1
  2666  000F4C                     l931:
  2667  000F4C  0012               	return		;funcret
  2668  000F4E                     __end_of_atoi:
  2669                           	opt callstack 0
  2670                           
  2671 ;; *************** function _isspace *****************
  2672 ;; Defined at:
  2673 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  c               2    0[COMRAM] int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  2    0[COMRAM] int 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2687 ;;      Params:         2       0       0       0       0       0       0       0       0
  2688 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2689 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2690 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2691 ;;Total ram usage:        7 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_atoi
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text13
  2701  00164E                     __ptext13:
  2702                           	opt callstack 0
  2703  00164E                     _isspace:
  2704                           	opt callstack 26
  2705  00164E  0E01               	movlw	1
  2706  001650  6E07               	movwf	_isspace$1125^0,c
  2707  001652  0E20               	movlw	32
  2708  001654  1801               	xorwf	isspace@c^0,w,c
  2709  001656  1002               	iorwf	(isspace@c+1)^0,w,c
  2710  001658  B4D8               	btfsc	status,2,c
  2711  00165A  EF31  F00B         	goto	u871
  2712  00165E  EF33  F00B         	goto	u870
  2713  001662                     u871:
  2714  001662  EF4C  F00B         	goto	l1665
  2715  001666                     u870:
  2716  001666  0EF7               	movlw	247
  2717  001668  6E03               	movwf	??_isspace^0,c
  2718  00166A  0EFF               	movlw	255
  2719  00166C  6E04               	movwf	(??_isspace+1)^0,c
  2720  00166E  C001  F005         	movff	isspace@c,??_isspace+2
  2721  001672  C002  F006         	movff	isspace@c+1,??_isspace+3
  2722  001676  5003               	movf	??_isspace^0,w,c
  2723  001678  2605               	addwf	(??_isspace+2)^0,f,c
  2724  00167A  5004               	movf	(??_isspace+1)^0,w,c
  2725  00167C  2206               	addwfc	(??_isspace+3)^0,f,c
  2726  00167E  5006               	movf	(??_isspace+3)^0,w,c
  2727  001680  E109               	bnz	u880
  2728  001682  0E05               	movlw	5
  2729  001684  5C05               	subwf	(??_isspace+2)^0,w,c
  2730  001686  A0D8               	btfss	status,0,c
  2731  001688  EF48  F00B         	goto	u881
  2732  00168C  EF4A  F00B         	goto	u880
  2733  001690                     u881:
  2734  001690  EF4C  F00B         	goto	l1665
  2735  001694                     u880:
  2736  001694  0E00               	movlw	0
  2737  001696  6E07               	movwf	_isspace$1125^0,c
  2738  001698                     l1665:
  2739  001698  C007  F001         	movff	_isspace$1125,?_isspace
  2740  00169C  6A02               	clrf	(?_isspace+1)^0,c
  2741  00169E  0012               	return		;funcret
  2742  0016A0                     __end_of_isspace:
  2743                           	opt callstack 0
  2744                           
  2745 ;; *************** function _isdigit *****************
  2746 ;; Defined at:
  2747 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  c               2    0[COMRAM] int 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;		None
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  2    0[COMRAM] int 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2761 ;;      Params:         2       0       0       0       0       0       0       0       0
  2762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2763 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2764 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2765 ;;Total ram usage:        6 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_vfpfcnvrt
  2771 ;;		_atoi
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text14
  2776  001768                     __ptext14:
  2777                           	opt callstack 0
  2778  001768                     _isdigit:
  2779                           	opt callstack 27
  2780  001768  0ED0               	movlw	208
  2781  00176A  6E03               	movwf	??_isdigit^0,c
  2782  00176C  0EFF               	movlw	255
  2783  00176E  6E04               	movwf	(??_isdigit+1)^0,c
  2784  001770  C001  F005         	movff	isdigit@c,??_isdigit+2
  2785  001774  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2786  001778  5003               	movf	??_isdigit^0,w,c
  2787  00177A  2605               	addwf	(??_isdigit+2)^0,f,c
  2788  00177C  5004               	movf	(??_isdigit+1)^0,w,c
  2789  00177E  2206               	addwfc	(??_isdigit+3)^0,f,c
  2790  001780  5006               	movf	(??_isdigit+3)^0,w,c
  2791  001782  E10A               	bnz	u780
  2792  001784  0E0A               	movlw	10
  2793  001786  5C05               	subwf	(??_isdigit+2)^0,w,c
  2794  001788  A0D8               	btfss	status,0,c
  2795  00178A  EFC9  F00B         	goto	u781
  2796  00178E  EFCC  F00B         	goto	u780
  2797  001792                     u781:
  2798  001792  0E01               	movlw	1
  2799  001794  EFCD  F00B         	goto	u790
  2800  001798                     u780:
  2801  001798  0E00               	movlw	0
  2802  00179A                     u790:
  2803  00179A  6E01               	movwf	?_isdigit^0,c
  2804  00179C  6A02               	clrf	(?_isdigit+1)^0,c
  2805  00179E  0012               	return		;funcret
  2806  0017A0                     __end_of_isdigit:
  2807                           	opt callstack 0
  2808                           
  2809 ;; *************** function ___wmul *****************
  2810 ;; Defined at:
  2811 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  multiplier      2    0[COMRAM] unsigned int 
  2814 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  product         2    4[COMRAM] unsigned int 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  2    0[COMRAM] unsigned int 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0, prodl, prodh
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2826 ;;      Params:         4       0       0       0       0       0       0       0       0
  2827 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2829 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2830 ;;Total ram usage:        6 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_atoi
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text15
  2840  001802                     __ptext15:
  2841                           	opt callstack 0
  2842  001802                     ___wmul:
  2843                           	opt callstack 26
  2844  001802  5001               	movf	___wmul@multiplier^0,w,c
  2845  001804  0203               	mulwf	___wmul@multiplicand^0,c
  2846  001806  CFF3 F005          	movff	prodl,___wmul@product
  2847  00180A  CFF4 F006          	movff	prodh,___wmul@product+1
  2848  00180E  5001               	movf	___wmul@multiplier^0,w,c
  2849  001810  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2850  001812  50F3               	movf	243,w,c
  2851  001814  2606               	addwf	(___wmul@product+1)^0,f,c
  2852  001816  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2853  001818  0203               	mulwf	___wmul@multiplicand^0,c
  2854  00181A  50F3               	movf	243,w,c
  2855  00181C  2606               	addwf	(___wmul@product+1)^0,f,c
  2856  00181E  C005  F001         	movff	___wmul@product,?___wmul
  2857  001822  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2858  001826  0012               	return		;funcret
  2859  001828                     __end_of___wmul:
  2860                           	opt callstack 0
  2861                           
  2862 ;; *************** function _setCursor *****************
  2863 ;; Defined at:
  2864 ;;		line 56 in file "LCD.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  x               1    wreg     unsigned char 
  2867 ;;  y               1    2[COMRAM] unsigned char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  x               1    8[COMRAM] unsigned char 
  2870 ;;  n               1    7[COMRAM] unsigned char 
  2871 ;;  m               1    6[COMRAM] unsigned char 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2881 ;;      Params:         1       0       0       0       0       0       0       0       0
  2882 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2883 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2884 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2885 ;;Total ram usage:        7 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    2
  2888 ;; This function calls:
  2889 ;;		_comando
  2890 ;; This function is called by:
  2891 ;;		_main
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text16
  2896  000F4E                     __ptext16:
  2897                           	opt callstack 0
  2898  000F4E                     _setCursor:
  2899                           	opt callstack 28
  2900                           
  2901                           ;incstack = 0
  2902                           ;setCursor@x stored from wreg
  2903  000F4E  6E09               	movwf	setCursor@x^0,c
  2904  000F50                     
  2905                           ;LCD.c: 57:     char m;;LCD.c: 58:     char n;;LCD.c: 59:     if(y==1){
  2906  000F50  0403               	decf	setCursor@y^0,w,c
  2907  000F52  A4D8               	btfss	status,2,c
  2908  000F54  EFAE  F007         	goto	u1211
  2909  000F58  EFB0  F007         	goto	u1210
  2910  000F5C                     u1211:
  2911  000F5C  EFCA  F007         	goto	l82
  2912  000F60                     u1210:
  2913  000F60                     
  2914                           ;LCD.c: 60:         m=0x80 + x;
  2915  000F60  5009               	movf	setCursor@x^0,w,c
  2916  000F62  0F80               	addlw	128
  2917  000F64  6E07               	movwf	setCursor@m^0,c
  2918                           
  2919                           ;LCD.c: 61:         n=(0x80 + x) >> 4;
  2920  000F66  5009               	movf	setCursor@x^0,w,c
  2921  000F68  6E04               	movwf	??_setCursor^0,c
  2922  000F6A  6A05               	clrf	(??_setCursor+1)^0,c
  2923  000F6C  0E80               	movlw	128
  2924  000F6E  2604               	addwf	??_setCursor^0,f,c
  2925  000F70  0E00               	movlw	0
  2926  000F72  2205               	addwfc	(??_setCursor+1)^0,f,c
  2927  000F74  0E04               	movlw	4
  2928  000F76  6E06               	movwf	(??_setCursor+2)^0,c
  2929  000F78                     u1225:
  2930  000F78  3405               	rlcf	(??_setCursor+1)^0,w,c
  2931  000F7A  3205               	rrcf	(??_setCursor+1)^0,f,c
  2932  000F7C  3204               	rrcf	??_setCursor^0,f,c
  2933  000F7E  2E06               	decfsz	(??_setCursor+2)^0,f,c
  2934  000F80  EFBC  F007         	goto	u1225
  2935  000F84  5004               	movf	??_setCursor^0,w,c
  2936  000F86  6E08               	movwf	setCursor@n^0,c
  2937  000F88                     
  2938                           ;LCD.c: 62:         comando(n);
  2939  000F88  5008               	movf	setCursor@n^0,w,c
  2940  000F8A  EC23  F00C         	call	_comando
  2941  000F8E                     
  2942                           ;LCD.c: 63:         comando(m);
  2943  000F8E  5007               	movf	setCursor@m^0,w,c
  2944  000F90  EC23  F00C         	call	_comando
  2945  000F94                     l82:
  2946                           
  2947                           ;LCD.c: 65:     if(y==2){
  2948  000F94  0E02               	movlw	2
  2949  000F96  1803               	xorwf	setCursor@y^0,w,c
  2950  000F98  A4D8               	btfss	status,2,c
  2951  000F9A  EFD1  F007         	goto	u1231
  2952  000F9E  EFD3  F007         	goto	u1230
  2953  000FA2                     u1231:
  2954  000FA2  EFED  F007         	goto	l83
  2955  000FA6                     u1230:
  2956  000FA6                     
  2957                           ;LCD.c: 66:         m=0xC0 + x;
  2958  000FA6  5009               	movf	setCursor@x^0,w,c
  2959  000FA8  0FC0               	addlw	192
  2960  000FAA  6E07               	movwf	setCursor@m^0,c
  2961                           
  2962                           ;LCD.c: 67:         n=(0xC0 + x) >> 4;
  2963  000FAC  5009               	movf	setCursor@x^0,w,c
  2964  000FAE  6E04               	movwf	??_setCursor^0,c
  2965  000FB0  6A05               	clrf	(??_setCursor+1)^0,c
  2966  000FB2  0EC0               	movlw	192
  2967  000FB4  2604               	addwf	??_setCursor^0,f,c
  2968  000FB6  0E00               	movlw	0
  2969  000FB8  2205               	addwfc	(??_setCursor+1)^0,f,c
  2970  000FBA  0E04               	movlw	4
  2971  000FBC  6E06               	movwf	(??_setCursor+2)^0,c
  2972  000FBE                     u1245:
  2973  000FBE  3405               	rlcf	(??_setCursor+1)^0,w,c
  2974  000FC0  3205               	rrcf	(??_setCursor+1)^0,f,c
  2975  000FC2  3204               	rrcf	??_setCursor^0,f,c
  2976  000FC4  2E06               	decfsz	(??_setCursor+2)^0,f,c
  2977  000FC6  EFDF  F007         	goto	u1245
  2978  000FCA  5004               	movf	??_setCursor^0,w,c
  2979  000FCC  6E08               	movwf	setCursor@n^0,c
  2980  000FCE                     
  2981                           ;LCD.c: 68:         comando(n);
  2982  000FCE  5008               	movf	setCursor@n^0,w,c
  2983  000FD0  EC23  F00C         	call	_comando
  2984  000FD4                     
  2985                           ;LCD.c: 69:         comando(m);
  2986  000FD4  5007               	movf	setCursor@m^0,w,c
  2987  000FD6  EC23  F00C         	call	_comando
  2988  000FDA                     l83:
  2989                           
  2990                           ;LCD.c: 71:     if(y==3){
  2991  000FDA  0E03               	movlw	3
  2992  000FDC  1803               	xorwf	setCursor@y^0,w,c
  2993  000FDE  A4D8               	btfss	status,2,c
  2994  000FE0  EFF4  F007         	goto	u1251
  2995  000FE4  EFF6  F007         	goto	u1250
  2996  000FE8                     u1251:
  2997  000FE8  EF10  F008         	goto	l84
  2998  000FEC                     u1250:
  2999  000FEC                     
  3000                           ;LCD.c: 72:         m=0x80 +20+ x;
  3001  000FEC  5009               	movf	setCursor@x^0,w,c
  3002  000FEE  0F94               	addlw	148
  3003  000FF0  6E07               	movwf	setCursor@m^0,c
  3004                           
  3005                           ;LCD.c: 73:         n=(0x80+20 + x) >> 4;
  3006  000FF2  5009               	movf	setCursor@x^0,w,c
  3007  000FF4  6E04               	movwf	??_setCursor^0,c
  3008  000FF6  6A05               	clrf	(??_setCursor+1)^0,c
  3009  000FF8  0E94               	movlw	148
  3010  000FFA  2604               	addwf	??_setCursor^0,f,c
  3011  000FFC  0E00               	movlw	0
  3012  000FFE  2205               	addwfc	(??_setCursor+1)^0,f,c
  3013  001000  0E04               	movlw	4
  3014  001002  6E06               	movwf	(??_setCursor+2)^0,c
  3015  001004                     u1265:
  3016  001004  3405               	rlcf	(??_setCursor+1)^0,w,c
  3017  001006  3205               	rrcf	(??_setCursor+1)^0,f,c
  3018  001008  3204               	rrcf	??_setCursor^0,f,c
  3019  00100A  2E06               	decfsz	(??_setCursor+2)^0,f,c
  3020  00100C  EF02  F008         	goto	u1265
  3021  001010  5004               	movf	??_setCursor^0,w,c
  3022  001012  6E08               	movwf	setCursor@n^0,c
  3023  001014                     
  3024                           ;LCD.c: 74:         comando(n);
  3025  001014  5008               	movf	setCursor@n^0,w,c
  3026  001016  EC23  F00C         	call	_comando
  3027  00101A                     
  3028                           ;LCD.c: 75:         comando(m);
  3029  00101A  5007               	movf	setCursor@m^0,w,c
  3030  00101C  EC23  F00C         	call	_comando
  3031  001020                     l84:
  3032                           
  3033                           ;LCD.c: 77:     if(y==4){
  3034  001020  0E04               	movlw	4
  3035  001022  1803               	xorwf	setCursor@y^0,w,c
  3036  001024  A4D8               	btfss	status,2,c
  3037  001026  EF17  F008         	goto	u1271
  3038  00102A  EF19  F008         	goto	u1270
  3039  00102E                     u1271:
  3040  00102E  EF33  F008         	goto	l86
  3041  001032                     u1270:
  3042  001032                     
  3043                           ;LCD.c: 78:         m=0xC0 +20+ x;
  3044  001032  5009               	movf	setCursor@x^0,w,c
  3045  001034  0FD4               	addlw	212
  3046  001036  6E07               	movwf	setCursor@m^0,c
  3047                           
  3048                           ;LCD.c: 79:         n=(0xC0 + 20+ x) >> 4;
  3049  001038  5009               	movf	setCursor@x^0,w,c
  3050  00103A  6E04               	movwf	??_setCursor^0,c
  3051  00103C  6A05               	clrf	(??_setCursor+1)^0,c
  3052  00103E  0ED4               	movlw	212
  3053  001040  2604               	addwf	??_setCursor^0,f,c
  3054  001042  0E00               	movlw	0
  3055  001044  2205               	addwfc	(??_setCursor+1)^0,f,c
  3056  001046  0E04               	movlw	4
  3057  001048  6E06               	movwf	(??_setCursor+2)^0,c
  3058  00104A                     u1285:
  3059  00104A  3405               	rlcf	(??_setCursor+1)^0,w,c
  3060  00104C  3205               	rrcf	(??_setCursor+1)^0,f,c
  3061  00104E  3204               	rrcf	??_setCursor^0,f,c
  3062  001050  2E06               	decfsz	(??_setCursor+2)^0,f,c
  3063  001052  EF25  F008         	goto	u1285
  3064  001056  5004               	movf	??_setCursor^0,w,c
  3065  001058  6E08               	movwf	setCursor@n^0,c
  3066  00105A                     
  3067                           ;LCD.c: 80:         comando(n);
  3068  00105A  5008               	movf	setCursor@n^0,w,c
  3069  00105C  EC23  F00C         	call	_comando
  3070  001060                     
  3071                           ;LCD.c: 81:         comando(m);
  3072  001060  5007               	movf	setCursor@m^0,w,c
  3073  001062  EC23  F00C         	call	_comando
  3074  001066                     l86:
  3075  001066  0012               	return		;funcret
  3076  001068                     __end_of_setCursor:
  3077                           	opt callstack 0
  3078                           
  3079 ;; *************** function _registros *****************
  3080 ;; Defined at:
  3081 ;;		line 67 in file "main.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3095 ;;      Params:         0       0       0       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_main
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text17
  3109  001874                     __ptext17:
  3110                           	opt callstack 0
  3111  001874                     _registros:
  3112                           	opt callstack 30
  3113  001874                     
  3114                           ;main.c: 68:     ANSELD=0;
  3115  001874  0E00               	movlw	0
  3116  001876  010F               	movlb	15	; () banked
  3117  001878  6F5E               	movwf	94,b	;volatile
  3118                           
  3119                           ;main.c: 69:     ANSELE=0;
  3120  00187A  0E00               	movlw	0
  3121  00187C  6F5F               	movwf	95,b	;volatile
  3122                           
  3123                           ;main.c: 70:     TRISD=0;
  3124  00187E  0E00               	movlw	0
  3125  001880  6E95               	movwf	149,c	;volatile
  3126                           
  3127                           ;main.c: 71:     TRISE=0;
  3128  001882  0E00               	movlw	0
  3129  001884  6E96               	movwf	150,c	;volatile
  3130  001886                     
  3131                           ; BSR set to: 15
  3132  001886  0012               	return		;funcret
  3133  001888                     __end_of_registros:
  3134                           	opt callstack 0
  3135                           
  3136 ;; *************** function _print *****************
  3137 ;; Defined at:
  3138 ;;		line 95 in file "LCD.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  a               2    5[COMRAM] PTR unsigned char 
  3141 ;;		 -> valor2(6), valor1(6), valor(6), STR_1(5), 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  k               2    9[COMRAM] int 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3153 ;;      Params:         2       0       0       0       0       0       0       0       0
  3154 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3155 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3156 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3157 ;;Total ram usage:        6 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    3
  3160 ;; This function calls:
  3161 ;;		_caracter
  3162 ;; This function is called by:
  3163 ;;		_main
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text18
  3168  0014C0                     __ptext18:
  3169                           	opt callstack 0
  3170  0014C0                     _print:
  3171                           	opt callstack 27
  3172  0014C0                     
  3173                           ;LCD.c: 96:     for (int k=0;a[k]!='\0';k++){
  3174  0014C0  0E00               	movlw	0
  3175  0014C2  6E0B               	movwf	(print@k+1)^0,c
  3176  0014C4  0E00               	movlw	0
  3177  0014C6  6E0A               	movwf	print@k^0,c
  3178  0014C8  EF80  F00A         	goto	l1919
  3179  0014CC                     l1915:
  3180                           
  3181                           ;LCD.c: 97:         caracter(a[k]);
  3182  0014CC  500A               	movf	print@k^0,w,c
  3183  0014CE  2406               	addwf	print@a^0,w,c
  3184  0014D0  6E08               	movwf	??_print^0,c
  3185  0014D2  500B               	movf	(print@k+1)^0,w,c
  3186  0014D4  2007               	addwfc	(print@a+1)^0,w,c
  3187  0014D6  6E09               	movwf	(??_print+1)^0,c
  3188  0014D8  C008  FFF6         	movff	??_print,tblptrl
  3189  0014DC  C009  FFF7         	movff	??_print+1,tblptrh
  3190  0014E0  6AF8               	clrf	tblptru,c
  3191  0014E2  0E07               	movlw	(high __ramtop+-1)
  3192  0014E4  64F7               	cpfsgt	tblptrh,c
  3193  0014E6  D003               	bra	u1297
  3194  0014E8  0008               	tblrd		*
  3195  0014EA  50F5               	movf	tablat,w,c
  3196  0014EC  D005               	bra	u1290
  3197  0014EE                     u1297:
  3198  0014EE  CFF6 FFE1          	movff	tblptrl,fsr1l
  3199  0014F2  CFF7 FFE2          	movff	tblptrh,fsr1h
  3200  0014F6  50E7               	movf	indf1,w,c
  3201  0014F8                     u1290:
  3202  0014F8  EC14  F00C         	call	_caracter
  3203  0014FC                     
  3204                           ;LCD.c: 98:     }
  3205  0014FC  4A0A               	infsnz	print@k^0,f,c
  3206  0014FE  2A0B               	incf	(print@k+1)^0,f,c
  3207  001500                     l1919:
  3208  001500  500A               	movf	print@k^0,w,c
  3209  001502  2406               	addwf	print@a^0,w,c
  3210  001504  6E08               	movwf	??_print^0,c
  3211  001506  500B               	movf	(print@k+1)^0,w,c
  3212  001508  2007               	addwfc	(print@a+1)^0,w,c
  3213  00150A  6E09               	movwf	(??_print+1)^0,c
  3214  00150C  C008  FFF6         	movff	??_print,tblptrl
  3215  001510  C009  FFF7         	movff	??_print+1,tblptrh
  3216  001514  6AF8               	clrf	tblptru,c
  3217  001516  0E07               	movlw	(high __ramtop+-1)
  3218  001518  64F7               	cpfsgt	tblptrh,c
  3219  00151A  D003               	bra	u1307
  3220  00151C  0008               	tblrd		*
  3221  00151E  50F5               	movf	tablat,w,c
  3222  001520  D005               	bra	u1300
  3223  001522                     u1307:
  3224  001522  CFF6 FFE1          	movff	tblptrl,fsr1l
  3225  001526  CFF7 FFE2          	movff	tblptrh,fsr1h
  3226  00152A  50E7               	movf	indf1,w,c
  3227  00152C                     u1300:
  3228  00152C  0900               	iorlw	0
  3229  00152E  A4D8               	btfss	status,2,c
  3230  001530  EF9C  F00A         	goto	u1311
  3231  001534  EF9E  F00A         	goto	u1310
  3232  001538                     u1311:
  3233  001538  EF66  F00A         	goto	l1915
  3234  00153C                     u1310:
  3235  00153C  0012               	return		;funcret
  3236  00153E                     __end_of_print:
  3237                           	opt callstack 0
  3238                           
  3239 ;; *************** function _caracter *****************
  3240 ;; Defined at:
  3241 ;;		line 85 in file "LCD.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  a               1    wreg     unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  a               1    4[COMRAM] unsigned char 
  3246 ;;  n               1    3[COMRAM] unsigned char 
  3247 ;;  m               1    2[COMRAM] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      void 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0
  3258 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3260 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3261 ;;Total ram usage:        3 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    2
  3264 ;; This function calls:
  3265 ;;		_comando
  3266 ;; This function is called by:
  3267 ;;		_print
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text19
  3272  001828                     __ptext19:
  3273                           	opt callstack 0
  3274  001828                     _caracter:
  3275                           	opt callstack 27
  3276                           
  3277                           ;incstack = 0
  3278                           ;caracter@a stored from wreg
  3279  001828  6E05               	movwf	caracter@a^0,c
  3280  00182A                     
  3281                           ;LCD.c: 86:     char m,n;;LCD.c: 87:     m=a>>4;
  3282  00182A  3805               	swapf	caracter@a^0,w,c
  3283  00182C  0B0F               	andlw	15
  3284  00182E  6E03               	movwf	caracter@m^0,c
  3285  001830                     
  3286                           ;LCD.c: 88:     n=a;
  3287  001830  C005  F004         	movff	caracter@a,caracter@n
  3288  001834                     
  3289                           ;LCD.c: 89:     PORTEbits.RE0=1;
  3290  001834  8084               	bsf	132,0,c	;volatile
  3291  001836                     
  3292                           ;LCD.c: 90:     comando(m);
  3293  001836  5003               	movf	caracter@m^0,w,c
  3294  001838  EC23  F00C         	call	_comando
  3295  00183C                     
  3296                           ;LCD.c: 91:     comando(n);
  3297  00183C  5004               	movf	caracter@n^0,w,c
  3298  00183E  EC23  F00C         	call	_comando
  3299  001842                     
  3300                           ;LCD.c: 92:     PORTEbits.RE0=0;
  3301  001842  9084               	bcf	132,0,c	;volatile
  3302  001844  0012               	return		;funcret
  3303  001846                     __end_of_caracter:
  3304                           	opt callstack 0
  3305                           
  3306 ;; *************** function _oscilador *****************
  3307 ;; Defined at:
  3308 ;;		line 63 in file "main.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      void 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3322 ;;      Params:         0       0       0       0       0       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3325 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3326 ;;Total ram usage:        0 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_main
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text20
  3336  001888                     __ptext20:
  3337                           	opt callstack 0
  3338  001888                     _oscilador:
  3339                           	opt callstack 30
  3340  001888                     
  3341                           ;main.c: 64:     OSCCON=0x40;
  3342  001888  0E40               	movlw	64
  3343  00188A  6ED3               	movwf	211,c	;volatile
  3344                           
  3345                           ;main.c: 65:     OSCCON2=0x00;
  3346  00188C  0E00               	movlw	0
  3347  00188E  6ED2               	movwf	210,c	;volatile
  3348  001890  0012               	return		;funcret
  3349  001892                     __end_of_oscilador:
  3350                           	opt callstack 0
  3351                           
  3352 ;; *************** function _begin *****************
  3353 ;; Defined at:
  3354 ;;		line 41 in file "LCD.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3368 ;;      Params:         0       0       0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    2
  3375 ;; This function calls:
  3376 ;;		_comando
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text21
  3383  0016A0                     __ptext21:
  3384                           	opt callstack 0
  3385  0016A0                     _begin:
  3386                           	opt callstack 28
  3387  0016A0                     
  3388                           ;LCD.c: 42:     comando(0x03);
  3389  0016A0  0E03               	movlw	3
  3390  0016A2  EC23  F00C         	call	_comando
  3391                           
  3392                           ;LCD.c: 43:     comando(0x03);
  3393  0016A6  0E03               	movlw	3
  3394  0016A8  EC23  F00C         	call	_comando
  3395                           
  3396                           ;LCD.c: 44:     comando(0x03);
  3397  0016AC  0E03               	movlw	3
  3398  0016AE  EC23  F00C         	call	_comando
  3399                           
  3400                           ;LCD.c: 45:     comando(0x02);
  3401  0016B2  0E02               	movlw	2
  3402  0016B4  EC23  F00C         	call	_comando
  3403                           
  3404                           ;LCD.c: 46:     comando(0x02);
  3405  0016B8  0E02               	movlw	2
  3406  0016BA  EC23  F00C         	call	_comando
  3407                           
  3408                           ;LCD.c: 47:     comando(0x08);
  3409  0016BE  0E08               	movlw	8
  3410  0016C0  EC23  F00C         	call	_comando
  3411                           
  3412                           ;LCD.c: 48:     comando(0x00);
  3413  0016C4  0E00               	movlw	0
  3414  0016C6  EC23  F00C         	call	_comando
  3415                           
  3416                           ;LCD.c: 49:     comando(0x08);
  3417  0016CA  0E08               	movlw	8
  3418  0016CC  EC23  F00C         	call	_comando
  3419                           
  3420                           ;LCD.c: 50:     comando(0x00);
  3421  0016D0  0E00               	movlw	0
  3422  0016D2  EC23  F00C         	call	_comando
  3423                           
  3424                           ;LCD.c: 51:     comando(0x01);
  3425  0016D6  0E01               	movlw	1
  3426  0016D8  EC23  F00C         	call	_comando
  3427                           
  3428                           ;LCD.c: 52:     comando(0x00);
  3429  0016DC  0E00               	movlw	0
  3430  0016DE  EC23  F00C         	call	_comando
  3431                           
  3432                           ;LCD.c: 53:     comando(0x0D);
  3433  0016E2  0E0D               	movlw	13
  3434  0016E4  EC23  F00C         	call	_comando
  3435  0016E8  0012               	return		;funcret
  3436  0016EA                     __end_of_begin:
  3437                           	opt callstack 0
  3438                           
  3439 ;; *************** function _comando *****************
  3440 ;; Defined at:
  3441 ;;		line 32 in file "LCD.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  a               1    wreg     unsigned char 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  a               1    1[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0
  3456 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3458 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3459 ;;Total ram usage:        1 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    1
  3462 ;; This function calls:
  3463 ;;		_busdata
  3464 ;; This function is called by:
  3465 ;;		_begin
  3466 ;;		_setCursor
  3467 ;;		_caracter
  3468 ;;		_create
  3469 ;;		_writecaracter
  3470 ;;		_clear
  3471 ;;		_home
  3472 ;;		_ocultarcursor
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text22
  3477  001846                     __ptext22:
  3478                           	opt callstack 0
  3479  001846                     _comando:
  3480                           	opt callstack 28
  3481                           
  3482                           ;incstack = 0
  3483                           ;comando@a stored from wreg
  3484  001846  6E02               	movwf	comando@a^0,c
  3485  001848                     
  3486                           ;LCD.c: 33:     PORTEbits.RE2=0;
  3487  001848  9484               	bcf	132,2,c	;volatile
  3488                           
  3489                           ;LCD.c: 34:     PORTEbits.RE2=1;
  3490  00184A  8484               	bsf	132,2,c	;volatile
  3491  00184C                     
  3492                           ;LCD.c: 36:     busdata(a);
  3493  00184C  5002               	movf	comando@a^0,w,c
  3494  00184E  ECD0  F00A         	call	_busdata
  3495  001852                     
  3496                           ;LCD.c: 37:     _delay((unsigned long)((1)*(2000000/4000.0)));
  3497  001852  0EA6               	movlw	166
  3498  001854                     u1367:
  3499  001854  2EE8               	decfsz	wreg,f,c
  3500  001856  D7FE               	bra	u1367
  3501  001858  D000               	nop2	
  3502  00185A                     
  3503                           ;LCD.c: 38:     PORTEbits.RE2=0;
  3504  00185A  9484               	bcf	132,2,c	;volatile
  3505  00185C  0012               	return		;funcret
  3506  00185E                     __end_of_comando:
  3507                           	opt callstack 0
  3508                           
  3509 ;; *************** function _busdata *****************
  3510 ;; Defined at:
  3511 ;;		line 4 in file "LCD.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  a               1    wreg     unsigned char 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;  a               1    0[COMRAM] unsigned char 
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3525 ;;      Params:         0       0       0       0       0       0       0       0       0
  3526 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3528 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3529 ;;Total ram usage:        1 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; This function calls:
  3532 ;;		Nothing
  3533 ;; This function is called by:
  3534 ;;		_comando
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text23
  3539  0015A0                     __ptext23:
  3540                           	opt callstack 0
  3541  0015A0                     _busdata:
  3542                           	opt callstack 28
  3543                           
  3544                           ;incstack = 0
  3545                           ;busdata@a stored from wreg
  3546  0015A0  6E01               	movwf	busdata@a^0,c
  3547  0015A2                     
  3548                           ;LCD.c: 5:     if (a & 0x01){
  3549  0015A2  A001               	btfss	busdata@a^0,0,c
  3550  0015A4  EFD6  F00A         	goto	u891
  3551  0015A8  EFD8  F00A         	goto	u890
  3552  0015AC                     u891:
  3553  0015AC  EFDB  F00A         	goto	l65
  3554  0015B0                     u890:
  3555  0015B0                     
  3556                           ;LCD.c: 6:         PORTDbits.RD4=1;
  3557  0015B0  8883               	bsf	131,4,c	;volatile
  3558                           
  3559                           ;LCD.c: 7:     }
  3560  0015B2  EFDC  F00A         	goto	l1673
  3561  0015B6                     l65:
  3562                           
  3563                           ;LCD.c: 9:         PORTDbits.RD4=0;
  3564  0015B6  9883               	bcf	131,4,c	;volatile
  3565  0015B8                     l1673:
  3566                           
  3567                           ;LCD.c: 11:     if (a & 0x02){
  3568  0015B8  A201               	btfss	busdata@a^0,1,c
  3569  0015BA  EFE1  F00A         	goto	u901
  3570  0015BE  EFE3  F00A         	goto	u900
  3571  0015C2                     u901:
  3572  0015C2  EFE6  F00A         	goto	l67
  3573  0015C6                     u900:
  3574  0015C6                     
  3575                           ;LCD.c: 12:         PORTDbits.RD5=1;
  3576  0015C6  8A83               	bsf	131,5,c	;volatile
  3577                           
  3578                           ;LCD.c: 13:     }
  3579  0015C8  EFE7  F00A         	goto	l1677
  3580  0015CC                     l67:
  3581                           
  3582                           ;LCD.c: 15:         PORTDbits.RD5=0;
  3583  0015CC  9A83               	bcf	131,5,c	;volatile
  3584  0015CE                     l1677:
  3585                           
  3586                           ;LCD.c: 17:     if (a & 0x04){
  3587  0015CE  A401               	btfss	busdata@a^0,2,c
  3588  0015D0  EFEC  F00A         	goto	u911
  3589  0015D4  EFEE  F00A         	goto	u910
  3590  0015D8                     u911:
  3591  0015D8  EFF1  F00A         	goto	l69
  3592  0015DC                     u910:
  3593  0015DC                     
  3594                           ;LCD.c: 18:         PORTDbits.RD6=1;
  3595  0015DC  8C83               	bsf	131,6,c	;volatile
  3596                           
  3597                           ;LCD.c: 19:     }
  3598  0015DE  EFF2  F00A         	goto	l1681
  3599  0015E2                     l69:
  3600                           
  3601                           ;LCD.c: 21:         PORTDbits.RD6=0;
  3602  0015E2  9C83               	bcf	131,6,c	;volatile
  3603  0015E4                     l1681:
  3604                           
  3605                           ;LCD.c: 23:     if (a & 0x08){
  3606  0015E4  A601               	btfss	busdata@a^0,3,c
  3607  0015E6  EFF7  F00A         	goto	u921
  3608  0015EA  EFF9  F00A         	goto	u920
  3609  0015EE                     u921:
  3610  0015EE  EFFC  F00A         	goto	l71
  3611  0015F2                     u920:
  3612  0015F2                     
  3613                           ;LCD.c: 24:         PORTDbits.RD7=1;
  3614  0015F2  8E83               	bsf	131,7,c	;volatile
  3615                           
  3616                           ;LCD.c: 25:     }
  3617  0015F4  EFFD  F00A         	goto	l73
  3618  0015F8                     l71:
  3619                           
  3620                           ;LCD.c: 27:         PORTDbits.RD7=0;
  3621  0015F8  9E83               	bcf	131,7,c	;volatile
  3622  0015FA                     l73:
  3623  0015FA  0012               	return		;funcret
  3624  0015FC                     __end_of_busdata:
  3625                           	opt callstack 0
  3626                           
  3627 ;; *************** function _analogRead *****************
  3628 ;; Defined at:
  3629 ;;		line 23 in file "ADC.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  canal           1    wreg     unsigned char 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  canal           1    3[COMRAM] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2    0[COMRAM] unsigned int 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3643 ;;      Params:         2       0       0       0       0       0       0       0       0
  3644 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3645 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3646 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3647 ;;Total ram usage:        4 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text24
  3657  00172E                     __ptext24:
  3658                           	opt callstack 0
  3659  00172E                     _analogRead:
  3660                           	opt callstack 30
  3661                           
  3662                           ;incstack = 0
  3663                           ;analogRead@canal stored from wreg
  3664  00172E  6E04               	movwf	analogRead@canal^0,c
  3665  001730                     
  3666                           ;ADC.c: 24:     ADCON0bits.CHS=canal;
  3667  001730  C004  F003         	movff	analogRead@canal,??_analogRead
  3668  001734  4603               	rlncf	??_analogRead^0,f,c
  3669  001736  4603               	rlncf	??_analogRead^0,f,c
  3670  001738  50C2               	movf	194,w,c	;volatile
  3671  00173A  1803               	xorwf	??_analogRead^0,w,c
  3672  00173C  0B83               	andlw	-125
  3673  00173E  1803               	xorwf	??_analogRead^0,w,c
  3674  001740  6EC2               	movwf	194,c	;volatile
  3675  001742                     
  3676                           ;ADC.c: 25:     ADCON0bits.GO_DONE=1;
  3677  001742  82C2               	bsf	194,1,c	;volatile
  3678  001744                     l142:
  3679  001744  B2C2               	btfsc	194,1,c	;volatile
  3680  001746  EFA7  F00B         	goto	u1321
  3681  00174A  EFA9  F00B         	goto	u1320
  3682  00174E                     u1321:
  3683  00174E  EFA2  F00B         	goto	l142
  3684  001752                     u1320:
  3685  001752                     
  3686                           ;ADC.c: 27:     conversion=ADRESH<<8;
  3687  001752  50C4               	movf	196,w,c	;volatile
  3688  001754  0100               	movlb	0	; () banked
  3689  001756  6F69               	movwf	(_conversion+1)& (0+255),b
  3690  001758  6B68               	clrf	_conversion& (0+255),b
  3691  00175A                     
  3692                           ; BSR set to: 0
  3693                           ;ADC.c: 28:     conversion|=ADRESL;
  3694  00175A  50C3               	movf	195,w,c	;volatile
  3695  00175C  1368               	iorwf	_conversion& (0+255),f,b
  3696  00175E                     
  3697                           ; BSR set to: 0
  3698                           ;ADC.c: 29:     return conversion;
  3699  00175E  C068  F001         	movff	_conversion,?_analogRead
  3700  001762  C069  F002         	movff	_conversion+1,?_analogRead+1
  3701  001766                     
  3702                           ; BSR set to: 0
  3703  001766  0012               	return		;funcret
  3704  001768                     __end_of_analogRead:
  3705                           	opt callstack 0
  3706                           
  3707 ;; *************** function _ADC_begin *****************
  3708 ;; Defined at:
  3709 ;;		line 4 in file "ADC.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;		None
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;		None
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0
  3724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3726 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3727 ;;Total ram usage:        0 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_main
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text25
  3737  0017D6                     __ptext25:
  3738                           	opt callstack 0
  3739  0017D6                     _ADC_begin:
  3740                           	opt callstack 30
  3741  0017D6                     
  3742                           ;ADC.c: 5:     ANSELAbits.ANSA0=1;
  3743  0017D6  010F               	movlb	15	; () banked
  3744  0017D8  815B               	bsf	91,0,b	;volatile
  3745                           
  3746                           ;ADC.c: 6:     TRISAbits.RA0=1;
  3747  0017DA  8092               	bsf	146,0,c	;volatile
  3748                           
  3749                           ;ADC.c: 7:     ANSELBbits.ANSB0=1;
  3750  0017DC  815C               	bsf	92,0,b	;volatile
  3751                           
  3752                           ;ADC.c: 8:     TRISBbits.RB0=1;
  3753  0017DE  8093               	bsf	147,0,c	;volatile
  3754                           
  3755                           ;ADC.c: 9:     ANSELCbits.ANSC2=1;
  3756  0017E0  855D               	bsf	93,2,b	;volatile
  3757                           
  3758                           ;ADC.c: 10:     TRISCbits.RC2=1;
  3759  0017E2  8494               	bsf	148,2,c	;volatile
  3760  0017E4                     
  3761                           ; BSR set to: 15
  3762                           ;ADC.c: 13:     ADCON0bits.CHS=0b0000;
  3763  0017E4  0E83               	movlw	-125
  3764  0017E6  16C2               	andwf	194,f,c	;volatile
  3765  0017E8                     
  3766                           ; BSR set to: 15
  3767                           ;ADC.c: 14:     ADCON1bits.PVCFG0=0b00;
  3768  0017E8  94C1               	bcf	193,2,c	;volatile
  3769  0017EA                     
  3770                           ; BSR set to: 15
  3771                           ;ADC.c: 15:     ADCON1bits.NVCFG1=0b00;
  3772  0017EA  92C1               	bcf	193,1,c	;volatile
  3773                           
  3774                           ;ADC.c: 17:     ADCON2bits.ADCS=0b100;
  3775  0017EC  50C0               	movf	192,w,c	;volatile
  3776  0017EE  0BF8               	andlw	-8
  3777  0017F0  0904               	iorlw	4
  3778  0017F2  6EC0               	movwf	192,c	;volatile
  3779                           
  3780                           ;ADC.c: 18:     ADCON2bits.ACQT=0b010;
  3781  0017F4  50C0               	movf	192,w,c	;volatile
  3782  0017F6  0BC7               	andlw	-57
  3783  0017F8  0910               	iorlw	16
  3784  0017FA  6EC0               	movwf	192,c	;volatile
  3785  0017FC                     
  3786                           ; BSR set to: 15
  3787                           ;ADC.c: 19:     ADCON2bits.ADFM=1;
  3788  0017FC  8EC0               	bsf	192,7,c	;volatile
  3789  0017FE                     
  3790                           ; BSR set to: 15
  3791                           ;ADC.c: 20:     ADCON0bits.ADON=1;
  3792  0017FE  80C2               	bsf	194,0,c	;volatile
  3793  001800                     
  3794                           ; BSR set to: 15
  3795  001800  0012               	return		;funcret
  3796  001802                     __end_of_ADC_begin:
  3797                           	opt callstack 0
  3798                           
  3799                           	psect	rparam
  3800  0000                     tosu	equ	0xFFF
  3801                           tosh	equ	0xFFE
  3802                           tosl	equ	0xFFD
  3803                           stkptr	equ	0xFFC
  3804                           pclatu	equ	0xFFB
  3805                           pclath	equ	0xFFA
  3806                           pcl	equ	0xFF9
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           indf0	equ	0xFEF
  3814                           postinc0	equ	0xFEE
  3815                           postdec0	equ	0xFED
  3816                           preinc0	equ	0xFEC
  3817                           plusw0	equ	0xFEB
  3818                           fsr0h	equ	0xFEA
  3819                           fsr0l	equ	0xFE9
  3820                           wreg	equ	0xFE8
  3821                           indf1	equ	0xFE7
  3822                           postinc1	equ	0xFE6
  3823                           postdec1	equ	0xFE5
  3824                           preinc1	equ	0xFE4
  3825                           plusw1	equ	0xFE3
  3826                           fsr1h	equ	0xFE2
  3827                           fsr1l	equ	0xFE1
  3828                           bsr	equ	0xFE0
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           preinc2	equ	0xFDC
  3833                           plusw2	equ	0xFDB
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     17      83
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[6]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 6
		 -> valor2(BANK0[6]), valor1(BANK0[6]), valor(BANK0[6]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 6
		 -> valor2(BANK0[6]), valor1(BANK0[6]), valor(BANK0[6]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1129_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 6
		 -> valor2(BANK0[6]), valor1(BANK0[6]), valor(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 6
		 -> valor2(BANK0[6]), valor1(BANK0[6]), valor(BANK0[6]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[6]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[6]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    print@a	PTR unsigned char  size(2) Largest target is 6
		 -> valor2(BANK0[6]), valor1(BANK0[6]), valor(BANK0[6]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->_isspace
    _setCursor->_comando
    _print->_caracter
    _caracter->_comando
    _begin->_comando
    _comando->_busdata

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    9812
                                             10 BANK0      7     2      5
                          _ADC_begin
                         _analogRead
                              _begin
                          _oscilador
                              _print
                          _registros
                          _setCursor
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8224
                                             89 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7565
                                             81 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           48    42      6    7193
                                             59 COMRAM    22    16      6
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3759
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1350
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     313
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     357
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _setCursor                                            7     6      1     862
                                              2 COMRAM     7     6      1
                            _comando
 ---------------------------------------------------------------------------------
 (1) _registros                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print                                                6     4      2     594
                                              5 COMRAM     6     4      2
                           _caracter
 ---------------------------------------------------------------------------------
 (2) _caracter                                             3     3      0     200
                                              2 COMRAM     3     3      0
                            _comando
 ---------------------------------------------------------------------------------
 (1) _oscilador                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _begin                                                0     0      0     110
                            _comando
 ---------------------------------------------------------------------------------
 (2) _comando                                              1     1      0     110
                                              1 COMRAM     1     1      0
                            _busdata
 ---------------------------------------------------------------------------------
 (3) _busdata                                              1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _analogRead                                           4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_begin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_begin
   _analogRead
   _begin
     _comando
       _busdata
   _oscilador
   _print
     _caracter
       _comando
         _busdata
   _registros
   _setCursor
     _comando
       _busdata
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _fputc
           _putch
         _isdigit
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      53       5       51.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B2       6        0.0%
DATA                 0      0      B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Oct 27 05:45:35 2020

                     l53 1890                       l71 15F8                       l56 1886  
                     l73 15FA                       l65 15B6                       l82 0F94  
                     l67 15CC                       l83 0FDA                       l76 185C  
                     l84 1020                       l69 15E2                       l86 1066  
                     l79 16E8                       l95 153C                       l89 1844  
    ___wmul@multiplicand 0003       __size_of_ADC_begin 002C             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l142 1744                      l145 1766  
                    l225 1596                      l226 159E                      l139 1800  
                    l219 0BBA                      l229 1826                      l174 1440  
                    l184 0BF4                      l177 1482                      l194 0DBC  
                    l186 0BFC                      l179 14BE                      l674 125E  
                    l931 0F4C                      l667 123E                      l684 132E  
                    l677 130E                      l934 179E                      l942 169E  
                    l928 0F44                      l972 164C                      l957 13F8  
                    l965 172C                      l981 17D4                      l975 1892  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u700 137C  
                    u701 1378                      u710 13B2                      u711 13AE  
                    u720 172C                      u801 1176                      u721 1728  
                    u810 119A                      u730 17C8                      u811 1196  
                    u731 17C4                      u900 15C6                      u820 11C4  
                    u740 140A                      u901 15C2                      u821 11C0  
                    u741 1406                      u910 15DC                      u830 1204  
                    u750 142C                      u911 15D8                      u831 1200  
                    u751 1428                      u920 15F2                      u840 127E  
                    u680 1342                      u760 1482                      u921 15EE  
                    u841 127A                      u681 133E                      u761 147E  
                    u850 12A8                      u690 1354                      u770 1492  
                    u930 0BCC                      u851 12A4                      u691 1350  
                    u771 148E                      u931 0BC8                      u780 1798  
                    u860 12D6                      u940 0BE8                      u781 1792  
                    u861 12D2                      u941 0BE4                      u790 179A  
                    u870 1666                      u950 0D32                      u871 1662  
                    u951 0D2E                      u880 1694                      u960 0D50  
                    u881 1690                      u961 0D4C                      u890 15B0  
                    u970 0D6A                      u891 15AC                      u971 0D66  
                    u980 0D84                      u981 0D80                      u990 0D94  
                    u991 0D90                      _pad 13FA                      _pot 006E  
                    wreg 000FE8                     l2127 0E7A                     l1601 1464  
                   l1603 1492                     l1613 1802                     l1621 117C  
                   l1605 14A6                     l1701 0CB0                     l1615 181E  
                   l1631 11D6                     l1623 119A                     l1711 0D50  
                   l1703 0CB6                     l1609 1768                     l1721 0DBE  
                   l1633 1204                     l1625 11A2                     l1641 1260  
                   l1561 135E                     l1713 0D6A                     l1705 0CBC  
                   l1801 0980                     l1731 0E2C                     l1723 0DD2  
                   l1635 1224                     l1627 11B6                     l1619 1170  
                   l1651 12D6                     l1643 127E                     l1563 137C  
                   l1555 1330                     l1571 16F6                     l1715 0D84  
                   l1707 0D20                     l1811 0A1A                     l1803 098E  
                   l1901 0FEC                     l1661 1666                     l1741 0E54  
                   l1733 0E30                     l1725 0DD6                     l1637 1226  
                   l1629 11C4                     l1653 12F6                     l1645 1286  
                   l1565 13B2                     l1557 1342                     l1573 1708  
                   l1581 17B0                     l1709 0D32                     l1717 0D94  
                   l1821 0AE0                     l1805 09B2                     l1671 15B0  
                   l1911 1060                     l1903 1014                     l1663 1694  
                   l1743 0E5C                     l1727 0DDA                     l1639 1238  
                   l1655 1308                     l1647 129A                     l1559 1354  
                   l1575 170C                     l1583 17C8                     l1591 141E  
                   l1831 0B5E                     l1815 0A60                     l1807 09EC  
                   l1921 1730                     l1681 15E4                     l1673 15B8  
                   l1913 14C0                     l1905 101A                     l1665 1698  
                   l1657 164E                     l1753 0F04                     l1745 0E90  
                   l1737 0E36                     l1729 0DF6                     l1649 12A8  
                   l1569 16EA                     l1577 17A0                     l1593 142C  
                   l1825 0B18                     l1809 0A0C                     l1817 0A72  
                   l1841 0B84                     l1923 1742                     l1683 15F2  
                   l1675 15C6                     l1763 1848                     l1851 1830  
                   l1915 14CC                     l1907 1032                     l1659 1652  
                   l1755 0F16                     l1739 0E4C                     l1579 17AC  
                   l1595 1438                     l1587 13FA                     l1691 0BE8  
                   l1843 0BA8                     l1827 0B3C                     l1835 0B6A  
                   l1819 0A96                     l1771 080E                     l1925 1752  
                   l1677 15CE                     l1669 15A2                     l1765 184C  
                   l1853 1834                     l1917 14FC                     l1909 105A  
                   l1757 0F28                     l1749 0EC6                     l1597 144C  
                   l1589 140A                     l1693 0C24                     l1685 0BBC  
                   l1837 0B78                     l1829 0B4A                     l1781 087A  
                   l1773 0832                     l1861 153E                     l1941 163A  
                   l1933 15FC                     l1927 175A                     l1679 15DC  
                   l1767 1852                     l1855 1836                     l1919 1500  
                   l1871 1874                     l1599 1460                     l1695 0C2C  
                   l1687 0BCC                     l1791 08FA                     l1783 08B0  
                   l1775 0840                     l1863 1546                     l1935 160E  
                   l1951 109C                     l1881 17EA                     l1929 175E  
                   l1769 185A                     l1873 16A0                     l1857 183C  
                   l1849 182A                     l1697 0C34                     l1689 0BCE  
                   l1785 08BE                     l1777 0852                     l1865 1554  
                   l1937 1616                     l1961 10EE                     l1953 10A8  
                   l1945 1068                     l1883 17FC                     l1875 17D6  
                   l1859 1842                     l1891 0F88                     l1699 0C3A  
                   l1795 0940                     l1787 08CC                     l1779 0856  
                   l1867 157A                     l1939 161E                     l1971 1146  
                   l1963 110A                     l1955 10B6                     l1947 1078  
                   l1885 17FE                     l1877 17E4                     l1869 1888  
                   l1893 0F8E                     l1789 08EC                     l1797 0952  
                   l1973 1152                     l1965 1126                     l1957 10C4  
                   l1949 1082                     ?_pad 0011                     l1879 17E8  
                   l1895 0FA6                     l1887 0F50                     l1799 0976  
                   l1975 115C                     l1967 1130                     l1959 10D2  
                   l1897 0FCE                     l1889 0F60                     l1969 113C  
                   l1899 0FD4                     STR_1 0807                     STR_2 0801  
                   STR_3 0801                     STR_4 0801                     u1000 0DF6  
                   u1001 0DF2                     u1010 0E2C                     u1011 0E28  
                   u1020 0E48                     u1100 093A                     u1021 0E44  
                   u1101 0934                     u1030 0EFE                     u1110 093C  
                   u1031 0EF8                     u1040 0F00                     u1120 0952  
                   u1200 1596                     u1121 094E                     u1201 1592  
                   u1210 0F60                     u1050 0F16                     u1130 0976  
                   u1211 0F5C                     u1051 0F12                     u1131 0972  
                   u1300 152C                     u1060 0F28                     u1140 09B2  
                   u1061 0F24                     u1141 09AE                     u1310 153C  
                   u1230 0FA6                     u1150 0A5A                     u1070 0832  
                   u1311 1538                     u1231 0FA2                     u1151 0A54  
                   u1071 082E                     u1320 1752                     u1160 0A5C  
                   u1080 087A                     u1321 174E                     u1225 0F78  
                   u1081 0876                     u1250 0FEC                     u1170 0A72  
                   u1090 08BE                     u1307 1522                     u1251 0FE8  
                   u1171 0A6E                     u1091 08BA                     u1180 0A96  
                   u1245 0FBE                     u1181 0A92                     u1270 1032  
                   u1190 0B3C                     u1271 102E                     u1191 0B38  
                   u1265 1004                     u1290 14F8                     u1285 104A  
                   u1357 108E                     u1367 1854                     u1297 14EE  
                   _dbuf 0070                     _atoi 0DBE                     _main 1068  
                   _pot1 006C                     _pot2 006A                     _prec 0064  
                   _nout 0060                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001A  
                   fsr2l 000FD9                     _utoa 0BBC            __CFG_BORV$190 000000  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_pad 0017                    ?_atoi 0008                    ?_main 00AC  
                  ?_utoa 001C          __end_of___lodiv 1260          __end_of___lomod 1330  
           vfpfcnvrt@fmt 003E             vfpfcnvrt@llu 0046                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_comando 185E            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000                    _begin 16A0  
         __CFG_EBTRB$OFF 000000          __end_of_busdata 15FC                    _flags 0066  
                  _fputc 1330                    _fputs 16EA          __end_of_isdigit 17A0  
                  _valor 009C                    _print 14C0                    atoi@n 0015  
                  pad@fp 0011                    atoi@s 0008                    _width 0062  
                  _putch 1892          __end_of_isspace 16A0                    tablat 000FF5  
      __end_of_ADC_begin 1802                    utoa@d 001E                    utoa@i 003A  
                  utoa@n 0032                    utoa@p 002E                    utoa@w 0030  
                  status 000FD8           __CFG_T3CMX$RC0 000000          __end_of_sprintf 164E  
       ___lodiv@dividend 0001           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
        __initialization 185E             __end_of_atoi 0F4E             __end_of_main 1170  
           __end_of_utoa 0DBE           __CFG_PCLKEN$ON 000000                   ??_atoi 000A  
                 ??_main 00B1                   ??_utoa 0026            __activetblptr 000002  
       ___lodiv@quotient 0011           __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000  
                 ?_begin 0001                   ?_fputc 0001                   ?_fputs 000A  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_print 0006  
                 ?_putch 0001                   _ANSELD 000F5E                   _ANSELE 000F5F  
         __CFG_WDTEN$OFF 000000                   _OSCCON 000FD3         __end_of_caracter 1846  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 0058                   ___wmul 1802  
         __CFG_STVREN$ON 000000                ??___lodiv 0011                ??___lomod 0011  
                 clear_0 1864                   _valor1 0096                   _valor2 0090  
                 pad@buf 0013                ??_comando 0002                   _strlen 17A0  
              ??_busdata 0001                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F                   fputs@s 000A                ??_isdigit 0003  
           __mediumconst 0000                ??_isspace 0003                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   print@a 0006  
                 print@k 000A                   putch@c 0001         __end_of_vfprintf 15A0  
                 utoa@fp 001C                ??_sprintf 0060     __CFG_LS48MHZ$SYS24X4 000000  
             __accesstop 0060  __end_of__initialization 186A            ___rparam_used 000001  
         __pcstackCOMRAM 0001         __CFG_nPWRTEN$OFF 000000            __end_of_begin 16EA  
          __end_of_fputc 13FA            __end_of_fputs 172E            __end_of_print 153E  
          __end_of_putch 1894                  ??_begin 0003                  ??_fputc 0005  
                ??_fputs 000E                  ??_print 0008                  ??_putch 0001  
             __pbssBANK0 0060               _analogRead 172E        __CFG_PLLSEL$PLL4X 000000  
                ?___wmul 0001       __size_of_setCursor 011A       __size_of_registros 0014  
     __size_of_oscilador 000A                  ?_strlen 0001                ?_caracter 0001  
                _OSCCON2 000FD2       __size_of_vfpfcnvrt 03AE         ___lomod@dividend 0001  
             _conversion 0068                  __Hparam 0000                _ADC_begin 17D6  
                __Lparam 0000          __size_of___wmul 0026                  ___lodiv 1170  
                ___lomod 1260                ?_vfprintf 0052             __psmallconst 0800  
                __pcinit 185E                  __ramtop 0800                  __ptext0 1068  
                __ptext1 15FC                  __ptext2 153E                  __ptext3 080E  
                __ptext4 0BBC                  __ptext5 13FA                  __ptext6 17A0  
                __ptext7 16EA                  __ptext8 1330                  __ptext9 1892  
                _comando 1846          __size_of_strlen 0036                  _busdata 15A0  
           __size_of_pad 00C6                  _isdigit 1768               ??_caracter 0003  
                _isspace 164E                  atoi@neg 000E                  _sprintf 15FC  
   end_of_initialization 186A        __end_of_setCursor 1068        __end_of_registros 1888  
                fputc@fp 0003            __Lmediumconst 0000        __end_of_oscilador 1892  
                fputs@fp 000C              ?_analogRead 0001               ?_ADC_begin 0001  
      __end_of_vfpfcnvrt 0BBC                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0058  
                strlen@a 0003                  strlen@s 0001                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94              vfpfcnvrt@ap 0040              vfpfcnvrt@fp 003C  
         __end_of___wmul 1828           __end_of_strlen 17D6      __size_of_analogRead 003A  
    start_initialization 185E          ___lodiv@divisor 0009          ___lodiv@counter 0019  
            __end_of_pad 14C0          __CFG_nLPBOR$OFF 000000              ??_ADC_begin 0001  
            vfprintf@fmt 0054                 ??___wmul 0005                 ??_strlen 0003  
          __pcstackBANK0 00A2        __size_of_caracter 001E                _atoi$1107 0010  
              _atoi$1108 0014                _atoi$1109 0012                 ?___lodiv 0001  
               ?___lomod 0001               setCursor@m 0007               setCursor@n 0008  
             setCursor@x 0009               setCursor@y 0003        __size_of_vfprintf 0062  
               ?_comando 0001          ___lomod@divisor 0009                 ?_busdata 0001  
            __smallconst 0800          ___lomod@counter 0011                 ?_isdigit 0001  
               ?_isspace 0001                caracter@a 0005                caracter@m 0003  
              caracter@n 0004           __size_of_begin 004A                 ?_sprintf 005A  
         __size_of_fputc 00CA           __size_of_fputs 0044           __size_of_print 007E  
         __size_of_putch 0002           ___wmul@product 0005             ??_analogRead 0003  
              _setCursor 0F4E                _registros 1874                _oscilador 1888  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 080E               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 0001  
      __CFG_CFGPLLEN$OFF 000000       __end_of_analogRead 1768             _isspace$1125 0007  
             ?_setCursor 0003               ?_registros 0001                 __Hrparam 0000  
             ?_oscilador 0001               vfprintf@ap 0056                 __Lrparam 0000  
             vfprintf@fp 0052       __CFG_BOREN$SBORDIS 000000          analogRead@canal 0004  
       __size_of___lodiv 00F0         __size_of___lomod 00D0               ?_vfpfcnvrt 003C  
             _ANSELAbits 000F5B               _ANSELBbits 000F5C               _ANSELCbits 000F5D  
       __size_of_comando 0018               sprintf@fmt 005C                 _caracter 1828  
       __size_of_busdata 005C         __size_of_isdigit 0038         __size_of_isspace 0052  
               __ptext10 1260                 __ptext11 1170                 __ptext20 1888  
               __ptext12 0DBE                 __ptext21 16A0                 __ptext13 164E  
               __ptext22 1846                 __ptext14 1768                 __ptext23 15A0  
               __ptext15 1802                 __ptext24 172E                 __ptext16 0F4E  
               __ptext25 17D6                 __ptext17 1874                 __ptext18 14C0  
               __ptext19 1828         __size_of_sprintf 0052            __size_of_atoi 0190  
          __size_of_main 0108            __size_of_utoa 0202                 comando@a 0002  
               _vfprintf 153E                 main@argc 00AC                 main@argv 00AE  
               busdata@a 0001                 isdigit@c 0001                sprintf@ap 00A4  
               isspace@c 0001              ??_setCursor 0004              ??_registros 0001  
            ??_oscilador 0001     __CFG_CPUDIV$NOCLKDIV 000000              ??_vfpfcnvrt 0042  
          _vfpfcnvrt$651 004E            _vfpfcnvrt$652 0050                 sprintf@f 00A6  
               sprintf@s 005A       __CFG_FOSC$INTOSCIO 000000  
