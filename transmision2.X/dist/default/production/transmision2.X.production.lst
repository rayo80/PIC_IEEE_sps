

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Nov 07 01:20:18 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 2.10
    35                           ; Generated 31/07/2019 GMT
    36                           ; 
    37                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F45K50 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	nvBANK0
    70  0000AB                     __pnvBANK0:
    71                           	opt callstack 0
    72  0000AB                     _valor2:
    73                           	opt callstack 0
    74  0000AB                     	ds	2
    75  0000AD                     _valor1:
    76                           	opt callstack 0
    77  0000AD                     	ds	2
    78  0000                     _ANSELCbits	set	3933
    79  0000                     _ANSELBbits	set	3932
    80  0000                     _ANSELAbits	set	3931
    81  0000                     _ANSELD	set	3934
    82  0000                     _ANSELC	set	3933
    83  0000                     _ADRESL	set	4035
    84  0000                     _ADRESH	set	4036
    85  0000                     _ADCON2bits	set	4032
    86  0000                     _ADCON1bits	set	4033
    87  0000                     _ADCON0bits	set	4034
    88  0000                     _TRISBbits	set	3987
    89  0000                     _TRISAbits	set	3986
    90  0000                     _OSCCON2	set	4050
    91  0000                     _OSCCON	set	4051
    92  0000                     _TRISD	set	3989
    93  0000                     _RCREG1	set	4014
    94  0000                     _TXREG1	set	4013
    95  0000                     _RCSTAbits	set	4011
    96  0000                     _SPBRG	set	4015
    97  0000                     _TXSTAbits	set	4012
    98  0000                     _BAUDCONbits	set	4024
    99  0000                     _TRISCbits	set	3988
   100                           
   101                           	psect	smallconst
   102  000800                     __psmallconst:
   103                           	opt callstack 0
   104  000800  00                 	db	0
   105  000801                     STR_3:
   106                           
   107                           ; BSR set to: 15
   108  000801  20                 	db	32
   109  000802  79                 	db	121	;'y'
   110  000803  20                 	db	32
   111  000804  65                 	db	101	;'e'
   112  000805  6C                 	db	108	;'l'
   113  000806  20                 	db	32
   114  000807  00                 	db	0
   115  000808                     STR_1:
   116                           
   117                           ; BSR set to: 15
   118  000808  25                 	db	37
   119  000809  75                 	db	117	;'u'
   120  00080A  00                 	db	0
   121  0000                     
   122                           ; #config settings
   123  00080B  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  001342                     __pcinit:
   127                           	opt callstack 0
   128  001342                     start_initialization:
   129                           	opt callstack 0
   130  001342                     __initialization:
   131                           	opt callstack 0
   132                           
   133                           ; Clear objects allocated to BANK0 (60 bytes)
   134  001342  EE00  F060         	lfsr	0,__pbssBANK0
   135  001346  0E3C               	movlw	60
   136  001348                     clear_0:
   137  001348  6AEE               	clrf	postinc0,c
   138  00134A  06E8               	decf	wreg,f,c
   139  00134C  E1FD               	bnz	clear_0
   140                           
   141                           ; Clear objects allocated to COMRAM (2 bytes)
   142  00134E  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   143  001350  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   144  001352                     end_of_initialization:
   145                           	opt callstack 0
   146  001352                     __end_of__initialization:
   147                           	opt callstack 0
   148  001352  0E00               	movlw	low (__Lmediumconst shr (0+16))
   149  001354  6EF8               	movwf	tblptru,c
   150  001356  0100               	movlb	0
   151  001358  EF9A  F007         	goto	_main	;jump to C main() function
   152                           
   153                           	psect	bssCOMRAM
   154  00005E                     __pbssCOMRAM:
   155                           	opt callstack 0
   156  00005E                     _flags:
   157                           	opt callstack 0
   158  00005E                     	ds	2
   159                           
   160                           	psect	bssBANK0
   161  000060                     __pbssBANK0:
   162                           	opt callstack 0
   163  000060                     _nout:
   164                           	opt callstack 0
   165  000060                     	ds	2
   166  000062                     _width:
   167                           	opt callstack 0
   168  000062                     	ds	2
   169  000064                     _prec:
   170                           	opt callstack 0
   171  000064                     	ds	2
   172  000066                     _conversion:
   173                           	opt callstack 0
   174  000066                     	ds	2
   175  000068                     _dbuf:
   176                           	opt callstack 0
   177  000068                     	ds	32
   178  000088                     _valor2_c:
   179                           	opt callstack 0
   180  000088                     	ds	10
   181  000092                     _valor1_c:
   182                           	opt callstack 0
   183  000092                     	ds	10
   184                           
   185                           	psect	cstackBANK0
   186  00009C                     __pcstackBANK0:
   187                           	opt callstack 0
   188  00009C                     	ds	2
   189  00009E                     sprintf@ap:
   190                           	opt callstack 0
   191                           
   192                           ; 2 bytes @ 0x2
   193  00009E                     	ds	2
   194  0000A0                     sprintf@f:
   195                           	opt callstack 0
   196                           
   197                           ; 6 bytes @ 0x4
   198  0000A0                     	ds	6
   199  0000A6                     
   200                           ; 2 bytes @ 0xA
   201  0000A6                     	ds	2
   202  0000A8                     
   203                           ; 3 bytes @ 0xC
   204  0000A8                     	ds	3
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt callstack 0
   209  000001                     ?_analogRead:
   210                           	opt callstack 0
   211  000001                     ?_strlen:
   212                           	opt callstack 0
   213  000001                     ?___aldiv:
   214                           	opt callstack 0
   215  000001                     ?___lodiv:
   216                           	opt callstack 0
   217  000001                     ?___lomod:
   218                           	opt callstack 0
   219  000001                     fputc@c:
   220                           	opt callstack 0
   221  000001                     strlen@s:
   222                           	opt callstack 0
   223  000001                     ___aldiv@dividend:
   224                           	opt callstack 0
   225  000001                     ___lodiv@dividend:
   226                           	opt callstack 0
   227  000001                     ___lomod@dividend:
   228                           	opt callstack 0
   229                           
   230                           ; 8 bytes @ 0x0
   231  000001                     	ds	2
   232  000003                     ??_analogRead:
   233  000003                     fputc@fp:
   234                           	opt callstack 0
   235  000003                     strlen@a:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x2
   239  000003                     	ds	1
   240  000004                     analogRead@canal:
   241                           	opt callstack 0
   242                           
   243                           ; 1 bytes @ 0x3
   244  000004                     	ds	1
   245  000005                     ??_fputc:
   246  000005                     strcpy@dest:
   247                           	opt callstack 0
   248  000005                     ___aldiv@divisor:
   249                           	opt callstack 0
   250                           
   251                           ; 4 bytes @ 0x4
   252  000005                     	ds	2
   253  000007                     strcpy@src:
   254                           	opt callstack 0
   255                           
   256                           ; 2 bytes @ 0x6
   257  000007                     	ds	2
   258  000009                     ??_strcpy:
   259  000009                     ___aldiv@counter:
   260                           	opt callstack 0
   261  000009                     ___lodiv@divisor:
   262                           	opt callstack 0
   263  000009                     ___lomod@divisor:
   264                           	opt callstack 0
   265                           
   266                           ; 8 bytes @ 0x8
   267  000009                     	ds	1
   268  00000A                     ___aldiv@sign:
   269                           	opt callstack 0
   270  00000A                     fputs@s:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0x9
   274  00000A                     	ds	1
   275  00000B                     strcpy@s:
   276                           	opt callstack 0
   277  00000B                     ___aldiv@quotient:
   278                           	opt callstack 0
   279                           
   280                           ; 4 bytes @ 0xA
   281  00000B                     	ds	1
   282  00000C                     fputs@fp:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0xB
   286  00000C                     	ds	1
   287  00000D                     strcpy@d:
   288                           	opt callstack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00000D                     	ds	1
   292  00000E                     fputs@c:
   293                           	opt callstack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00000E                     	ds	1
   297  00000F                     fputs@i:
   298                           	opt callstack 0
   299  00000F                     strcat@dest:
   300                           	opt callstack 0
   301  00000F                     serial_begin@baudios:
   302                           	opt callstack 0
   303                           
   304                           ; 4 bytes @ 0xE
   305  00000F                     	ds	2
   306  000011                     ?_pad:
   307                           	opt callstack 0
   308  000011                     ___lomod@counter:
   309                           	opt callstack 0
   310  000011                     pad@fp:
   311                           	opt callstack 0
   312  000011                     strcat@src:
   313                           	opt callstack 0
   314  000011                     ___lodiv@quotient:
   315                           	opt callstack 0
   316                           
   317                           ; 8 bytes @ 0x10
   318  000011                     	ds	2
   319  000013                     pad@buf:
   320                           	opt callstack 0
   321  000013                     _serial_begin$1454:
   322                           	opt callstack 0
   323                           
   324                           ; 4 bytes @ 0x12
   325  000013                     	ds	2
   326  000015                     pad@p:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0x14
   330  000015                     	ds	2
   331  000017                     ??_pad:
   332                           
   333                           ; 1 bytes @ 0x16
   334  000017                     	ds	1
   335  000018                     pad@i:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x17
   339  000018                     	ds	1
   340  000019                     ___lodiv@counter:
   341                           	opt callstack 0
   342                           
   343                           ; 1 bytes @ 0x18
   344  000019                     	ds	1
   345  00001A                     pad@w:
   346                           	opt callstack 0
   347                           
   348                           ; 2 bytes @ 0x19
   349  00001A                     	ds	2
   350  00001C                     ?_utoa:
   351                           	opt callstack 0
   352  00001C                     utoa@fp:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x1B
   356  00001C                     	ds	2
   357  00001E                     utoa@d:
   358                           	opt callstack 0
   359                           
   360                           ; 8 bytes @ 0x1D
   361  00001E                     	ds	8
   362  000026                     ??_utoa:
   363                           
   364                           ; 1 bytes @ 0x25
   365  000026                     	ds	8
   366  00002E                     utoa@p:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x2D
   370  00002E                     	ds	2
   371  000030                     utoa@w:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x2F
   375  000030                     	ds	2
   376  000032                     utoa@n:
   377                           	opt callstack 0
   378                           
   379                           ; 8 bytes @ 0x31
   380  000032                     	ds	8
   381  00003A                     utoa@i:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x39
   385  00003A                     	ds	2
   386  00003C                     ?_vfpfcnvrt:
   387                           	opt callstack 0
   388  00003C                     vfpfcnvrt@fp:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x3B
   392  00003C                     	ds	2
   393  00003E                     vfpfcnvrt@fmt:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x3D
   397  00003E                     	ds	2
   398  000040                     vfpfcnvrt@ap:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0x3F
   402  000040                     	ds	2
   403  000042                     ??_vfpfcnvrt:
   404                           
   405                           ; 1 bytes @ 0x41
   406  000042                     	ds	4
   407  000046                     vfpfcnvrt@llu:
   408                           	opt callstack 0
   409                           
   410                           ; 8 bytes @ 0x45
   411  000046                     	ds	8
   412  00004E                     ?_vfprintf:
   413                           	opt callstack 0
   414  00004E                     vfprintf@fp:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x4D
   418  00004E                     	ds	2
   419  000050                     vfprintf@fmt:
   420                           	opt callstack 0
   421                           
   422                           ; 2 bytes @ 0x4F
   423  000050                     	ds	2
   424  000052                     vfprintf@ap:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x51
   428  000052                     	ds	2
   429  000054                     vfprintf@cfmt:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x53
   433  000054                     	ds	2
   434  000056                     ?_sprintf:
   435                           	opt callstack 0
   436  000056                     sprintf@s:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x55
   440  000056                     	ds	2
   441  000058                     sprintf@fmt:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x57
   445  000058                     	ds	4
   446  00005C                     ??_main:
   447                           
   448                           ; 1 bytes @ 0x5B
   449  00005C                     	ds	2
   450                           
   451 ;;
   452 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   453 ;;
   454 ;; *************** function _main *****************
   455 ;; Defined at:
   456 ;;		line 19 in file "main.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;  argc            2   10[BANK0 ] int 
   459 ;;  argv            3   12[BANK0 ] PTR PTR unsigned char 
   460 ;; Auto vars:     Size  Location     Type
   461 ;;		None
   462 ;; Return value:  Size  Location     Type
   463 ;;                  2   10[BANK0 ] int 
   464 ;; Registers used:
   465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   471 ;;      Params:         0       5       0       0       0       0       0       0       0
   472 ;;      Locals:         0       0       0       0       0       0       0       0       0
   473 ;;      Temps:          2       0       0       0       0       0       0       0       0
   474 ;;      Totals:         2       5       0       0       0       0       0       0       0
   475 ;;Total ram usage:        7 bytes
   476 ;; Hardware stack levels required when called:    8
   477 ;; This function calls:
   478 ;;		_ADC_begin
   479 ;;		_analogRead
   480 ;;		_oscilador
   481 ;;		_serial_begin
   482 ;;		_sprintf
   483 ;;		_strcat
   484 ;; This function is called by:
   485 ;;		Startup code after reset
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           	psect	text0
   490  000F34                     __ptext0:
   491                           	opt callstack 0
   492  000F34                     _main:
   493                           	opt callstack 23
   494  000F34                     
   495                           ;main.c: 20:     ANSELC=0;
   496  000F34  0E00               	movlw	0
   497  000F36  010F               	movlb	15	; () banked
   498  000F38  6F5D               	movwf	93,b	;volatile
   499                           
   500                           ;main.c: 21:     ANSELD=0;
   501  000F3A  0E00               	movlw	0
   502  000F3C  6F5E               	movwf	94,b	;volatile
   503                           
   504                           ;main.c: 22:     TRISD=0;
   505  000F3E  0E00               	movlw	0
   506  000F40  6E95               	movwf	149,c	;volatile
   507  000F42                     
   508                           ; BSR set to: 15
   509                           ;main.c: 23:     oscilador();
   510  000F42  ECAE  F009         	call	_oscilador	;wreg free
   511  000F46                     
   512                           ;main.c: 24:     serial_begin(9600);
   513  000F46  0E80               	movlw	128
   514  000F48  6E0F               	movwf	serial_begin@baudios^0,c
   515  000F4A  0E25               	movlw	37
   516  000F4C  6E10               	movwf	(serial_begin@baudios+1)^0,c
   517  000F4E  0E00               	movlw	0
   518  000F50  6E11               	movwf	(serial_begin@baudios+2)^0,c
   519  000F52  0E00               	movlw	0
   520  000F54  6E12               	movwf	(serial_begin@baudios+3)^0,c
   521  000F56  EC5D  F008         	call	_serial_begin	;wreg free
   522  000F5A                     
   523                           ;main.c: 25:     ADC_begin();
   524  000F5A  EC78  F009         	call	_ADC_begin	;wreg free
   525  000F5E                     l1496:
   526                           
   527                           ;main.c: 29:         valor1=analogRead(0b00000);
   528  000F5E  0E00               	movlw	0
   529  000F60  EC40  F009         	call	_analogRead
   530  000F64  C001  F0AD         	movff	?_analogRead,_valor1
   531  000F68  C002  F0AE         	movff	?_analogRead+1,_valor1+1
   532  000F6C                     
   533                           ;main.c: 30:         valor2=analogRead(0b01100);
   534  000F6C  0E0C               	movlw	12
   535  000F6E  EC40  F009         	call	_analogRead
   536  000F72  C001  F0AB         	movff	?_analogRead,_valor2
   537  000F76  C002  F0AC         	movff	?_analogRead+1,_valor2+1
   538  000F7A                     
   539                           ;main.c: 31:         sprintf(valor1_c,"%u",valor1);
   540  000F7A  0E92               	movlw	low _valor1_c
   541  000F7C  6E56               	movwf	sprintf@s^0,c
   542  000F7E  0E00               	movlw	high _valor1_c
   543  000F80  6E57               	movwf	(sprintf@s+1)^0,c
   544  000F82  0E08               	movlw	low STR_1
   545  000F84  6E58               	movwf	sprintf@fmt^0,c
   546  000F86  0E08               	movlw	high STR_1
   547  000F88  6E59               	movwf	(sprintf@fmt+1)^0,c
   548  000F8A  C0AD  F05A         	movff	_valor1,?_sprintf+4
   549  000F8E  C0AE  F05B         	movff	_valor1+1,?_sprintf+5
   550  000F92  ECF5  F008         	call	_sprintf	;wreg free
   551  000F96                     
   552                           ;main.c: 32:         sprintf(valor2_c,"%u",valor2);
   553  000F96  0E88               	movlw	low _valor2_c
   554  000F98  6E56               	movwf	sprintf@s^0,c
   555  000F9A  0E00               	movlw	high _valor2_c
   556  000F9C  6E57               	movwf	(sprintf@s+1)^0,c
   557  000F9E  0E08               	movlw	low STR_1
   558  000FA0  6E58               	movwf	sprintf@fmt^0,c
   559  000FA2  0E08               	movlw	high STR_1
   560  000FA4  6E59               	movwf	(sprintf@fmt+1)^0,c
   561  000FA6  C0AB  F05A         	movff	_valor2,?_sprintf+4
   562  000FAA  C0AC  F05B         	movff	_valor2+1,?_sprintf+5
   563  000FAE  ECF5  F008         	call	_sprintf	;wreg free
   564  000FB2                     
   565                           ;main.c: 35:         strcat(valor1_c," y el ");
   566  000FB2  0E92               	movlw	low _valor1_c
   567  000FB4  6E0F               	movwf	strcat@dest^0,c
   568  000FB6  0E00               	movlw	high _valor1_c
   569  000FB8  6E10               	movwf	(strcat@dest+1)^0,c
   570  000FBA  0E01               	movlw	low STR_3
   571  000FBC  6E11               	movwf	strcat@src^0,c
   572  000FBE  0E08               	movlw	high STR_3
   573  000FC0  6E12               	movwf	(strcat@src+1)^0,c
   574  000FC2  EC8E  F009         	call	_strcat	;wreg free
   575  000FC6                     
   576                           ;main.c: 36:         strcat(valor1_c,valor2_c);
   577  000FC6  0E92               	movlw	low _valor1_c
   578  000FC8  6E0F               	movwf	strcat@dest^0,c
   579  000FCA  0E00               	movlw	high _valor1_c
   580  000FCC  6E10               	movwf	(strcat@dest+1)^0,c
   581  000FCE  0E88               	movlw	low _valor2_c
   582  000FD0  6E11               	movwf	strcat@src^0,c
   583  000FD2  0E00               	movlw	high _valor2_c
   584  000FD4  6E12               	movwf	(strcat@src+1)^0,c
   585  000FD6  EC8E  F009         	call	_strcat	;wreg free
   586  000FDA                     
   587                           ;main.c: 39:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   588  000FDA  0E0B               	movlw	11
   589  000FDC  6E5D               	movwf	(??_main+1)^0,c
   590  000FDE  0E26               	movlw	38
   591  000FE0  6E5C               	movwf	??_main^0,c
   592  000FE2  0E5E               	movlw	94
   593  000FE4                     u777:
   594  000FE4  2EE8               	decfsz	wreg,f,c
   595  000FE6  D7FE               	bra	u777
   596  000FE8  2E5C               	decfsz	??_main^0,f,c
   597  000FEA  D7FC               	bra	u777
   598  000FEC  2E5D               	decfsz	(??_main+1)^0,f,c
   599  000FEE  D7FA               	bra	u777
   600  000FF0  EFAF  F007         	goto	l1496
   601  000FF4  EF00  F000         	goto	start
   602  000FF8                     __end_of_main:
   603                           	opt callstack 0
   604                           
   605 ;; *************** function _strcat *****************
   606 ;; Defined at:
   607 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcat.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;  dest            2   14[COMRAM] PTR unsigned char 
   610 ;;		 -> valor1_c(10), 
   611 ;;  src             2   16[COMRAM] PTR const unsigned char 
   612 ;;		 -> STR_3(7), valor2_c(10), 
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  2   14[COMRAM] PTR unsigned char 
   617 ;; Registers used:
   618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   624 ;;      Params:         4       0       0       0       0       0       0       0       0
   625 ;;      Locals:         0       0       0       0       0       0       0       0       0
   626 ;;      Temps:          0       0       0       0       0       0       0       0       0
   627 ;;      Totals:         4       0       0       0       0       0       0       0       0
   628 ;;Total ram usage:        4 bytes
   629 ;; Hardware stack levels used:    1
   630 ;; Hardware stack levels required when called:    1
   631 ;; This function calls:
   632 ;;		_strcpy
   633 ;;		_strlen
   634 ;; This function is called by:
   635 ;;		_main
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text1
   640  00131C                     __ptext1:
   641                           	opt callstack 0
   642  00131C                     _strcat:
   643                           	opt callstack 29
   644  00131C  C00F  F001         	movff	strcat@dest,strlen@s
   645  001320  C010  F002         	movff	strcat@dest+1,strlen@s+1
   646  001324  EC5D  F009         	call	_strlen	;wreg free
   647  001328  5001               	movf	?_strlen^0,w,c
   648  00132A  240F               	addwf	strcat@dest^0,w,c
   649  00132C  6E05               	movwf	strcpy@dest^0,c
   650  00132E  5002               	movf	(?_strlen+1)^0,w,c
   651  001330  2010               	addwfc	(strcat@dest+1)^0,w,c
   652  001332  6E06               	movwf	(strcpy@dest+1)^0,c
   653  001334  C011  F007         	movff	strcat@src,strcpy@src
   654  001338  C012  F008         	movff	strcat@src+1,strcpy@src+1
   655  00133C  ECC7  F008         	call	_strcpy	;wreg free
   656  001340  0012               	return		;funcret
   657  001342                     __end_of_strcat:
   658                           	opt callstack 0
   659                           
   660 ;; *************** function _strcpy *****************
   661 ;; Defined at:
   662 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcpy.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;  dest            2    4[COMRAM] PTR unsigned char 
   665 ;;		 -> valor1_c(10), 
   666 ;;  src             2    6[COMRAM] PTR const unsigned char 
   667 ;;		 -> STR_3(7), valor2_c(10), 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  d               2   12[COMRAM] PTR unsigned char 
   670 ;;		 -> valor1_c(10), 
   671 ;;  s               2   10[COMRAM] PTR const unsigned char 
   672 ;;		 -> STR_3(7), valor2_c(10), 
   673 ;; Return value:  Size  Location     Type
   674 ;;                  2    4[COMRAM] PTR unsigned char 
   675 ;; Registers used:
   676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   682 ;;      Params:         4       0       0       0       0       0       0       0       0
   683 ;;      Locals:         4       0       0       0       0       0       0       0       0
   684 ;;      Temps:          2       0       0       0       0       0       0       0       0
   685 ;;      Totals:        10       0       0       0       0       0       0       0       0
   686 ;;Total ram usage:       10 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_strcat
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text2
   696  00118E                     __ptext2:
   697                           	opt callstack 0
   698  00118E                     _strcpy:
   699                           	opt callstack 29
   700  00118E  C007  F00B         	movff	strcpy@src,strcpy@s
   701  001192  C008  F00C         	movff	strcpy@src+1,strcpy@s+1
   702  001196  C005  F00D         	movff	strcpy@dest,strcpy@d
   703  00119A  C006  F00E         	movff	strcpy@dest+1,strcpy@d+1
   704  00119E                     l1430:
   705  00119E  500B               	movf	strcpy@s^0,w,c
   706  0011A0  6E09               	movwf	??_strcpy^0,c
   707  0011A2  500C               	movf	(strcpy@s+1)^0,w,c
   708  0011A4  6E0A               	movwf	(??_strcpy+1)^0,c
   709  0011A6  4A0B               	infsnz	strcpy@s^0,f,c
   710  0011A8  2A0C               	incf	(strcpy@s+1)^0,f,c
   711  0011AA  C009  FFF6         	movff	??_strcpy,tblptrl
   712  0011AE  C00A  FFF7         	movff	??_strcpy+1,tblptrh
   713  0011B2  6AF8               	clrf	tblptru,c
   714  0011B4  C00D  FFD9         	movff	strcpy@d,fsr2l
   715  0011B8  C00E  FFDA         	movff	strcpy@d+1,fsr2h
   716  0011BC  4A0D               	infsnz	strcpy@d^0,f,c
   717  0011BE  2A0E               	incf	(strcpy@d+1)^0,f,c
   718  0011C0  0E07               	movlw	(high __ramtop+-1)
   719  0011C2  64F7               	cpfsgt	tblptrh,c
   720  0011C4  D003               	bra	u747
   721  0011C6  0008               	tblrd		*
   722  0011C8  50F5               	movf	tablat,w,c
   723  0011CA  D005               	bra	u740
   724  0011CC                     u747:
   725  0011CC  CFF6 FFE1          	movff	tblptrl,fsr1l
   726  0011D0  CFF7 FFE2          	movff	tblptrh,fsr1h
   727  0011D4  50E7               	movf	indf1,w,c
   728  0011D6                     u740:
   729  0011D6  6EDF               	movwf	indf2,c
   730  0011D8  50DF               	movf	indf2,w,c
   731  0011DA  A4D8               	btfss	status,2,c
   732  0011DC  EFF2  F008         	goto	u751
   733  0011E0  EFF4  F008         	goto	u750
   734  0011E4                     u751:
   735  0011E4  EFCF  F008         	goto	l1430
   736  0011E8                     u750:
   737  0011E8  0012               	return		;funcret
   738  0011EA                     __end_of_strcpy:
   739                           	opt callstack 0
   740                           
   741 ;; *************** function _sprintf *****************
   742 ;; Defined at:
   743 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  s               2   85[COMRAM] PTR unsigned char 
   746 ;;		 -> valor2_c(10), valor1_c(10), 
   747 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   748 ;;		 -> STR_2(3), STR_1(3), 
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  f               6    4[BANK0 ] struct _IO_FILE
   751 ;;  ap              2    2[BANK0 ] PTR void [1]
   752 ;;		 -> ?_sprintf(2), 
   753 ;;  ret             2    0        int 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  2   85[COMRAM] int 
   756 ;; Registers used:
   757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   763 ;;      Params:         6       0       0       0       0       0       0       0       0
   764 ;;      Locals:         0      10       0       0       0       0       0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0       0       0
   766 ;;      Totals:         6      10       0       0       0       0       0       0       0
   767 ;;Total ram usage:       16 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    7
   770 ;; This function calls:
   771 ;;		_vfprintf
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text3
   778  0011EA                     __ptext3:
   779                           	opt callstack 0
   780  0011EA                     _sprintf:
   781                           	opt callstack 23
   782  0011EA  0E5A               	movlw	low (?_sprintf+4)
   783  0011EC  0100               	movlb	0	; () banked
   784  0011EE  6F9E               	movwf	sprintf@ap& (0+255),b
   785  0011F0  0E00               	movlw	high (?_sprintf+4)
   786  0011F2  6F9F               	movwf	(sprintf@ap+1)& (0+255),b
   787  0011F4  C056  F0A0         	movff	sprintf@s,sprintf@f
   788  0011F8  C057  F0A1         	movff	sprintf@s+1,sprintf@f+1
   789  0011FC                     
   790                           ; BSR set to: 0
   791  0011FC  0E00               	movlw	0
   792  0011FE  6FA3               	movwf	(sprintf@f+3)& (0+255),b
   793  001200  0E00               	movlw	0
   794  001202  6FA2               	movwf	(sprintf@f+2)& (0+255),b
   795  001204                     
   796                           ; BSR set to: 0
   797  001204  0E00               	movlw	0
   798  001206  6FA5               	movwf	(sprintf@f+5)& (0+255),b
   799  001208  0E00               	movlw	0
   800  00120A  6FA4               	movwf	(sprintf@f+4)& (0+255),b
   801  00120C                     
   802                           ; BSR set to: 0
   803  00120C  0EA0               	movlw	low sprintf@f
   804  00120E  6E4E               	movwf	vfprintf@fp^0,c
   805  001210  0E00               	movlw	high sprintf@f
   806  001212  6E4F               	movwf	(vfprintf@fp+1)^0,c
   807  001214  C058  F050         	movff	sprintf@fmt,vfprintf@fmt
   808  001218  C059  F051         	movff	sprintf@fmt+1,vfprintf@fmt+1
   809  00121C  0E9E               	movlw	low sprintf@ap
   810  00121E  6E52               	movwf	vfprintf@ap^0,c
   811  001220  0E00               	movlw	high sprintf@ap
   812  001222  6E53               	movwf	(vfprintf@ap+1)^0,c
   813  001224  EC96  F008         	call	_vfprintf	;wreg free
   814  001228  0100               	movlb	0	; () banked
   815  00122A  51A2               	movf	(sprintf@f+2)& (0+255),w,b
   816  00122C  2456               	addwf	sprintf@s^0,w,c
   817  00122E  6ED9               	movwf	fsr2l,c
   818  001230  51A3               	movf	(sprintf@f+3)& (0+255),w,b
   819  001232  2057               	addwfc	(sprintf@s+1)^0,w,c
   820  001234  6EDA               	movwf	fsr2h,c
   821  001236  0E00               	movlw	0
   822  001238  6EDF               	movwf	indf2,c
   823  00123A                     
   824                           ; BSR set to: 0
   825  00123A  0012               	return		;funcret
   826  00123C                     __end_of_sprintf:
   827                           	opt callstack 0
   828                           
   829 ;; *************** function _vfprintf *****************
   830 ;; Defined at:
   831 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  fp              2   77[COMRAM] PTR struct _IO_FILE
   834 ;;		 -> sprintf@f(6), 
   835 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
   836 ;;		 -> STR_2(3), STR_1(3), 
   837 ;;  ap              2   81[COMRAM] PTR PTR void 
   838 ;;		 -> sprintf@ap(2), 
   839 ;; Auto vars:     Size  Location     Type
   840 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
   841 ;;		 -> STR_2(3), STR_1(3), 
   842 ;; Return value:  Size  Location     Type
   843 ;;                  2   77[COMRAM] int 
   844 ;; Registers used:
   845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   851 ;;      Params:         6       0       0       0       0       0       0       0       0
   852 ;;      Locals:         2       0       0       0       0       0       0       0       0
   853 ;;      Temps:          0       0       0       0       0       0       0       0       0
   854 ;;      Totals:         8       0       0       0       0       0       0       0       0
   855 ;;Total ram usage:        8 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    6
   858 ;; This function calls:
   859 ;;		_vfpfcnvrt
   860 ;; This function is called by:
   861 ;;		_sprintf
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text4
   866  00112C                     __ptext4:
   867                           	opt callstack 0
   868  00112C                     _vfprintf:
   869                           	opt callstack 23
   870  00112C                     
   871                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   872  00112C  C050  F054         	movff	vfprintf@fmt,vfprintf@cfmt
   873  001130  C051  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   874  001134                     
   875                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   876  001134  0E00               	movlw	0
   877  001136  0100               	movlb	0	; () banked
   878  001138  6F61               	movwf	(_nout+1)& (0+255),b
   879  00113A  0E00               	movlw	0
   880  00113C  6F60               	movwf	_nout& (0+255),b
   881                           
   882                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   883  00113E  EFB4  F008         	goto	l1382
   884  001142                     l1380:
   885                           
   886                           ; BSR set to: 0
   887                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   888  001142  C04E  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   889  001146  C04F  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   890  00114A  0E54               	movlw	low vfprintf@cfmt
   891  00114C  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   892  00114E  0E00               	movlw	high vfprintf@cfmt
   893  001150  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   894  001152  C052  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   895  001156  C053  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   896  00115A  EC06  F005         	call	_vfpfcnvrt	;wreg free
   897  00115E  503C               	movf	?_vfpfcnvrt^0,w,c
   898  001160  0100               	movlb	0	; () banked
   899  001162  2760               	addwf	_nout& (0+255),f,b
   900  001164  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   901  001166  2361               	addwfc	(_nout+1)& (0+255),f,b
   902  001168                     l1382:
   903                           
   904                           ; BSR set to: 0
   905                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   906  001168  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
   907  00116C  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   908  001170                     	if	0	;tblptru may be non-zero
   909  001170                     	endif
   910  001170                     	if	0	;tblptru may be non-zero
   911  001170                     	endif
   912  001170  0008               	tblrd		*
   913  001172  50F5               	movf	tablat,w,c
   914  001174  0900               	iorlw	0
   915  001176  A4D8               	btfss	status,2,c
   916  001178  EFC0  F008         	goto	u671
   917  00117C  EFC2  F008         	goto	u670
   918  001180                     u671:
   919  001180  EFA1  F008         	goto	l1380
   920  001184                     u670:
   921  001184                     
   922                           ; BSR set to: 0
   923                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   924  001184  C060  F04E         	movff	_nout,?_vfprintf
   925  001188  C061  F04F         	movff	_nout+1,?_vfprintf+1
   926  00118C                     
   927                           ; BSR set to: 0
   928  00118C  0012               	return		;funcret
   929  00118E                     __end_of_vfprintf:
   930                           	opt callstack 0
   931                           
   932 ;; *************** function _vfpfcnvrt *****************
   933 ;; Defined at:
   934 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   937 ;;		 -> sprintf@f(6), 
   938 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   939 ;;		 -> vfprintf@cfmt(2), 
   940 ;;  ap              2   63[COMRAM] PTR PTR void 
   941 ;;		 -> sprintf@ap(2), 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  llu             8   69[COMRAM] unsigned long long 
   944 ;;  ll              8    0        long long 
   945 ;;  f               4    0        long long 
   946 ;;  vp              3    0        PTR void 
   947 ;;  ct              3    0        unsigned char [3]
   948 ;;  cp              3    0        PTR unsigned char 
   949 ;;  i               2    0        int 
   950 ;;  done            2    0        int 
   951 ;;  c               1    0        unsigned char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2   59[COMRAM] int 
   954 ;; Registers used:
   955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         6       0       0       0       0       0       0       0       0
   962 ;;      Locals:         8       0       0       0       0       0       0       0       0
   963 ;;      Temps:          4       0       0       0       0       0       0       0       0
   964 ;;      Totals:        18       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:       18 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    5
   968 ;; This function calls:
   969 ;;		_fputc
   970 ;;		_utoa
   971 ;; This function is called by:
   972 ;;		_vfprintf
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text5
   977  000A0C                     __ptext5:
   978                           	opt callstack 0
   979  000A0C                     _vfpfcnvrt:
   980                           	opt callstack 23
   981  000A0C                     
   982                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   983  000A0C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   984  000A10  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   985  000A14  CFDE FFF6          	movff	postinc2,tblptrl
   986  000A18  CFDD FFF7          	movff	postdec2,tblptrh
   987  000A1C                     	if	0	;tblptru may be non-zero
   988  000A1C                     	endif
   989  000A1C                     	if	0	;tblptru may be non-zero
   990  000A1C                     	endif
   991  000A1C  0008               	tblrd		*
   992  000A1E  50F5               	movf	tablat,w,c
   993  000A20  0A25               	xorlw	37
   994  000A22  A4D8               	btfss	status,2,c
   995  000A24  EF16  F005         	goto	u641
   996  000A28  EF18  F005         	goto	u640
   997  000A2C                     u641:
   998  000A2C  EFB3  F005         	goto	l1368
   999  000A30                     u640:
  1000  000A30                     
  1001                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1002  000A30  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1003  000A34  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1004  000A38  2ADE               	incf	postinc2,f,c
  1005  000A3A  0E00               	movlw	0
  1006  000A3C  22DD               	addwfc	postdec2,f,c
  1007  000A3E                     
  1008                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1009  000A3E  0E00               	movlw	0
  1010  000A40  0100               	movlb	0	; () banked
  1011  000A42  6F63               	movwf	(_width+1)& (0+255),b
  1012  000A44  0E00               	movlw	0
  1013  000A46  6F62               	movwf	_width& (0+255),b
  1014  000A48  C062  F05E         	movff	_width,_flags
  1015  000A4C  C063  F05F         	movff	_width+1,_flags+1
  1016  000A50                     
  1017                           ; BSR set to: 0
  1018                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1019  000A50  6964               	setf	_prec& (0+255),b
  1020  000A52  6965               	setf	(_prec+1)& (0+255),b
  1021  000A54                     
  1022                           ; BSR set to: 0
  1023                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1024  000A54  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1025  000A58  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1026  000A5C  CFDE FFF6          	movff	postinc2,tblptrl
  1027  000A60  CFDD FFF7          	movff	postdec2,tblptrh
  1028  000A64                     	if	0	;tblptru may be non-zero
  1029  000A64                     	endif
  1030  000A64                     	if	0	;tblptru may be non-zero
  1031  000A64                     	endif
  1032  000A64  0008               	tblrd		*
  1033  000A66  50F5               	movf	tablat,w,c
  1034  000A68  0A75               	xorlw	117
  1035  000A6A  A4D8               	btfss	status,2,c
  1036  000A6C  EF3A  F005         	goto	u651
  1037  000A70  EF3C  F005         	goto	u650
  1038  000A74                     u651:
  1039  000A74  EF7D  F005         	goto	l1352
  1040  000A78                     u650:
  1041  000A78                     
  1042                           ; BSR set to: 0
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1044  000A78  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045  000A7C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046  000A80  2ADE               	incf	postinc2,f,c
  1047  000A82  0E00               	movlw	0
  1048  000A84  22DD               	addwfc	postdec2,f,c
  1049                           
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1051  000A86  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1052  000A8A  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1053  000A8E  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1054  000A92  0E02               	movlw	2
  1055  000A94  26DE               	addwf	postinc2,f,c
  1056  000A96  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1057  000A9A  0E00               	movlw	0
  1058  000A9C  22DD               	addwfc	postdec2,f,c
  1059  000A9E  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1060  000AA2  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1061  000AA6  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
  1062  000AAA  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
  1063  000AAE  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1064  000AB2  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1065  000AB6  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
  1066  000AB8  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
  1067  000ABA  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
  1068  000ABC  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
  1069  000ABE  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
  1070  000AC0  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
  1071  000AC2                     
  1072                           ; BSR set to: 0
  1073                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1074  000AC2  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
  1075  000AC6  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1076  000ACA  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1077  000ACE  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1078  000AD2  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1079  000AD6  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1080  000ADA  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1081  000ADE  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1082  000AE2  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1083  000AE6  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1084  000AEA  EC06  F004         	call	_utoa	;wreg free
  1085  000AEE  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1086  000AF2  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1087  000AF6  EFCE  F005         	goto	l158
  1088  000AFA                     l1352:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1092  000AFA  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1093  000AFE  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1094  000B02  CFDE FFF6          	movff	postinc2,tblptrl
  1095  000B06  CFDD FFF7          	movff	postdec2,tblptrh
  1096  000B0A                     	if	0	;tblptru may be non-zero
  1097  000B0A                     	endif
  1098  000B0A                     	if	0	;tblptru may be non-zero
  1099  000B0A                     	endif
  1100  000B0A  0008               	tblrd		*
  1101  000B0C  50F5               	movf	tablat,w,c
  1102  000B0E  0A25               	xorlw	37
  1103  000B10  A4D8               	btfss	status,2,c
  1104  000B12  EF8D  F005         	goto	u661
  1105  000B16  EF8F  F005         	goto	u660
  1106  000B1A                     u661:
  1107  000B1A  EFA6  F005         	goto	l1362
  1108  000B1E                     u660:
  1109  000B1E                     
  1110                           ; BSR set to: 0
  1111                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1112  000B1E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1113  000B22  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1114  000B26  2ADE               	incf	postinc2,f,c
  1115  000B28  0E00               	movlw	0
  1116  000B2A  22DD               	addwfc	postdec2,f,c
  1117  000B2C                     
  1118                           ; BSR set to: 0
  1119                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1120  000B2C  0E00               	movlw	0
  1121  000B2E  6E02               	movwf	(fputc@c+1)^0,c
  1122  000B30  0E25               	movlw	37
  1123  000B32  6E01               	movwf	fputc@c^0,c
  1124  000B34  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1125  000B38  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1126  000B3C  EC35  F007         	call	_fputc	;wreg free
  1127  000B40                     l1358:
  1128                           
  1129                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1130  000B40  0E00               	movlw	0
  1131  000B42  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1132  000B44  0E01               	movlw	1
  1133  000B46  6E3C               	movwf	?_vfpfcnvrt^0,c
  1134  000B48  EFCE  F005         	goto	l158
  1135  000B4C                     l1362:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1139  000B4C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1140  000B50  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1141  000B54  2ADE               	incf	postinc2,f,c
  1142  000B56  0E00               	movlw	0
  1143  000B58  22DD               	addwfc	postdec2,f,c
  1144  000B5A                     
  1145                           ; BSR set to: 0
  1146                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1147  000B5A  0E00               	movlw	0
  1148  000B5C  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1149  000B5E  0E00               	movlw	0
  1150  000B60  6E3C               	movwf	?_vfpfcnvrt^0,c
  1151  000B62  EFCE  F005         	goto	l158
  1152  000B66                     l1368:
  1153                           
  1154                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1155  000B66  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1156  000B6A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1157  000B6E  CFDE FFF6          	movff	postinc2,tblptrl
  1158  000B72  CFDD FFF7          	movff	postdec2,tblptrh
  1159  000B76                     	if	0	;tblptru may be non-zero
  1160  000B76                     	endif
  1161  000B76                     	if	0	;tblptru may be non-zero
  1162  000B76                     	endif
  1163  000B76  0008               	tblrd		*
  1164  000B78  50F5               	movf	tablat,w,c
  1165  000B7A  6E01               	movwf	fputc@c^0,c
  1166  000B7C  6A02               	clrf	(fputc@c+1)^0,c
  1167  000B7E  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1168  000B82  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1169  000B86  EC35  F007         	call	_fputc	;wreg free
  1170  000B8A                     
  1171                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1172  000B8A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1173  000B8E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1174  000B92  2ADE               	incf	postinc2,f,c
  1175  000B94  0E00               	movlw	0
  1176  000B96  22DD               	addwfc	postdec2,f,c
  1177  000B98  EFA0  F005         	goto	l1358
  1178  000B9C                     l158:
  1179  000B9C  0012               	return		;funcret
  1180  000B9E                     __end_of_vfpfcnvrt:
  1181                           	opt callstack 0
  1182                           
  1183 ;; *************** function _utoa *****************
  1184 ;; Defined at:
  1185 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1188 ;;		 -> sprintf@f(6), 
  1189 ;;  d               8   29[COMRAM] unsigned long long 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  n               8   49[COMRAM] unsigned long long 
  1192 ;;  i               2   57[COMRAM] int 
  1193 ;;  w               2   47[COMRAM] int 
  1194 ;;  p               2   45[COMRAM] int 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  2   27[COMRAM] int 
  1197 ;; Registers used:
  1198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1204 ;;      Params:        10       0       0       0       0       0       0       0       0
  1205 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1206 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1207 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1208 ;;Total ram usage:       32 bytes
  1209 ;; Hardware stack levels used:    1
  1210 ;; Hardware stack levels required when called:    4
  1211 ;; This function calls:
  1212 ;;		___lodiv
  1213 ;;		___lomod
  1214 ;;		_pad
  1215 ;; This function is called by:
  1216 ;;		_vfpfcnvrt
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text6
  1221  00080C                     __ptext6:
  1222                           	opt callstack 0
  1223  00080C                     _utoa:
  1224                           	opt callstack 23
  1225  00080C                     
  1226                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1227  00080C  0100               	movlb	0	; () banked
  1228  00080E  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1229  000810  EF0C  F004         	goto	u571
  1230  000814  EF0E  F004         	goto	u570
  1231  000818                     u571:
  1232  000818  EF0F  F004         	goto	l1304
  1233  00081C                     u570:
  1234  00081C                     
  1235                           ; BSR set to: 0
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1237  00081C  925E               	bcf	_flags^0,1,c
  1238  00081E                     l1304:
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1242  00081E  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1243  000820  EF1C  F004         	goto	u580
  1244  000824  5165               	movf	(_prec+1)& (0+255),w,b
  1245  000826  E106               	bnz	u581
  1246  000828  0564               	decf	_prec& (0+255),w,b
  1247  00082A  B0D8               	btfsc	status,0,c
  1248  00082C  EF1A  F004         	goto	u581
  1249  000830  EF1C  F004         	goto	u580
  1250  000834                     u581:
  1251  000834  EF22  F004         	goto	l143
  1252  000838                     u580:
  1253  000838                     
  1254                           ; BSR set to: 0
  1255  000838  0E00               	movlw	0
  1256  00083A  6E2F               	movwf	(utoa@p+1)^0,c
  1257  00083C  0E01               	movlw	1
  1258  00083E  6E2E               	movwf	utoa@p^0,c
  1259  000840  EF26  F004         	goto	l145
  1260  000844                     l143:
  1261                           
  1262                           ; BSR set to: 0
  1263  000844  C064  F02E         	movff	_prec,utoa@p
  1264  000848  C065  F02F         	movff	_prec+1,utoa@p+1
  1265  00084C                     l145:
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1269  00084C  C062  F030         	movff	_width,utoa@w
  1270  000850  C063  F031         	movff	_width+1,utoa@w+1
  1271                           
  1272                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1273  000854  C01E  F032         	movff	utoa@d,utoa@n
  1274  000858  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1275  00085C  C020  F034         	movff	utoa@d+2,utoa@n+2
  1276  000860  C021  F035         	movff	utoa@d+3,utoa@n+3
  1277  000864  C022  F036         	movff	utoa@d+4,utoa@n+4
  1278  000868  C023  F037         	movff	utoa@d+5,utoa@n+5
  1279  00086C  C024  F038         	movff	utoa@d+6,utoa@n+6
  1280  000870  C025  F039         	movff	utoa@d+7,utoa@n+7
  1281  000874                     
  1282                           ; BSR set to: 0
  1283                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1284  000874  0E00               	movlw	0
  1285  000876  6E3B               	movwf	(utoa@i+1)^0,c
  1286  000878  0E1F               	movlw	31
  1287  00087A  6E3A               	movwf	utoa@i^0,c
  1288  00087C                     
  1289                           ; BSR set to: 0
  1290                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1291  00087C  0E00               	movlw	0
  1292  00087E  6F87               	movwf	(_dbuf+31)& (0+255),b
  1293                           
  1294                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1295  000880  EFB8  F004         	goto	l1322
  1296  000884                     l1312:
  1297                           
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1299  000884  063A               	decf	utoa@i^0,f,c
  1300  000886  A0D8               	btfss	status,0,c
  1301  000888  063B               	decf	(utoa@i+1)^0,f,c
  1302  00088A                     
  1303                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1304  00088A  0E68               	movlw	low _dbuf
  1305  00088C  243A               	addwf	utoa@i^0,w,c
  1306  00088E  6ED9               	movwf	fsr2l,c
  1307  000890  0E00               	movlw	high _dbuf
  1308  000892  203B               	addwfc	(utoa@i+1)^0,w,c
  1309  000894  6EDA               	movwf	fsr2h,c
  1310  000896  C032  F001         	movff	utoa@n,___lomod@dividend
  1311  00089A  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1312  00089E  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1313  0008A2  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1314  0008A6  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1315  0008AA  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1316  0008AE  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1317  0008B2  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1318  0008B6  0E0A               	movlw	10
  1319  0008B8  6E09               	movwf	___lomod@divisor^0,c
  1320  0008BA  0E00               	movlw	0
  1321  0008BC  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1322  0008BE  0E00               	movlw	0
  1323  0008C0  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1324  0008C2  0E00               	movlw	0
  1325  0008C4  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1326  0008C6  0E00               	movlw	0
  1327  0008C8  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1328  0008CA  0E00               	movlw	0
  1329  0008CC  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1330  0008CE  0E00               	movlw	0
  1331  0008D0  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1332  0008D2  0E00               	movlw	0
  1333  0008D4  6E10               	movwf	(___lomod@divisor+7)^0,c
  1334  0008D6  ECCD  F006         	call	___lomod	;wreg free
  1335  0008DA  C001  F026         	movff	?___lomod,??_utoa
  1336  0008DE  C002  F027         	movff	?___lomod+1,??_utoa+1
  1337  0008E2  C003  F028         	movff	?___lomod+2,??_utoa+2
  1338  0008E6  C004  F029         	movff	?___lomod+3,??_utoa+3
  1339  0008EA  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1340  0008EE  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1341  0008F2  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1342  0008F6  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1343  0008FA  5026               	movf	??_utoa^0,w,c
  1344  0008FC  0F30               	addlw	48
  1345  0008FE  6EDF               	movwf	indf2,c
  1346  000900                     
  1347                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1348  000900  062E               	decf	utoa@p^0,f,c
  1349  000902  A0D8               	btfss	status,0,c
  1350  000904  062F               	decf	(utoa@p+1)^0,f,c
  1351  000906                     
  1352                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1353  000906  0630               	decf	utoa@w^0,f,c
  1354  000908  A0D8               	btfss	status,0,c
  1355  00090A  0631               	decf	(utoa@w+1)^0,f,c
  1356  00090C                     
  1357                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1358  00090C  C032  F001         	movff	utoa@n,___lodiv@dividend
  1359  000910  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1360  000914  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1361  000918  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1362  00091C  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1363  000920  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1364  000924  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1365  000928  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1366  00092C  0E0A               	movlw	10
  1367  00092E  6E09               	movwf	___lodiv@divisor^0,c
  1368  000930  0E00               	movlw	0
  1369  000932  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1370  000934  0E00               	movlw	0
  1371  000936  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1372  000938  0E00               	movlw	0
  1373  00093A  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1374  00093C  0E00               	movlw	0
  1375  00093E  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1376  000940  0E00               	movlw	0
  1377  000942  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1378  000944  0E00               	movlw	0
  1379  000946  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1380  000948  0E00               	movlw	0
  1381  00094A  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1382  00094C  EC55  F006         	call	___lodiv	;wreg free
  1383  000950  C001  F032         	movff	?___lodiv,utoa@n
  1384  000954  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1385  000958  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1386  00095C  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1387  000960  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1388  000964  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1389  000968  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1390  00096C  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1391  000970                     l1322:
  1392                           
  1393                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1394  000970  503A               	movf	utoa@i^0,w,c
  1395  000972  103B               	iorwf	(utoa@i+1)^0,w,c
  1396  000974  B4D8               	btfsc	status,2,c
  1397  000976  EFBF  F004         	goto	u591
  1398  00097A  EFC1  F004         	goto	u590
  1399  00097E                     u591:
  1400  00097E  EFF1  F004         	goto	l1332
  1401  000982                     u590:
  1402  000982  5032               	movf	utoa@n^0,w,c
  1403  000984  1033               	iorwf	(utoa@n+1)^0,w,c
  1404  000986  1034               	iorwf	(utoa@n+2)^0,w,c
  1405  000988  1035               	iorwf	(utoa@n+3)^0,w,c
  1406  00098A  1036               	iorwf	(utoa@n+4)^0,w,c
  1407  00098C  1037               	iorwf	(utoa@n+5)^0,w,c
  1408  00098E  1038               	iorwf	(utoa@n+6)^0,w,c
  1409  000990  1039               	iorwf	(utoa@n+7)^0,w,c
  1410  000992  A4D8               	btfss	status,2,c
  1411  000994  EFCE  F004         	goto	u601
  1412  000998  EFD0  F004         	goto	u600
  1413  00099C                     u601:
  1414  00099C  EF42  F004         	goto	l1312
  1415  0009A0                     u600:
  1416  0009A0  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1417  0009A2  EFDD  F004         	goto	u610
  1418  0009A6  502F               	movf	(utoa@p+1)^0,w,c
  1419  0009A8  E106               	bnz	u611
  1420  0009AA  042E               	decf	utoa@p^0,w,c
  1421  0009AC  B0D8               	btfsc	status,0,c
  1422  0009AE  EFDB  F004         	goto	u611
  1423  0009B2  EFDD  F004         	goto	u610
  1424  0009B6                     u611:
  1425  0009B6  EF42  F004         	goto	l1312
  1426  0009BA                     u610:
  1427  0009BA  BE31               	btfsc	(utoa@w+1)^0,7,c
  1428  0009BC  EFE8  F004         	goto	u621
  1429  0009C0  5031               	movf	(utoa@w+1)^0,w,c
  1430  0009C2  E108               	bnz	u620
  1431  0009C4  0430               	decf	utoa@w^0,w,c
  1432  0009C6  A0D8               	btfss	status,0,c
  1433  0009C8  EFE8  F004         	goto	u621
  1434  0009CC  EFEA  F004         	goto	u620
  1435  0009D0                     u621:
  1436  0009D0  EFF1  F004         	goto	l1332
  1437  0009D4                     u620:
  1438  0009D4  B25E               	btfsc	_flags^0,1,c
  1439  0009D6  EFEF  F004         	goto	u631
  1440  0009DA  EFF1  F004         	goto	u630
  1441  0009DE                     u631:
  1442  0009DE  EF42  F004         	goto	l1312
  1443  0009E2                     u630:
  1444  0009E2                     l1332:
  1445                           
  1446                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1447  0009E2  C01C  F011         	movff	utoa@fp,pad@fp
  1448  0009E6  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1449  0009EA  0E68               	movlw	low _dbuf
  1450  0009EC  243A               	addwf	utoa@i^0,w,c
  1451  0009EE  6E13               	movwf	pad@buf^0,c
  1452  0009F0  0E00               	movlw	high _dbuf
  1453  0009F2  203B               	addwfc	(utoa@i+1)^0,w,c
  1454  0009F4  6E14               	movwf	(pad@buf+1)^0,c
  1455  0009F6  C030  F015         	movff	utoa@w,pad@p
  1456  0009FA  C031  F016         	movff	utoa@w+1,pad@p+1
  1457  0009FE  ECFC  F007         	call	_pad	;wreg free
  1458  000A02  C011  F01C         	movff	?_pad,?_utoa
  1459  000A06  C012  F01D         	movff	?_pad+1,?_utoa+1
  1460  000A0A  0012               	return		;funcret
  1461  000A0C                     __end_of_utoa:
  1462                           	opt callstack 0
  1463                           
  1464 ;; *************** function _pad *****************
  1465 ;; Defined at:
  1466 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1469 ;;		 -> sprintf@f(6), 
  1470 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1471 ;;		 -> dbuf(32), 
  1472 ;;  p               2   20[COMRAM] int 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  w               2   25[COMRAM] int 
  1475 ;;  i               2   23[COMRAM] int 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2   16[COMRAM] int 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1485 ;;      Params:         6       0       0       0       0       0       0       0       0
  1486 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1487 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1488 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1489 ;;Total ram usage:       11 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    3
  1492 ;; This function calls:
  1493 ;;		_fputc
  1494 ;;		_fputs
  1495 ;;		_strlen
  1496 ;; This function is called by:
  1497 ;;		_utoa
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text7
  1502  000FF8                     __ptext7:
  1503                           	opt callstack 0
  1504  000FF8                     _pad:
  1505                           	opt callstack 23
  1506  000FF8                     
  1507                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1508  000FF8  A05E               	btfss	_flags^0,0,c
  1509  000FFA  EF01  F008         	goto	u461
  1510  000FFE  EF03  F008         	goto	u460
  1511  001002                     u461:
  1512  001002  EF0D  F008         	goto	l1244
  1513  001006                     u460:
  1514  001006                     
  1515                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1516  001006  C013  F00A         	movff	pad@buf,fputs@s
  1517  00100A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1518  00100E  C011  F00C         	movff	pad@fp,fputs@fp
  1519  001012  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1520  001016  EC1E  F009         	call	_fputs	;wreg free
  1521  00101A                     l1244:
  1522                           
  1523                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1524  00101A  BE16               	btfsc	(pad@p+1)^0,7,c
  1525  00101C  EF12  F008         	goto	u471
  1526  001020  EF14  F008         	goto	u470
  1527  001024                     u471:
  1528  001024  EF1A  F008         	goto	l1248
  1529  001028                     u470:
  1530  001028  C015  F01A         	movff	pad@p,pad@w
  1531  00102C  C016  F01B         	movff	pad@p+1,pad@w+1
  1532  001030  EF1E  F008         	goto	l133
  1533  001034                     l1248:
  1534  001034  0E00               	movlw	0
  1535  001036  6E1B               	movwf	(pad@w+1)^0,c
  1536  001038  0E00               	movlw	0
  1537  00103A  6E1A               	movwf	pad@w^0,c
  1538  00103C                     l133:
  1539                           
  1540                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1541  00103C  0E00               	movlw	0
  1542  00103E  6E19               	movwf	(pad@i+1)^0,c
  1543  001040  0E00               	movlw	0
  1544  001042  6E18               	movwf	pad@i^0,c
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1547  001044  EF30  F008         	goto	l1254
  1548  001048                     l1250:
  1549                           
  1550                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1551  001048  0E00               	movlw	0
  1552  00104A  6E02               	movwf	(fputc@c+1)^0,c
  1553  00104C  0E20               	movlw	32
  1554  00104E  6E01               	movwf	fputc@c^0,c
  1555  001050  C011  F003         	movff	pad@fp,fputc@fp
  1556  001054  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1557  001058  EC35  F007         	call	_fputc	;wreg free
  1558  00105C                     
  1559                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1560  00105C  4A18               	infsnz	pad@i^0,f,c
  1561  00105E  2A19               	incf	(pad@i+1)^0,f,c
  1562  001060                     l1254:
  1563                           
  1564                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1565  001060  501A               	movf	pad@w^0,w,c
  1566  001062  5C18               	subwf	pad@i^0,w,c
  1567  001064  5019               	movf	(pad@i+1)^0,w,c
  1568  001066  0A80               	xorlw	128
  1569  001068  6E17               	movwf	??_pad^0,c
  1570  00106A  501B               	movf	(pad@w+1)^0,w,c
  1571  00106C  0A80               	xorlw	128
  1572  00106E  5817               	subwfb	??_pad^0,w,c
  1573  001070  A0D8               	btfss	status,0,c
  1574  001072  EF3D  F008         	goto	u481
  1575  001076  EF3F  F008         	goto	u480
  1576  00107A                     u481:
  1577  00107A  EF24  F008         	goto	l1250
  1578  00107E                     u480:
  1579  00107E                     
  1580                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1581  00107E  B05E               	btfsc	_flags^0,0,c
  1582  001080  EF44  F008         	goto	u491
  1583  001084  EF46  F008         	goto	u490
  1584  001088                     u491:
  1585  001088  EF50  F008         	goto	l1258
  1586  00108C                     u490:
  1587  00108C                     
  1588                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1589  00108C  C013  F00A         	movff	pad@buf,fputs@s
  1590  001090  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1591  001094  C011  F00C         	movff	pad@fp,fputs@fp
  1592  001098  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1593  00109C  EC1E  F009         	call	_fputs	;wreg free
  1594  0010A0                     l1258:
  1595                           
  1596                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1597  0010A0  C013  F001         	movff	pad@buf,strlen@s
  1598  0010A4  C014  F002         	movff	pad@buf+1,strlen@s+1
  1599  0010A8  EC5D  F009         	call	_strlen	;wreg free
  1600  0010AC  501A               	movf	pad@w^0,w,c
  1601  0010AE  2401               	addwf	?_strlen^0,w,c
  1602  0010B0  6E11               	movwf	?_pad^0,c
  1603  0010B2  501B               	movf	(pad@w+1)^0,w,c
  1604  0010B4  2002               	addwfc	(?_strlen+1)^0,w,c
  1605  0010B6  6E12               	movwf	(?_pad+1)^0,c
  1606  0010B8  0012               	return		;funcret
  1607  0010BA                     __end_of_pad:
  1608                           	opt callstack 0
  1609                           
  1610 ;; *************** function _strlen *****************
  1611 ;; Defined at:
  1612 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1615 ;;		 -> dbuf(32), valor1_c(10), 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1618 ;;		 -> dbuf(32), valor1_c(10), 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  2    0[COMRAM] unsigned int 
  1621 ;; Registers used:
  1622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1628 ;;      Params:         2       0       0       0       0       0       0       0       0
  1629 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1631 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1632 ;;Total ram usage:        4 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_pad
  1638 ;;		_strcat
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text8
  1643  0012BA                     __ptext8:
  1644                           	opt callstack 0
  1645  0012BA                     _strlen:
  1646                           	opt callstack 29
  1647  0012BA  C001  F003         	movff	strlen@s,strlen@a
  1648  0012BE  C002  F004         	movff	strlen@s+1,strlen@a+1
  1649  0012C2  EF65  F009         	goto	l1234
  1650  0012C6                     l1232:
  1651  0012C6  4A01               	infsnz	strlen@s^0,f,c
  1652  0012C8  2A02               	incf	(strlen@s+1)^0,f,c
  1653  0012CA                     l1234:
  1654  0012CA  C001  FFD9         	movff	strlen@s,fsr2l
  1655  0012CE  C002  FFDA         	movff	strlen@s+1,fsr2h
  1656  0012D2  50DF               	movf	indf2,w,c
  1657  0012D4  A4D8               	btfss	status,2,c
  1658  0012D6  EF6F  F009         	goto	u451
  1659  0012DA  EF71  F009         	goto	u450
  1660  0012DE                     u451:
  1661  0012DE  EF63  F009         	goto	l1232
  1662  0012E2                     u450:
  1663  0012E2  5003               	movf	strlen@a^0,w,c
  1664  0012E4  5C01               	subwf	strlen@s^0,w,c
  1665  0012E6  6E01               	movwf	?_strlen^0,c
  1666  0012E8  5004               	movf	(strlen@a+1)^0,w,c
  1667  0012EA  5802               	subwfb	(strlen@s+1)^0,w,c
  1668  0012EC  6E02               	movwf	(?_strlen+1)^0,c
  1669  0012EE  0012               	return		;funcret
  1670  0012F0                     __end_of_strlen:
  1671                           	opt callstack 0
  1672                           
  1673 ;; *************** function _fputs *****************
  1674 ;; Defined at:
  1675 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1678 ;;		 -> dbuf(32), 
  1679 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1680 ;;		 -> sprintf@f(6), 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  i               2   14[COMRAM] int 
  1683 ;;  c               1   13[COMRAM] unsigned char 
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  2    9[COMRAM] int 
  1686 ;; Registers used:
  1687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1693 ;;      Params:         4       0       0       0       0       0       0       0       0
  1694 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1696 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1697 ;;Total ram usage:        7 bytes
  1698 ;; Hardware stack levels used:    1
  1699 ;; Hardware stack levels required when called:    2
  1700 ;; This function calls:
  1701 ;;		_fputc
  1702 ;; This function is called by:
  1703 ;;		_pad
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text9
  1708  00123C                     __ptext9:
  1709                           	opt callstack 0
  1710  00123C                     _fputs:
  1711                           	opt callstack 23
  1712  00123C  0E00               	movlw	0
  1713  00123E  6E10               	movwf	(fputs@i+1)^0,c
  1714  001240  0E00               	movlw	0
  1715  001242  6E0F               	movwf	fputs@i^0,c
  1716  001244  EF2F  F009         	goto	l1228
  1717  001248                     l1224:
  1718  001248  C00E  F001         	movff	fputs@c,fputc@c
  1719  00124C  6A02               	clrf	(fputc@c+1)^0,c
  1720  00124E  C00C  F003         	movff	fputs@fp,fputc@fp
  1721  001252  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1722  001256  EC35  F007         	call	_fputc	;wreg free
  1723  00125A  4A0F               	infsnz	fputs@i^0,f,c
  1724  00125C  2A10               	incf	(fputs@i+1)^0,f,c
  1725  00125E                     l1228:
  1726  00125E  500F               	movf	fputs@i^0,w,c
  1727  001260  240A               	addwf	fputs@s^0,w,c
  1728  001262  6ED9               	movwf	fsr2l,c
  1729  001264  5010               	movf	(fputs@i+1)^0,w,c
  1730  001266  200B               	addwfc	(fputs@s+1)^0,w,c
  1731  001268  6EDA               	movwf	fsr2h,c
  1732  00126A  50DF               	movf	indf2,w,c
  1733  00126C  6E0E               	movwf	fputs@c^0,c
  1734  00126E  500E               	movf	fputs@c^0,w,c
  1735  001270  A4D8               	btfss	status,2,c
  1736  001272  EF3D  F009         	goto	u441
  1737  001276  EF3F  F009         	goto	u440
  1738  00127A                     u441:
  1739  00127A  EF24  F009         	goto	l1224
  1740  00127E                     u440:
  1741  00127E  0012               	return		;funcret
  1742  001280                     __end_of_fputs:
  1743                           	opt callstack 0
  1744                           
  1745 ;; *************** function _fputc *****************
  1746 ;; Defined at:
  1747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  c               2    0[COMRAM] int 
  1750 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1751 ;;		 -> sprintf@f(6), 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  2    0[COMRAM] int 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1763 ;;      Params:         4       0       0       0       0       0       0       0       0
  1764 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1765 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1766 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1767 ;;Total ram usage:        9 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    1
  1770 ;; This function calls:
  1771 ;;		_putch
  1772 ;; This function is called by:
  1773 ;;		_pad
  1774 ;;		_vfpfcnvrt
  1775 ;;		_fputs
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text10
  1780  000E6A                     __ptext10:
  1781                           	opt callstack 0
  1782  000E6A                     _fputc:
  1783                           	opt callstack 23
  1784  000E6A  5003               	movf	fputc@fp^0,w,c
  1785  000E6C  1004               	iorwf	(fputc@fp+1)^0,w,c
  1786  000E6E  B4D8               	btfsc	status,2,c
  1787  000E70  EF3C  F007         	goto	u401
  1788  000E74  EF3E  F007         	goto	u400
  1789  000E78                     u401:
  1790  000E78  EF47  F007         	goto	l1212
  1791  000E7C                     u400:
  1792  000E7C  5003               	movf	fputc@fp^0,w,c
  1793  000E7E  1004               	iorwf	(fputc@fp+1)^0,w,c
  1794  000E80  A4D8               	btfss	status,2,c
  1795  000E82  EF45  F007         	goto	u411
  1796  000E86  EF47  F007         	goto	u410
  1797  000E8A                     u411:
  1798  000E8A  EF4C  F007         	goto	l1214
  1799  000E8E                     u410:
  1800  000E8E                     l1212:
  1801  000E8E  5001               	movf	fputc@c^0,w,c
  1802  000E90  ECB3  F009         	call	_putch
  1803  000E94  EF99  F007         	goto	l851
  1804  000E98                     l1214:
  1805  000E98  EE20 F004          	lfsr	2,4
  1806  000E9C  5003               	movf	fputc@fp^0,w,c
  1807  000E9E  26D9               	addwf	fsr2l,f,c
  1808  000EA0  5004               	movf	(fputc@fp+1)^0,w,c
  1809  000EA2  22DA               	addwfc	fsr2h,f,c
  1810  000EA4  50DE               	movf	postinc2,w,c
  1811  000EA6  10DE               	iorwf	postinc2,w,c
  1812  000EA8  B4D8               	btfsc	status,2,c
  1813  000EAA  EF59  F007         	goto	u421
  1814  000EAE  EF5B  F007         	goto	u420
  1815  000EB2                     u421:
  1816  000EB2  EF76  F007         	goto	l1218
  1817  000EB6                     u420:
  1818  000EB6  EE20 F004          	lfsr	2,4
  1819  000EBA  5003               	movf	fputc@fp^0,w,c
  1820  000EBC  26D9               	addwf	fsr2l,f,c
  1821  000EBE  5004               	movf	(fputc@fp+1)^0,w,c
  1822  000EC0  22DA               	addwfc	fsr2h,f,c
  1823  000EC2  EE10 F002          	lfsr	1,2
  1824  000EC6  5003               	movf	fputc@fp^0,w,c
  1825  000EC8  26E1               	addwf	fsr1l,f,c
  1826  000ECA  5004               	movf	(fputc@fp+1)^0,w,c
  1827  000ECC  22E2               	addwfc	fsr1h,f,c
  1828  000ECE  50DE               	movf	postinc2,w,c
  1829  000ED0  5CE6               	subwf	postinc1,w,c
  1830  000ED2  50E6               	movf	postinc1,w,c
  1831  000ED4  0A80               	xorlw	128
  1832  000ED6  6E09               	movwf	(??_fputc+4)^0,c
  1833  000ED8  50DE               	movf	postinc2,w,c
  1834  000EDA  0A80               	xorlw	128
  1835  000EDC  5809               	subwfb	(??_fputc+4)^0,w,c
  1836  000EDE  B0D8               	btfsc	status,0,c
  1837  000EE0  EF74  F007         	goto	u431
  1838  000EE4  EF76  F007         	goto	u430
  1839  000EE8                     u431:
  1840  000EE8  EF99  F007         	goto	l851
  1841  000EEC                     u430:
  1842  000EEC                     l1218:
  1843  000EEC  EE20 F002          	lfsr	2,2
  1844  000EF0  5003               	movf	fputc@fp^0,w,c
  1845  000EF2  26D9               	addwf	fsr2l,f,c
  1846  000EF4  5004               	movf	(fputc@fp+1)^0,w,c
  1847  000EF6  22DA               	addwfc	fsr2h,f,c
  1848  000EF8  CFDE F005          	movff	postinc2,??_fputc
  1849  000EFC  CFDD F006          	movff	postdec2,??_fputc+1
  1850  000F00  C003  FFD9         	movff	fputc@fp,fsr2l
  1851  000F04  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1852  000F08  CFDE F007          	movff	postinc2,??_fputc+2
  1853  000F0C  CFDD F008          	movff	postdec2,??_fputc+3
  1854  000F10  5005               	movf	??_fputc^0,w,c
  1855  000F12  2407               	addwf	(??_fputc+2)^0,w,c
  1856  000F14  6ED9               	movwf	fsr2l,c
  1857  000F16  5006               	movf	(??_fputc+1)^0,w,c
  1858  000F18  2008               	addwfc	(??_fputc+3)^0,w,c
  1859  000F1A  6EDA               	movwf	fsr2h,c
  1860  000F1C  C001  FFDF         	movff	fputc@c,indf2
  1861  000F20  EE20 F002          	lfsr	2,2
  1862  000F24  5003               	movf	fputc@fp^0,w,c
  1863  000F26  26D9               	addwf	fsr2l,f,c
  1864  000F28  5004               	movf	(fputc@fp+1)^0,w,c
  1865  000F2A  22DA               	addwfc	fsr2h,f,c
  1866  000F2C  2ADE               	incf	postinc2,f,c
  1867  000F2E  0E00               	movlw	0
  1868  000F30  22DD               	addwfc	postdec2,f,c
  1869  000F32                     l851:
  1870  000F32  0012               	return		;funcret
  1871  000F34                     __end_of_fputc:
  1872                           	opt callstack 0
  1873                           
  1874 ;; *************** function _putch *****************
  1875 ;; Defined at:
  1876 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  c               1    wreg     unsigned char 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  c               1    0[COMRAM] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1890 ;;      Params:         0       0       0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1893 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_fputc
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text11
  1904  001366                     __ptext11:
  1905                           	opt callstack 0
  1906  001366                     _putch:
  1907                           	opt callstack 23
  1908  001366  0012               	return		;funcret
  1909  001368                     __end_of_putch:
  1910                           	opt callstack 0
  1911                           
  1912 ;; *************** function ___lomod *****************
  1913 ;; Defined at:
  1914 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lomod.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  dividend        8    0[COMRAM] unsigned long long 
  1917 ;;  divisor         8    8[COMRAM] unsigned long long 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  counter         1   16[COMRAM] unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  8    0[COMRAM] unsigned long long 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1929 ;;      Params:        16       0       0       0       0       0       0       0       0
  1930 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1932 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1933 ;;Total ram usage:       17 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_utoa
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text12
  1943  000D9A                     __ptext12:
  1944                           	opt callstack 0
  1945  000D9A                     ___lomod:
  1946                           	opt callstack 26
  1947  000D9A  5009               	movf	___lomod@divisor^0,w,c
  1948  000D9C  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  1949  000D9E  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  1950  000DA0  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  1951  000DA2  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  1952  000DA4  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  1953  000DA6  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  1954  000DA8  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  1955  000DAA  B4D8               	btfsc	status,2,c
  1956  000DAC  EFDA  F006         	goto	u541
  1957  000DB0  EFDC  F006         	goto	u540
  1958  000DB4                     u541:
  1959  000DB4  EF24  F007         	goto	l616
  1960  000DB8                     u540:
  1961  000DB8  0E01               	movlw	1
  1962  000DBA  6E11               	movwf	___lomod@counter^0,c
  1963  000DBC  EFEA  F006         	goto	l1290
  1964  000DC0                     l1288:
  1965  000DC0  90D8               	bcf	status,0,c
  1966  000DC2  3609               	rlcf	___lomod@divisor^0,f,c
  1967  000DC4  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  1968  000DC6  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  1969  000DC8  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  1970  000DCA  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  1971  000DCC  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  1972  000DCE  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  1973  000DD0  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  1974  000DD2  2A11               	incf	___lomod@counter^0,f,c
  1975  000DD4                     l1290:
  1976  000DD4  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  1977  000DD6  EFEF  F006         	goto	u551
  1978  000DDA  EFF1  F006         	goto	u550
  1979  000DDE                     u551:
  1980  000DDE  EFE0  F006         	goto	l1288
  1981  000DE2                     u550:
  1982  000DE2                     l1292:
  1983  000DE2  5009               	movf	___lomod@divisor^0,w,c
  1984  000DE4  5C01               	subwf	___lomod@dividend^0,w,c
  1985  000DE6  500A               	movf	(___lomod@divisor+1)^0,w,c
  1986  000DE8  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  1987  000DEA  500B               	movf	(___lomod@divisor+2)^0,w,c
  1988  000DEC  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  1989  000DEE  500C               	movf	(___lomod@divisor+3)^0,w,c
  1990  000DF0  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  1991  000DF2  500D               	movf	(___lomod@divisor+4)^0,w,c
  1992  000DF4  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  1993  000DF6  500E               	movf	(___lomod@divisor+5)^0,w,c
  1994  000DF8  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  1995  000DFA  500F               	movf	(___lomod@divisor+6)^0,w,c
  1996  000DFC  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  1997  000DFE  5010               	movf	(___lomod@divisor+7)^0,w,c
  1998  000E00  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  1999  000E02  A0D8               	btfss	status,0,c
  2000  000E04  EF06  F007         	goto	u561
  2001  000E08  EF08  F007         	goto	u560
  2002  000E0C                     u561:
  2003  000E0C  EF18  F007         	goto	l1296
  2004  000E10                     u560:
  2005  000E10  5009               	movf	___lomod@divisor^0,w,c
  2006  000E12  5E01               	subwf	___lomod@dividend^0,f,c
  2007  000E14  500A               	movf	(___lomod@divisor+1)^0,w,c
  2008  000E16  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  2009  000E18  500B               	movf	(___lomod@divisor+2)^0,w,c
  2010  000E1A  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  2011  000E1C  500C               	movf	(___lomod@divisor+3)^0,w,c
  2012  000E1E  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  2013  000E20  500D               	movf	(___lomod@divisor+4)^0,w,c
  2014  000E22  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  2015  000E24  500E               	movf	(___lomod@divisor+5)^0,w,c
  2016  000E26  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  2017  000E28  500F               	movf	(___lomod@divisor+6)^0,w,c
  2018  000E2A  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  2019  000E2C  5010               	movf	(___lomod@divisor+7)^0,w,c
  2020  000E2E  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  2021  000E30                     l1296:
  2022  000E30  90D8               	bcf	status,0,c
  2023  000E32  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  2024  000E34  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  2025  000E36  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  2026  000E38  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  2027  000E3A  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  2028  000E3C  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  2029  000E3E  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  2030  000E40  3209               	rrcf	___lomod@divisor^0,f,c
  2031  000E42  2E11               	decfsz	___lomod@counter^0,f,c
  2032  000E44  EFF1  F006         	goto	l1292
  2033  000E48                     l616:
  2034  000E48  C001  F001         	movff	___lomod@dividend,?___lomod
  2035  000E4C  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2036  000E50  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2037  000E54  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2038  000E58  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2039  000E5C  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2040  000E60  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2041  000E64  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2042  000E68  0012               	return		;funcret
  2043  000E6A                     __end_of___lomod:
  2044                           	opt callstack 0
  2045                           
  2046 ;; *************** function ___lodiv *****************
  2047 ;; Defined at:
  2048 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lodiv.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  dividend        8    0[COMRAM] unsigned long long 
  2051 ;;  divisor         8    8[COMRAM] unsigned long long 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  quotient        8   16[COMRAM] unsigned long long 
  2054 ;;  counter         1   24[COMRAM] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  8    0[COMRAM] unsigned long long 
  2057 ;; Registers used:
  2058 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2064 ;;      Params:        16       0       0       0       0       0       0       0       0
  2065 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2067 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2068 ;;Total ram usage:       25 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; This function calls:
  2071 ;;		Nothing
  2072 ;; This function is called by:
  2073 ;;		_utoa
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text13
  2078  000CAA                     __ptext13:
  2079                           	opt callstack 0
  2080  000CAA                     ___lodiv:
  2081                           	opt callstack 26
  2082  000CAA  EE20  F011         	lfsr	2,___lodiv@quotient
  2083  000CAE  0E07               	movlw	7
  2084  000CB0                     u501:
  2085  000CB0  6ADE               	clrf	postinc2,c
  2086  000CB2  06E8               	decf	wreg,f,c
  2087  000CB4  E2FD               	bc	u501
  2088  000CB6  5009               	movf	___lodiv@divisor^0,w,c
  2089  000CB8  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2090  000CBA  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2091  000CBC  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2092  000CBE  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2093  000CC0  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2094  000CC2  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2095  000CC4  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2096  000CC6  B4D8               	btfsc	status,2,c
  2097  000CC8  EF68  F006         	goto	u511
  2098  000CCC  EF6A  F006         	goto	u510
  2099  000CD0                     u511:
  2100  000CD0  EFBC  F006         	goto	l606
  2101  000CD4                     u510:
  2102  000CD4  0E01               	movlw	1
  2103  000CD6  6E19               	movwf	___lodiv@counter^0,c
  2104  000CD8  EF78  F006         	goto	l1270
  2105  000CDC                     l1268:
  2106  000CDC  90D8               	bcf	status,0,c
  2107  000CDE  3609               	rlcf	___lodiv@divisor^0,f,c
  2108  000CE0  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2109  000CE2  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2110  000CE4  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2111  000CE6  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2112  000CE8  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2113  000CEA  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2114  000CEC  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2115  000CEE  2A19               	incf	___lodiv@counter^0,f,c
  2116  000CF0                     l1270:
  2117  000CF0  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2118  000CF2  EF7D  F006         	goto	u521
  2119  000CF6  EF7F  F006         	goto	u520
  2120  000CFA                     u521:
  2121  000CFA  EF6E  F006         	goto	l1268
  2122  000CFE                     u520:
  2123  000CFE                     l1272:
  2124  000CFE  90D8               	bcf	status,0,c
  2125  000D00  3611               	rlcf	___lodiv@quotient^0,f,c
  2126  000D02  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2127  000D04  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2128  000D06  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2129  000D08  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2130  000D0A  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2131  000D0C  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2132  000D0E  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2133  000D10  5009               	movf	___lodiv@divisor^0,w,c
  2134  000D12  5C01               	subwf	___lodiv@dividend^0,w,c
  2135  000D14  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2136  000D16  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2137  000D18  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2138  000D1A  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2139  000D1C  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2140  000D1E  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2141  000D20  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2142  000D22  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2143  000D24  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2144  000D26  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2145  000D28  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2146  000D2A  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2147  000D2C  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2148  000D2E  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2149  000D30  A0D8               	btfss	status,0,c
  2150  000D32  EF9D  F006         	goto	u531
  2151  000D36  EF9F  F006         	goto	u530
  2152  000D3A                     u531:
  2153  000D3A  EFB0  F006         	goto	l1280
  2154  000D3E                     u530:
  2155  000D3E  5009               	movf	___lodiv@divisor^0,w,c
  2156  000D40  5E01               	subwf	___lodiv@dividend^0,f,c
  2157  000D42  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2158  000D44  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2159  000D46  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2160  000D48  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2161  000D4A  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2162  000D4C  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2163  000D4E  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2164  000D50  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2165  000D52  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2166  000D54  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2167  000D56  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2168  000D58  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2169  000D5A  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2170  000D5C  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2171  000D5E  8011               	bsf	___lodiv@quotient^0,0,c
  2172  000D60                     l1280:
  2173  000D60  90D8               	bcf	status,0,c
  2174  000D62  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2175  000D64  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2176  000D66  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2177  000D68  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2178  000D6A  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2179  000D6C  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2180  000D6E  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2181  000D70  3209               	rrcf	___lodiv@divisor^0,f,c
  2182  000D72  2E19               	decfsz	___lodiv@counter^0,f,c
  2183  000D74  EF7F  F006         	goto	l1272
  2184  000D78                     l606:
  2185  000D78  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2186  000D7C  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2187  000D80  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2188  000D84  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2189  000D88  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2190  000D8C  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2191  000D90  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2192  000D94  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2193  000D98  0012               	return		;funcret
  2194  000D9A                     __end_of___lodiv:
  2195                           	opt callstack 0
  2196                           
  2197 ;; *************** function _serial_begin *****************
  2198 ;; Defined at:
  2199 ;;		line 4 in file "EUSART.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  baudios         4   14[COMRAM] long 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;		None
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  1    wreg      void 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2213 ;;      Params:         4       0       0       0       0       0       0       0       0
  2214 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2216 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2217 ;;Total ram usage:        8 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    1
  2220 ;; This function calls:
  2221 ;;		___aldiv
  2222 ;; This function is called by:
  2223 ;;		_main
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text14
  2228  0010BA                     __ptext14:
  2229                           	opt callstack 0
  2230  0010BA                     _serial_begin:
  2231                           	opt callstack 29
  2232  0010BA                     
  2233                           ;EUSART.c: 7:     TRISCbits.RC6=0;
  2234  0010BA  9C94               	bcf	148,6,c	;volatile
  2235                           
  2236                           ;EUSART.c: 8:     TRISCbits.RC7=1;
  2237  0010BC  8E94               	bsf	148,7,c	;volatile
  2238                           
  2239                           ;EUSART.c: 9:     BAUDCONbits.BRG16=0;
  2240  0010BE  96B8               	bcf	184,3,c	;volatile
  2241                           
  2242                           ;EUSART.c: 10:     TXSTAbits.BRGH=0;
  2243  0010C0  94AC               	bcf	172,2,c	;volatile
  2244                           
  2245                           ;EUSART.c: 11:     TXSTAbits.SYNC=0;
  2246  0010C2  98AC               	bcf	172,4,c	;volatile
  2247  0010C4                     
  2248                           ;EUSART.c: 12:     SPBRG=(unsigned char)(((8000000/baudios)/64)-1);
  2249  0010C4  C00F  F005         	movff	serial_begin@baudios,___aldiv@divisor
  2250  0010C8  C010  F006         	movff	serial_begin@baudios+1,___aldiv@divisor+1
  2251  0010CC  C011  F007         	movff	serial_begin@baudios+2,___aldiv@divisor+2
  2252  0010D0  C012  F008         	movff	serial_begin@baudios+3,___aldiv@divisor+3
  2253  0010D4  0E00               	movlw	0
  2254  0010D6  6E01               	movwf	___aldiv@dividend^0,c
  2255  0010D8  0E12               	movlw	18
  2256  0010DA  6E02               	movwf	(___aldiv@dividend+1)^0,c
  2257  0010DC  0E7A               	movlw	122
  2258  0010DE  6E03               	movwf	(___aldiv@dividend+2)^0,c
  2259  0010E0  0E00               	movlw	0
  2260  0010E2  6E04               	movwf	(___aldiv@dividend+3)^0,c
  2261  0010E4  ECCF  F005         	call	___aldiv	;wreg free
  2262  0010E8  C001  F013         	movff	?___aldiv,_serial_begin$1454
  2263  0010EC  C002  F014         	movff	?___aldiv+1,_serial_begin$1454+1
  2264  0010F0  C003  F015         	movff	?___aldiv+2,_serial_begin$1454+2
  2265  0010F4  C004  F016         	movff	?___aldiv+3,_serial_begin$1454+3
  2266                           
  2267                           ;EUSART.c: 12:     SPBRG=(unsigned char)(((8000000/baudios)/64)-1);
  2268  0010F8  C013  F001         	movff	_serial_begin$1454,___aldiv@dividend
  2269  0010FC  C014  F002         	movff	_serial_begin$1454+1,___aldiv@dividend+1
  2270  001100  C015  F003         	movff	_serial_begin$1454+2,___aldiv@dividend+2
  2271  001104  C016  F004         	movff	_serial_begin$1454+3,___aldiv@dividend+3
  2272  001108  0E40               	movlw	64
  2273  00110A  6E05               	movwf	___aldiv@divisor^0,c
  2274  00110C  0E00               	movlw	0
  2275  00110E  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2276  001110  0E00               	movlw	0
  2277  001112  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2278  001114  0E00               	movlw	0
  2279  001116  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2280  001118  ECCF  F005         	call	___aldiv	;wreg free
  2281  00111C  0401               	decf	?___aldiv^0,w,c
  2282  00111E  6EAF               	movwf	175,c	;volatile
  2283  001120                     
  2284                           ;EUSART.c: 13:     RCSTAbits.SPEN=1;
  2285  001120  8EAB               	bsf	171,7,c	;volatile
  2286  001122                     
  2287                           ;EUSART.c: 16:     TXSTAbits.TX9=0;
  2288  001122  9CAC               	bcf	172,6,c	;volatile
  2289  001124                     
  2290                           ;EUSART.c: 17:     TXSTAbits.TXEN=1;
  2291  001124  8AAC               	bsf	172,5,c	;volatile
  2292  001126                     
  2293                           ;EUSART.c: 20:     RCSTAbits.RC9=0;
  2294  001126  9CAB               	bcf	171,6,c	;volatile
  2295  001128                     
  2296                           ;EUSART.c: 21:     RCSTAbits.CREN=1;
  2297  001128  88AB               	bsf	171,4,c	;volatile
  2298  00112A  0012               	return		;funcret
  2299  00112C                     __end_of_serial_begin:
  2300                           	opt callstack 0
  2301                           
  2302 ;; *************** function ___aldiv *****************
  2303 ;; Defined at:
  2304 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aldiv.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  dividend        4    0[COMRAM] long 
  2307 ;;  divisor         4    4[COMRAM] long 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  quotient        4   10[COMRAM] long 
  2310 ;;  sign            1    9[COMRAM] unsigned char 
  2311 ;;  counter         1    8[COMRAM] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  4    0[COMRAM] long 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2321 ;;      Params:         8       0       0       0       0       0       0       0       0
  2322 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2324 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2325 ;;Total ram usage:       14 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_serial_begin
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text15
  2335  000B9E                     __ptext15:
  2336                           	opt callstack 0
  2337  000B9E                     ___aldiv:
  2338                           	opt callstack 29
  2339  000B9E  0E00               	movlw	0
  2340  000BA0  6E0A               	movwf	___aldiv@sign^0,c
  2341  000BA2  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  2342  000BA4  EFD8  F005         	goto	u680
  2343  000BA8  EFD6  F005         	goto	u681
  2344  000BAC                     u681:
  2345  000BAC  EFE2  F005         	goto	l1392
  2346  000BB0                     u680:
  2347  000BB0  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  2348  000BB2  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  2349  000BB4  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  2350  000BB6  6C05               	negf	___aldiv@divisor^0,c
  2351  000BB8  0E00               	movlw	0
  2352  000BBA  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  2353  000BBC  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  2354  000BBE  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  2355  000BC0  0E01               	movlw	1
  2356  000BC2  6E0A               	movwf	___aldiv@sign^0,c
  2357  000BC4                     l1392:
  2358  000BC4  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  2359  000BC6  EFE9  F005         	goto	u690
  2360  000BCA  EFE7  F005         	goto	u691
  2361  000BCE                     u691:
  2362  000BCE  EFF3  F005         	goto	l1398
  2363  000BD2                     u690:
  2364  000BD2  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  2365  000BD4  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  2366  000BD6  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  2367  000BD8  6C01               	negf	___aldiv@dividend^0,c
  2368  000BDA  0E00               	movlw	0
  2369  000BDC  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  2370  000BDE  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  2371  000BE0  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  2372  000BE2  0E01               	movlw	1
  2373  000BE4  1A0A               	xorwf	___aldiv@sign^0,f,c
  2374  000BE6                     l1398:
  2375  000BE6  0E00               	movlw	0
  2376  000BE8  6E0B               	movwf	___aldiv@quotient^0,c
  2377  000BEA  0E00               	movlw	0
  2378  000BEC  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  2379  000BEE  0E00               	movlw	0
  2380  000BF0  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  2381  000BF2  0E00               	movlw	0
  2382  000BF4  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  2383  000BF6  5005               	movf	___aldiv@divisor^0,w,c
  2384  000BF8  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  2385  000BFA  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  2386  000BFC  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  2387  000BFE  B4D8               	btfsc	status,2,c
  2388  000C00  EF04  F006         	goto	u701
  2389  000C04  EF06  F006         	goto	u700
  2390  000C08                     u701:
  2391  000C08  EF3C  F006         	goto	l1420
  2392  000C0C                     u700:
  2393  000C0C  0E01               	movlw	1
  2394  000C0E  6E09               	movwf	___aldiv@counter^0,c
  2395  000C10  EF10  F006         	goto	l1406
  2396  000C14                     l1404:
  2397  000C14  90D8               	bcf	status,0,c
  2398  000C16  3605               	rlcf	___aldiv@divisor^0,f,c
  2399  000C18  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  2400  000C1A  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  2401  000C1C  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  2402  000C1E  2A09               	incf	___aldiv@counter^0,f,c
  2403  000C20                     l1406:
  2404  000C20  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  2405  000C22  EF15  F006         	goto	u711
  2406  000C26  EF17  F006         	goto	u710
  2407  000C2A                     u711:
  2408  000C2A  EF0A  F006         	goto	l1404
  2409  000C2E                     u710:
  2410  000C2E                     l1408:
  2411  000C2E  90D8               	bcf	status,0,c
  2412  000C30  360B               	rlcf	___aldiv@quotient^0,f,c
  2413  000C32  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  2414  000C34  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  2415  000C36  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  2416  000C38  5005               	movf	___aldiv@divisor^0,w,c
  2417  000C3A  5C01               	subwf	___aldiv@dividend^0,w,c
  2418  000C3C  5006               	movf	(___aldiv@divisor+1)^0,w,c
  2419  000C3E  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  2420  000C40  5007               	movf	(___aldiv@divisor+2)^0,w,c
  2421  000C42  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  2422  000C44  5008               	movf	(___aldiv@divisor+3)^0,w,c
  2423  000C46  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  2424  000C48  A0D8               	btfss	status,0,c
  2425  000C4A  EF29  F006         	goto	u721
  2426  000C4E  EF2B  F006         	goto	u720
  2427  000C52                     u721:
  2428  000C52  EF34  F006         	goto	l1416
  2429  000C56                     u720:
  2430  000C56  5005               	movf	___aldiv@divisor^0,w,c
  2431  000C58  5E01               	subwf	___aldiv@dividend^0,f,c
  2432  000C5A  5006               	movf	(___aldiv@divisor+1)^0,w,c
  2433  000C5C  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  2434  000C5E  5007               	movf	(___aldiv@divisor+2)^0,w,c
  2435  000C60  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  2436  000C62  5008               	movf	(___aldiv@divisor+3)^0,w,c
  2437  000C64  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  2438  000C66  800B               	bsf	___aldiv@quotient^0,0,c
  2439  000C68                     l1416:
  2440  000C68  90D8               	bcf	status,0,c
  2441  000C6A  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  2442  000C6C  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  2443  000C6E  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  2444  000C70  3205               	rrcf	___aldiv@divisor^0,f,c
  2445  000C72  2E09               	decfsz	___aldiv@counter^0,f,c
  2446  000C74  EF17  F006         	goto	l1408
  2447  000C78                     l1420:
  2448  000C78  500A               	movf	___aldiv@sign^0,w,c
  2449  000C7A  B4D8               	btfsc	status,2,c
  2450  000C7C  EF42  F006         	goto	u731
  2451  000C80  EF44  F006         	goto	u730
  2452  000C84                     u731:
  2453  000C84  EF4C  F006         	goto	l1424
  2454  000C88                     u730:
  2455  000C88  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  2456  000C8A  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  2457  000C8C  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  2458  000C8E  6C0B               	negf	___aldiv@quotient^0,c
  2459  000C90  0E00               	movlw	0
  2460  000C92  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  2461  000C94  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  2462  000C96  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  2463  000C98                     l1424:
  2464  000C98  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2465  000C9C  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2466  000CA0  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2467  000CA4  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2468  000CA8  0012               	return		;funcret
  2469  000CAA                     __end_of___aldiv:
  2470                           	opt callstack 0
  2471                           
  2472 ;; *************** function _oscilador *****************
  2473 ;; Defined at:
  2474 ;;		line 45 in file "main.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2491 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2492 ;;Total ram usage:        0 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_main
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text16
  2502  00135C                     __ptext16:
  2503                           	opt callstack 0
  2504  00135C                     _oscilador:
  2505                           	opt callstack 30
  2506  00135C                     
  2507                           ;main.c: 46:     OSCCON=0x60;
  2508  00135C  0E60               	movlw	96
  2509  00135E  6ED3               	movwf	211,c	;volatile
  2510                           
  2511                           ;main.c: 47:     OSCCON2=0x00;
  2512  001360  0E00               	movlw	0
  2513  001362  6ED2               	movwf	210,c	;volatile
  2514  001364  0012               	return		;funcret
  2515  001366                     __end_of_oscilador:
  2516                           	opt callstack 0
  2517                           
  2518 ;; *************** function _analogRead *****************
  2519 ;; Defined at:
  2520 ;;		line 23 in file "ADC.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  canal           1    wreg     unsigned char 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  canal           1    3[COMRAM] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  2    0[COMRAM] unsigned int 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2534 ;;      Params:         2       0       0       0       0       0       0       0       0
  2535 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2536 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2537 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2538 ;;Total ram usage:        4 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text17
  2548  001280                     __ptext17:
  2549                           	opt callstack 0
  2550  001280                     _analogRead:
  2551                           	opt callstack 30
  2552                           
  2553                           ;incstack = 0
  2554                           ;analogRead@canal stored from wreg
  2555  001280  6E04               	movwf	analogRead@canal^0,c
  2556  001282                     
  2557                           ;ADC.c: 24:     ADCON0bits.CHS=canal;
  2558  001282  C004  F003         	movff	analogRead@canal,??_analogRead
  2559  001286  4603               	rlncf	??_analogRead^0,f,c
  2560  001288  4603               	rlncf	??_analogRead^0,f,c
  2561  00128A  50C2               	movf	194,w,c	;volatile
  2562  00128C  1803               	xorwf	??_analogRead^0,w,c
  2563  00128E  0B83               	andlw	-125
  2564  001290  1803               	xorwf	??_analogRead^0,w,c
  2565  001292  6EC2               	movwf	194,c	;volatile
  2566  001294                     
  2567                           ;ADC.c: 25:     ADCON0bits.GO_DONE=1;
  2568  001294  82C2               	bsf	194,1,c	;volatile
  2569  001296                     l105:
  2570  001296  B2C2               	btfsc	194,1,c	;volatile
  2571  001298  EF50  F009         	goto	u761
  2572  00129C  EF52  F009         	goto	u760
  2573  0012A0                     u761:
  2574  0012A0  EF4B  F009         	goto	l105
  2575  0012A4                     u760:
  2576  0012A4                     
  2577                           ;ADC.c: 27:     conversion=ADRESH<<8;
  2578  0012A4  50C4               	movf	196,w,c	;volatile
  2579  0012A6  0100               	movlb	0	; () banked
  2580  0012A8  6F67               	movwf	(_conversion+1)& (0+255),b
  2581  0012AA  6B66               	clrf	_conversion& (0+255),b
  2582  0012AC                     
  2583                           ; BSR set to: 0
  2584                           ;ADC.c: 28:     conversion|=ADRESL;
  2585  0012AC  50C3               	movf	195,w,c	;volatile
  2586  0012AE  1366               	iorwf	_conversion& (0+255),f,b
  2587  0012B0                     
  2588                           ; BSR set to: 0
  2589                           ;ADC.c: 29:     return conversion;
  2590  0012B0  C066  F001         	movff	_conversion,?_analogRead
  2591  0012B4  C067  F002         	movff	_conversion+1,?_analogRead+1
  2592  0012B8                     
  2593                           ; BSR set to: 0
  2594  0012B8  0012               	return		;funcret
  2595  0012BA                     __end_of_analogRead:
  2596                           	opt callstack 0
  2597                           
  2598 ;; *************** function _ADC_begin *****************
  2599 ;; Defined at:
  2600 ;;		line 4 in file "ADC.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2614 ;;      Params:         0       0       0       0       0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text18
  2628  0012F0                     __ptext18:
  2629                           	opt callstack 0
  2630  0012F0                     _ADC_begin:
  2631                           	opt callstack 30
  2632  0012F0                     
  2633                           ;ADC.c: 5:     ANSELAbits.ANSA0=1;
  2634  0012F0  010F               	movlb	15	; () banked
  2635  0012F2  815B               	bsf	91,0,b	;volatile
  2636                           
  2637                           ;ADC.c: 6:     TRISAbits.RA0=1;
  2638  0012F4  8092               	bsf	146,0,c	;volatile
  2639                           
  2640                           ;ADC.c: 7:     ANSELBbits.ANSB0=1;
  2641  0012F6  815C               	bsf	92,0,b	;volatile
  2642                           
  2643                           ;ADC.c: 8:     TRISBbits.RB0=1;
  2644  0012F8  8093               	bsf	147,0,c	;volatile
  2645                           
  2646                           ;ADC.c: 9:     ANSELCbits.ANSC2=1;
  2647  0012FA  855D               	bsf	93,2,b	;volatile
  2648                           
  2649                           ;ADC.c: 10:     TRISCbits.RC2=1;
  2650  0012FC  8494               	bsf	148,2,c	;volatile
  2651  0012FE                     
  2652                           ; BSR set to: 15
  2653                           ;ADC.c: 13:     ADCON0bits.CHS=0b0000;
  2654  0012FE  0E83               	movlw	-125
  2655  001300  16C2               	andwf	194,f,c	;volatile
  2656  001302                     
  2657                           ; BSR set to: 15
  2658                           ;ADC.c: 14:     ADCON1bits.PVCFG0=0b00;
  2659  001302  94C1               	bcf	193,2,c	;volatile
  2660  001304                     
  2661                           ; BSR set to: 15
  2662                           ;ADC.c: 15:     ADCON1bits.NVCFG1=0b00;
  2663  001304  92C1               	bcf	193,1,c	;volatile
  2664                           
  2665                           ;ADC.c: 17:     ADCON2bits.ADCS=0b100;
  2666  001306  50C0               	movf	192,w,c	;volatile
  2667  001308  0BF8               	andlw	-8
  2668  00130A  0904               	iorlw	4
  2669  00130C  6EC0               	movwf	192,c	;volatile
  2670                           
  2671                           ;ADC.c: 18:     ADCON2bits.ACQT=0b010;
  2672  00130E  50C0               	movf	192,w,c	;volatile
  2673  001310  0BC7               	andlw	-57
  2674  001312  0910               	iorlw	16
  2675  001314  6EC0               	movwf	192,c	;volatile
  2676  001316                     
  2677                           ; BSR set to: 15
  2678                           ;ADC.c: 19:     ADCON2bits.ADFM=1;
  2679  001316  8EC0               	bsf	192,7,c	;volatile
  2680  001318                     
  2681                           ; BSR set to: 15
  2682                           ;ADC.c: 20:     ADCON0bits.ADON=1;
  2683  001318  80C2               	bsf	194,0,c	;volatile
  2684  00131A                     
  2685                           ; BSR set to: 15
  2686  00131A  0012               	return		;funcret
  2687  00131C                     __end_of_ADC_begin:
  2688                           	opt callstack 0
  2689                           
  2690                           	psect	rparam
  2691  0000                     tosu	equ	0xFFF
  2692                           tosh	equ	0xFFE
  2693                           tosl	equ	0xFFD
  2694                           stkptr	equ	0xFFC
  2695                           pclatu	equ	0xFFB
  2696                           pclath	equ	0xFFA
  2697                           pcl	equ	0xFF9
  2698                           tblptru	equ	0xFF8
  2699                           tblptrh	equ	0xFF7
  2700                           tblptrl	equ	0xFF6
  2701                           tablat	equ	0xFF5
  2702                           prodh	equ	0xFF4
  2703                           prodl	equ	0xFF3
  2704                           indf0	equ	0xFEF
  2705                           postinc0	equ	0xFEE
  2706                           postdec0	equ	0xFED
  2707                           preinc0	equ	0xFEC
  2708                           plusw0	equ	0xFEB
  2709                           fsr0h	equ	0xFEA
  2710                           fsr0l	equ	0xFE9
  2711                           wreg	equ	0xFE8
  2712                           indf1	equ	0xFE7
  2713                           postinc1	equ	0xFE6
  2714                           postdec1	equ	0xFE5
  2715                           preinc1	equ	0xFE4
  2716                           plusw1	equ	0xFE3
  2717                           fsr1h	equ	0xFE2
  2718                           fsr1l	equ	0xFE1
  2719                           bsr	equ	0xFE0
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           preinc2	equ	0xFDC
  2724                           plusw2	equ	0xFDB
  2725                           fsr2h	equ	0xFDA
  2726                           fsr2l	equ	0xFD9
  2727                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         62
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160     15      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), valor1_c(BANK0[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), valor1_c(BANK0[10]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[7]), valor2_c(BANK0[10]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[7]), valor2_c(BANK0[10]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    strcat@src	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[7]), valor2_c(BANK0[10]), 

    strcat@dest	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1196_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _strcat->_strcpy
    _strcpy->_strlen
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _serial_begin->___aldiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    7675
                                             91 COMRAM     2     2      0
                                             10 BANK0      5     0      5
                          _ADC_begin
                         _analogRead
                          _oscilador
                       _serial_begin
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _strcat                                               4     0      4     866
                                             14 COMRAM     4     0      4
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                              10     6      4     248
                                              4 COMRAM    10     6      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6062
                                             85 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5559
                                             77 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    5206
                                             59 COMRAM    18    12      6
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3835
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2785
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _serial_begin                                         8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _oscilador                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _analogRead                                           4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_begin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_begin
   _analogRead
   _oscilador
   _serial_begin
     ___aldiv
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
   _strcat
     _strcpy
       _strlen (ARG)
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F      4F       5       49.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AE       6        0.0%
DATA                 0      0      AE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Nov 07 01:20:18 2020

                     l17 112A                       l75 1364       __size_of_ADC_begin 002C  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l102 131A  
                    l105 1296                      l108 12B8                      l133 103C  
                    l143 0844                      l136 107E                      l153 0A0A  
                    l145 084C                      l138 10B8                      l164 1184  
                    l165 118C                      l158 0B9C                      l247 0CA8  
                    l613 0D98                      l606 0D78                      l623 0E68  
                    l616 0E48                      l851 0F32                      l866 123A  
                    l882 11E8                      l859 127E                      l876 1340  
                    l869 1366                      l888 12EE             __CFG_CPB$OFF 000000  
                    u400 0E7C                      u401 0E78                      u410 0E8E  
                    u411 0E8A                      u420 0EB6                      u501 0CB0  
                    u421 0EB2                      u510 0CD4                      u430 0EEC  
                    u511 0CD0                      u431 0EE8                      u520 0CFE  
                    u440 127E                      u600 09A0                      u521 0CFA  
                    u441 127A                      u601 099C                      u530 0D3E  
                    u450 12E2                      u610 09BA             __CFG_CPD$OFF 000000  
                    u531 0D3A                      u451 12DE                      u611 09B6  
                    u700 0C0C                      u540 0DB8                      u460 1006  
                    u620 09D4                      u701 0C08                      u541 0DB4  
                    u461 1002                      u621 09D0                      u710 0C2E  
                    u550 0DE2                      u470 1028                      u630 09E2  
                    u711 0C2A                      u551 0DDE                      u471 1024  
                    u631 09DE                      u720 0C56                      u560 0E10  
                    u480 107E                      u640 0A30                      u721 0C52  
                    u561 0E0C                      u481 107A                      u641 0A2C  
                    u730 0C88                      u490 108C                      u570 081C  
                    u650 0A78                      u731 0C84                      u491 1088  
                    u571 0818                      u651 0A74                      u580 0838  
                    u660 0B1E                      u740 11D6                      u581 0834  
                    u661 0B1A                      u590 0982                      u670 1184  
                    u750 11E8                      u591 097E                      u671 1180  
                    u751 11E4                      u760 12A4                      u680 0BB0  
                    u761 12A0                      u681 0BAC                      u690 0BD2  
                    u691 0BCE                      u747 11CC                      u777 0FE4  
                    _pad 0FF8                      wreg 000FE8                     l1210 0E7C  
                   l1212 0E8E                     l1300 080C                     l1214 0E98  
                   l1222 123C                     l1230 12BA                     l1310 087C  
                   l1302 081C                     l1400 0BF6                     l1216 0EB6  
                   l1208 0E6A                     l1224 1248                     l1232 12C6  
                   l1240 0FF8                     l1320 090C                     l1312 0884  
                   l1304 081E                     l1410 0C38                     l1402 0C0C  
                   l1218 0EEC                     l1226 125A                     l1234 12CA  
                   l1250 1048                     l1242 1006                     l1330 09D4  
                   l1314 088A                     l1322 0970                     l1306 0838  
                   l1412 0C56                     l1404 0C14                     l1420 0C78  
                   l1228 125E                     l1236 12E2                     l1252 105C  
                   l1244 101A                     l1324 0982                     l1332 09E2  
                   l1316 0900                     l1308 0874                     l1340 0A3E  
                   l1500 0F7A                     l1422 0C88                     l1414 0C66  
                   l1406 0C20                     l1270 0CF0                     l1262 0CAA  
                   l1254 1060                     l1246 1028                     l1326 09A0  
                   l1318 0906                     l1342 0A50                     l1430 119E  
                   l1502 0F96                     l1424 0C98                     l1416 0C68  
                   l1408 0C2E                     l1440 1124                     l1432 10BA  
                   l1280 0D60                     l1272 0CFE                     l1264 0CB6  
                   l1256 108C                     l1248 1034                     l1328 09BA  
                   l1352 0AFA                     l1344 0A54                     l1336 0A0C  
                   l1504 0FB2                     l1450 12FE                     l1418 0C72  
                   l1442 1126                     l1434 10C4                     l1282 0D72  
                   l1274 0D10                     l1266 0CD4                     l1290 0DD4  
                   l1258 10A0                     l1370 0B8A                     l1354 0B1E  
                   l1362 0B4C                     l1346 0A78                     l1338 0A30  
                   l1506 0FC6                     l1452 1302                     l1460 1282  
                   l1444 1128                     l1436 1120                     l1276 0D3E  
                   l1268 0CDC                     l1292 0DE2                     l1284 0D9A  
                   l1364 0B5A                     l1356 0B2C                     l1348 0AC2  
                   l1380 1142                     l1428 118E                     l1508 0FDA  
                   l1454 1304                     l1462 1294                     l1446 135C  
                   l1390 0BC0                     l1438 1122                     l1278 0D5E  
                   l1294 0E10                     l1286 0DB8                     l1358 0B40  
                   l1382 1168                     l1456 1316                     l1448 12F0  
                   l1464 12A4                     l1392 0BC4                     l1384 0B9E  
                   l1296 0E30                     l1288 0DC0                     l1368 0B66  
                   l1376 112C                     l1480 1228                     l1472 11EA  
                   l1458 1318                     l1466 12AC                     l1394 0BD2  
                   l1386 0BA2                     l1298 0E42                     l1378 1134  
                   l1474 11FC                     l1490 0F42                     l1468 12B0  
                   l1396 0BE2                     l1388 0BB0                     l1476 1204  
                   l1484 131C                     l1492 0F46                     l1398 0BE6  
                   l1478 120C                     l1494 0F5A                     l1496 0F5E  
                   l1488 0F34                     l1498 0F6C                     ?_pad 0011  
                   STR_1 0808                     STR_2 0808                     STR_3 0801  
                   _dbuf 0068                     _main 0F34                     _prec 0064  
                   _nout 0060                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001A  
                   fsr2l 000FD9                     _utoa 080C            __CFG_BORV$190 000000  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_pad 0017          __end_of___aldiv 0CAA  
                  ?_main 00A6                    ?_utoa 001C          __end_of___lodiv 0D9A  
        __end_of___lomod 0E6A             vfpfcnvrt@fmt 003E             vfpfcnvrt@llu 0046  
                  _SPBRG 000FAF                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _flags 005E                    _fputc 0E6A                    _fputs 123C  
                  pad@fp 0011                    _width 0062                    _putch 1366  
                  tablat 000FF5        __end_of_ADC_begin 131C                    utoa@d 001E  
                  utoa@i 003A                    utoa@n 0032                    utoa@p 002E  
                  utoa@w 0030                    status 000FD8           __CFG_T3CMX$RC0 000000  
        __end_of_sprintf 123C         ___lodiv@dividend 0001           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000          __initialization 1342             __end_of_main 0FF8  
           __end_of_utoa 0A0C           __CFG_PCLKEN$ON 000000                   ??_main 005C  
                 ??_utoa 0026            __activetblptr 000002         ___lodiv@quotient 0011  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   ?_fputc 0001  
                 ?_fputs 000A                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 ?_putch 0001                   _ANSELC 000F5D                   _ANSELD 000F5E  
         __CFG_WDTEN$OFF 000000                   _RCREG1 000FAE                   _OSCCON 000FD3  
                 _TXREG1 000FAD           __CFG_XINST$OFF 000000             vfprintf@cfmt 0054  
              ??___aldiv 0009           __CFG_STVREN$ON 000000                ??___lodiv 0011  
              ??___lomod 0011                   clear_0 1348                   _valor1 00AD  
                 _valor2 00AB                   pad@buf 0013                   _strcat 131C  
                 _strcpy 118E                   _strlen 12BA                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 118E  
                 utoa@fp 001C                ??_sprintf 005C     __CFG_LS48MHZ$SYS24X4 000000  
             __accesstop 0060  __end_of__initialization 1352            ___rparam_used 000001  
         __pcstackCOMRAM 0001         __CFG_nPWRTEN$OFF 000000            __end_of_fputc 0F34  
          __end_of_fputs 1280            __end_of_putch 1368      serial_begin@baudios 000F  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0060               _analogRead 1280        __CFG_PLLSEL$PLL4X 000000  
     __size_of_oscilador 000A                  ?_strcat 000F                  ?_strcpy 0005  
                ?_strlen 0001                  _OSCCON2 000FD2       __size_of_vfpfcnvrt 0192  
       ___lomod@dividend 0001               _conversion 0066                  __Hparam 0000  
              _ADC_begin 12F0                  __Lparam 0000            ?_serial_begin 000F  
                ___aldiv 0B9E                  ___lodiv 0CAA                  ___lomod 0D9A  
              ?_vfprintf 004E             __psmallconst 0800                  __pcinit 1342  
                __ramtop 0800                  __ptext0 0F34                  __ptext1 131C  
                __ptext2 118E                  __ptext3 11EA                  __ptext4 112C  
                __ptext5 0A0C                  __ptext6 080C                  __ptext7 0FF8  
                __ptext8 12BA                  __ptext9 123C          __size_of_strcat 0026  
        __size_of_strcpy 005C          __size_of_strlen 0036             __size_of_pad 00C2  
       ___aldiv@dividend 0001                  _sprintf 11EA     end_of_initialization 1352  
                fputc@fp 0003            __Lmediumconst 0000        __end_of_oscilador 1366  
                fputs@fp 000C              ?_analogRead 0001           ??_serial_begin 0013  
             ?_ADC_begin 0001        __end_of_vfpfcnvrt 0B9E                _RCSTAbits 000FAB  
       ___aldiv@quotient 000B                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0054  
                strcpy@d 000D                  strlen@a 0003                  strcpy@s 000B  
                strlen@s 0001                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94                _TXSTAbits 000FAC              vfpfcnvrt@ap 0040  
            vfpfcnvrt@fp 003C              _BAUDCONbits 000FB8           __end_of_strcat 1342  
         __end_of_strcpy 11EA           __end_of_strlen 12F0      __size_of_analogRead 003A  
    start_initialization 1342          ___lodiv@divisor 0009          ___lodiv@counter 0019  
            __end_of_pad 10BA          __CFG_nLPBOR$OFF 000000              ??_ADC_begin 0001  
            vfprintf@fmt 0050                 ??_strcat 0013                 ??_strcpy 0009  
               ??_strlen 0003              __pbssCOMRAM 005E            __pcstackBANK0 009C  
   __end_of_serial_begin 112C                __pnvBANK0 00AB                 ?___aldiv 0001  
               ?___lodiv 0001                 ?___lomod 0001        __size_of_vfprintf 0062  
        ___lomod@divisor 0009              __smallconst 0800          ___lomod@counter 0011  
               ?_sprintf 0056           __size_of_fputc 00CA           __size_of_fputs 0044  
         __size_of_putch 0002          ___aldiv@divisor 0005          ___aldiv@counter 0009  
           ??_analogRead 0003        _serial_begin$1454 0013                _oscilador 135C  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 0A0C               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        __CFG_CFGPLLEN$OFF 000000  
     __end_of_analogRead 12BA                 __Hrparam 0000               ?_oscilador 0001  
             vfprintf@ap 0052                 __Lrparam 0000               vfprintf@fp 004E  
     __CFG_BOREN$SBORDIS 000000          analogRead@canal 0004         __size_of___aldiv 010C  
       __size_of___lodiv 00F0         __size_of___lomod 00D0               ?_vfpfcnvrt 003C  
  __size_of_serial_begin 0072               _ANSELAbits 000F5B               _ANSELBbits 000F5C  
             _ANSELCbits 000F5D               sprintf@fmt 0058               strcat@dest 000F  
               __ptext10 0E6A                 __ptext11 1366                 __ptext12 0D9A  
               __ptext13 0CAA                 __ptext14 10BA                 __ptext15 0B9E  
               __ptext16 135C                 __ptext17 1280                 __ptext18 12F0  
       __size_of_sprintf 0052               strcpy@dest 0005            __size_of_main 00C4  
          __size_of_utoa 0200                 _valor1_c 0092                 _valor2_c 0088  
           _serial_begin 10BA                 _vfprintf 112C                 main@argc 00A6  
               main@argv 00A8                sprintf@ap 009E                strcat@src 0011  
              strcpy@src 0007              ??_oscilador 0001     __CFG_CPUDIV$NOCLKDIV 000000  
            ??_vfpfcnvrt 0042                 sprintf@f 00A0                 sprintf@s 0056  
           ___aldiv@sign 000A       __CFG_FOSC$INTOSCIO 000000  
