

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 05 18:31:07 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35  0000                     
    36                           ; Version 2.10
    37                           ; Generated 31/07/2019 GMT
    38                           ; 
    39                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F45K50 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	nvBANK0
    72  0000AB                     __pnvBANK0:
    73                           	opt callstack 0
    74  0000AB                     _valor2:
    75                           	opt callstack 0
    76  0000AB                     	ds	2
    77  0000AD                     _valor1:
    78                           	opt callstack 0
    79  0000AD                     	ds	2
    80  0000                     _ANSELD	set	3934
    81  0000                     _ANSELC	set	3933
    82  0000                     _ANSELCbits	set	3933
    83  0000                     _ANSELBbits	set	3932
    84  0000                     _ANSELAbits	set	3931
    85  0000                     _OSCCON2	set	4050
    86  0000                     _OSCCON	set	4051
    87  0000                     _TRISD	set	3989
    88  0000                     _RCREG1	set	4014
    89  0000                     _TXREG1	set	4013
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _SPBRG	set	4015
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4024
    94  0000                     _ADRESL	set	4035
    95  0000                     _ADRESH	set	4036
    96  0000                     _ADCON2bits	set	4032
    97  0000                     _ADCON1bits	set	4033
    98  0000                     _ADCON0bits	set	4034
    99  0000                     _TRISCbits	set	3988
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISAbits	set	3986
   102                           
   103                           	psect	smallconst
   104  000800                     __psmallconst:
   105                           	opt callstack 0
   106  000800  00                 	db	0
   107  000801                     STR_1:
   108                           
   109                           ; BSR set to: 15
   110  000801  25                 	db	37
   111  000802  75                 	db	117	;'u'
   112  000803  00                 	db	0
   113  000804                     STR_3:
   114                           
   115                           ; BSR set to: 15
   116  000804  3A                 	db	58	;':'
   117  000805  00                 	db	0
   118  0000                     
   119                           ; #config settings
   120  000806  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           	psect	cinit
   123  00138C                     __pcinit:
   124                           	opt callstack 0
   125  00138C                     start_initialization:
   126                           	opt callstack 0
   127  00138C                     __initialization:
   128                           	opt callstack 0
   129                           
   130                           ; Clear objects allocated to BANK0 (60 bytes)
   131  00138C  EE00  F060         	lfsr	0,__pbssBANK0
   132  001390  0E3C               	movlw	60
   133  001392                     clear_0:
   134  001392  6AEE               	clrf	postinc0,c
   135  001394  06E8               	decf	wreg,f,c
   136  001396  E1FD               	bnz	clear_0
   137                           
   138                           ; Clear objects allocated to COMRAM (2 bytes)
   139  001398  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   140  00139A  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   141  00139C                     end_of_initialization:
   142                           	opt callstack 0
   143  00139C                     __end_of__initialization:
   144                           	opt callstack 0
   145  00139C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   146  00139E  6EF8               	movwf	tblptru,c
   147  0013A0  0100               	movlb	0
   148  0013A2  EFCB  F006         	goto	_main	;jump to C main() function
   149                           
   150                           	psect	bssCOMRAM
   151  00005E                     __pbssCOMRAM:
   152                           	opt callstack 0
   153  00005E                     _flags:
   154                           	opt callstack 0
   155  00005E                     	ds	2
   156                           
   157                           	psect	bssBANK0
   158  000060                     __pbssBANK0:
   159                           	opt callstack 0
   160  000060                     _nout:
   161                           	opt callstack 0
   162  000060                     	ds	2
   163  000062                     _width:
   164                           	opt callstack 0
   165  000062                     	ds	2
   166  000064                     _prec:
   167                           	opt callstack 0
   168  000064                     	ds	2
   169  000066                     _conversion:
   170                           	opt callstack 0
   171  000066                     	ds	2
   172  000068                     _dbuf:
   173                           	opt callstack 0
   174  000068                     	ds	32
   175  000088                     _valor2_c:
   176                           	opt callstack 0
   177  000088                     	ds	10
   178  000092                     _valor1_c:
   179                           	opt callstack 0
   180  000092                     	ds	10
   181                           
   182                           	psect	cstackBANK0
   183  00009C                     __pcstackBANK0:
   184                           	opt callstack 0
   185  00009C                     	ds	2
   186  00009E                     sprintf@ap:
   187                           	opt callstack 0
   188                           
   189                           ; 2 bytes @ 0x2
   190  00009E                     	ds	2
   191  0000A0                     sprintf@f:
   192                           	opt callstack 0
   193                           
   194                           ; 6 bytes @ 0x4
   195  0000A0                     	ds	6
   196  0000A6                     
   197                           ; 2 bytes @ 0xA
   198  0000A6                     	ds	2
   199  0000A8                     
   200                           ; 3 bytes @ 0xC
   201  0000A8                     	ds	3
   202                           
   203                           	psect	cstackCOMRAM
   204  000001                     __pcstackCOMRAM:
   205                           	opt callstack 0
   206  000001                     ?_strlen:
   207                           	opt callstack 0
   208  000001                     ?_analogRead:
   209                           	opt callstack 0
   210  000001                     ?___aldiv:
   211                           	opt callstack 0
   212  000001                     ?___lodiv:
   213                           	opt callstack 0
   214  000001                     ?___lomod:
   215                           	opt callstack 0
   216  000001                     serial_print@caracter:
   217                           	opt callstack 0
   218  000001                     fputc@c:
   219                           	opt callstack 0
   220  000001                     strlen@s:
   221                           	opt callstack 0
   222  000001                     ___aldiv@dividend:
   223                           	opt callstack 0
   224  000001                     ___lodiv@dividend:
   225                           	opt callstack 0
   226  000001                     ___lomod@dividend:
   227                           	opt callstack 0
   228                           
   229                           ; 8 bytes @ 0x0
   230  000001                     	ds	1
   231  000002                     serial_trama@data:
   232                           	opt callstack 0
   233                           
   234                           ; 2 bytes @ 0x1
   235  000002                     	ds	1
   236  000003                     ??_analogRead:
   237  000003                     fputc@fp:
   238                           	opt callstack 0
   239  000003                     strlen@a:
   240                           	opt callstack 0
   241                           
   242                           ; 2 bytes @ 0x2
   243  000003                     	ds	1
   244  000004                     analogRead@canal:
   245                           	opt callstack 0
   246  000004                     serial_trama@k:
   247                           	opt callstack 0
   248                           
   249                           ; 2 bytes @ 0x3
   250  000004                     	ds	1
   251  000005                     ??_fputc:
   252  000005                     strcpy@dest:
   253                           	opt callstack 0
   254  000005                     ___aldiv@divisor:
   255                           	opt callstack 0
   256                           
   257                           ; 4 bytes @ 0x4
   258  000005                     	ds	2
   259  000007                     strcpy@src:
   260                           	opt callstack 0
   261                           
   262                           ; 2 bytes @ 0x6
   263  000007                     	ds	2
   264  000009                     ??_strcpy:
   265  000009                     ___aldiv@counter:
   266                           	opt callstack 0
   267  000009                     ___lodiv@divisor:
   268                           	opt callstack 0
   269  000009                     ___lomod@divisor:
   270                           	opt callstack 0
   271                           
   272                           ; 8 bytes @ 0x8
   273  000009                     	ds	1
   274  00000A                     ___aldiv@sign:
   275                           	opt callstack 0
   276  00000A                     fputs@s:
   277                           	opt callstack 0
   278                           
   279                           ; 2 bytes @ 0x9
   280  00000A                     	ds	1
   281  00000B                     strcpy@s:
   282                           	opt callstack 0
   283  00000B                     ___aldiv@quotient:
   284                           	opt callstack 0
   285                           
   286                           ; 4 bytes @ 0xA
   287  00000B                     	ds	1
   288  00000C                     fputs@fp:
   289                           	opt callstack 0
   290                           
   291                           ; 2 bytes @ 0xB
   292  00000C                     	ds	1
   293  00000D                     strcpy@d:
   294                           	opt callstack 0
   295                           
   296                           ; 2 bytes @ 0xC
   297  00000D                     	ds	1
   298  00000E                     fputs@c:
   299                           	opt callstack 0
   300                           
   301                           ; 1 bytes @ 0xD
   302  00000E                     	ds	1
   303  00000F                     fputs@i:
   304                           	opt callstack 0
   305  00000F                     strcat@dest:
   306                           	opt callstack 0
   307  00000F                     serial_begin@baudios:
   308                           	opt callstack 0
   309                           
   310                           ; 4 bytes @ 0xE
   311  00000F                     	ds	2
   312  000011                     ?_pad:
   313                           	opt callstack 0
   314  000011                     ___lomod@counter:
   315                           	opt callstack 0
   316  000011                     pad@fp:
   317                           	opt callstack 0
   318  000011                     strcat@src:
   319                           	opt callstack 0
   320  000011                     ___lodiv@quotient:
   321                           	opt callstack 0
   322                           
   323                           ; 8 bytes @ 0x10
   324  000011                     	ds	2
   325  000013                     pad@buf:
   326                           	opt callstack 0
   327  000013                     _serial_begin$1454:
   328                           	opt callstack 0
   329                           
   330                           ; 4 bytes @ 0x12
   331  000013                     	ds	2
   332  000015                     pad@p:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x14
   336  000015                     	ds	2
   337  000017                     ??_pad:
   338                           
   339                           ; 1 bytes @ 0x16
   340  000017                     	ds	1
   341  000018                     pad@i:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x17
   345  000018                     	ds	1
   346  000019                     ___lodiv@counter:
   347                           	opt callstack 0
   348                           
   349                           ; 1 bytes @ 0x18
   350  000019                     	ds	1
   351  00001A                     pad@w:
   352                           	opt callstack 0
   353                           
   354                           ; 2 bytes @ 0x19
   355  00001A                     	ds	2
   356  00001C                     ?_utoa:
   357                           	opt callstack 0
   358  00001C                     utoa@fp:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0x1B
   362  00001C                     	ds	2
   363  00001E                     utoa@d:
   364                           	opt callstack 0
   365                           
   366                           ; 8 bytes @ 0x1D
   367  00001E                     	ds	8
   368  000026                     ??_utoa:
   369                           
   370                           ; 1 bytes @ 0x25
   371  000026                     	ds	8
   372  00002E                     utoa@p:
   373                           	opt callstack 0
   374                           
   375                           ; 2 bytes @ 0x2D
   376  00002E                     	ds	2
   377  000030                     utoa@w:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0x2F
   381  000030                     	ds	2
   382  000032                     utoa@n:
   383                           	opt callstack 0
   384                           
   385                           ; 8 bytes @ 0x31
   386  000032                     	ds	8
   387  00003A                     utoa@i:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x39
   391  00003A                     	ds	2
   392  00003C                     ?_vfpfcnvrt:
   393                           	opt callstack 0
   394  00003C                     vfpfcnvrt@fp:
   395                           	opt callstack 0
   396                           
   397                           ; 2 bytes @ 0x3B
   398  00003C                     	ds	2
   399  00003E                     vfpfcnvrt@fmt:
   400                           	opt callstack 0
   401                           
   402                           ; 2 bytes @ 0x3D
   403  00003E                     	ds	2
   404  000040                     vfpfcnvrt@ap:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x3F
   408  000040                     	ds	2
   409  000042                     ??_vfpfcnvrt:
   410                           
   411                           ; 1 bytes @ 0x41
   412  000042                     	ds	4
   413  000046                     vfpfcnvrt@llu:
   414                           	opt callstack 0
   415                           
   416                           ; 8 bytes @ 0x45
   417  000046                     	ds	8
   418  00004E                     ?_vfprintf:
   419                           	opt callstack 0
   420  00004E                     vfprintf@fp:
   421                           	opt callstack 0
   422                           
   423                           ; 2 bytes @ 0x4D
   424  00004E                     	ds	2
   425  000050                     vfprintf@fmt:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x4F
   429  000050                     	ds	2
   430  000052                     vfprintf@ap:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x51
   434  000052                     	ds	2
   435  000054                     vfprintf@cfmt:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x53
   439  000054                     	ds	2
   440  000056                     ?_sprintf:
   441                           	opt callstack 0
   442  000056                     sprintf@s:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0x55
   446  000056                     	ds	2
   447  000058                     sprintf@fmt:
   448                           	opt callstack 0
   449                           
   450                           ; 2 bytes @ 0x57
   451  000058                     	ds	4
   452  00005C                     ??_main:
   453                           
   454                           ; 1 bytes @ 0x5B
   455  00005C                     	ds	2
   456                           
   457 ;;
   458 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   459 ;;
   460 ;; *************** function _main *****************
   461 ;; Defined at:
   462 ;;		line 19 in file "main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;  argc            2   10[BANK0 ] int 
   465 ;;  argv            3   12[BANK0 ] PTR PTR unsigned char 
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;                  2   10[BANK0 ] int 
   470 ;; Registers used:
   471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   477 ;;      Params:         0       5       0       0       0       0       0       0       0
   478 ;;      Locals:         0       0       0       0       0       0       0       0       0
   479 ;;      Temps:          2       0       0       0       0       0       0       0       0
   480 ;;      Totals:         2       5       0       0       0       0       0       0       0
   481 ;;Total ram usage:        7 bytes
   482 ;; Hardware stack levels required when called:    8
   483 ;; This function calls:
   484 ;;		_ADC_begin
   485 ;;		_analogRead
   486 ;;		_oscilador
   487 ;;		_serial_begin
   488 ;;		_serial_trama
   489 ;;		_sprintf
   490 ;;		_strcat
   491 ;; This function is called by:
   492 ;;		Startup code after reset
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text0
   497  000D96                     __ptext0:
   498                           	opt callstack 0
   499  000D96                     _main:
   500                           	opt callstack 23
   501  000D96                     
   502                           ;main.c: 20:     ANSELC=0;
   503  000D96  0E00               	movlw	0
   504  000D98  010F               	movlb	15	; () banked
   505  000D9A  6F5D               	movwf	93,b	;volatile
   506                           
   507                           ;main.c: 21:     ANSELD=0;
   508  000D9C  0E00               	movlw	0
   509  000D9E  6F5E               	movwf	94,b	;volatile
   510                           
   511                           ;main.c: 22:     TRISD=0;
   512  000DA0  0E00               	movlw	0
   513  000DA2  6E95               	movwf	149,c	;volatile
   514  000DA4                     
   515                           ; BSR set to: 15
   516                           ;main.c: 23:     oscilador();
   517  000DA4  ECDE  F009         	call	_oscilador	;wreg free
   518  000DA8                     
   519                           ;main.c: 24:     serial_begin(9600);
   520  000DA8  0E80               	movlw	128
   521  000DAA  6E0F               	movwf	serial_begin@baudios^0,c
   522  000DAC  0E25               	movlw	37
   523  000DAE  6E10               	movwf	(serial_begin@baudios+1)^0,c
   524  000DB0  0E00               	movlw	0
   525  000DB2  6E11               	movwf	(serial_begin@baudios+2)^0,c
   526  000DB4  0E00               	movlw	0
   527  000DB6  6E12               	movwf	(serial_begin@baudios+3)^0,c
   528  000DB8  EC62  F008         	call	_serial_begin	;wreg free
   529  000DBC                     
   530                           ;main.c: 25:     ADC_begin();
   531  000DBC  EC9D  F009         	call	_ADC_begin	;wreg free
   532  000DC0                     l1512:
   533                           
   534                           ;main.c: 28:         valor1=analogRead(0b00000);
   535  000DC0  0E00               	movlw	0
   536  000DC2  EC65  F009         	call	_analogRead
   537  000DC6  C001  F0AD         	movff	?_analogRead,_valor1
   538  000DCA  C002  F0AE         	movff	?_analogRead+1,_valor1+1
   539  000DCE                     
   540                           ;main.c: 29:         valor2=analogRead(0b01100);
   541  000DCE  0E0C               	movlw	12
   542  000DD0  EC65  F009         	call	_analogRead
   543  000DD4  C001  F0AB         	movff	?_analogRead,_valor2
   544  000DD8  C002  F0AC         	movff	?_analogRead+1,_valor2+1
   545  000DDC                     
   546                           ;main.c: 30:         sprintf(valor1_c,"%u",valor1);
   547  000DDC  0E92               	movlw	low _valor1_c
   548  000DDE  6E56               	movwf	sprintf@s^0,c
   549  000DE0  0E00               	movlw	high _valor1_c
   550  000DE2  6E57               	movwf	(sprintf@s+1)^0,c
   551  000DE4  0E01               	movlw	low STR_1
   552  000DE6  6E58               	movwf	sprintf@fmt^0,c
   553  000DE8  0E08               	movlw	high STR_1
   554  000DEA  6E59               	movwf	(sprintf@fmt+1)^0,c
   555  000DEC  C0AD  F05A         	movff	_valor1,?_sprintf+4
   556  000DF0  C0AE  F05B         	movff	_valor1+1,?_sprintf+5
   557  000DF4  ECFA  F008         	call	_sprintf	;wreg free
   558  000DF8                     
   559                           ;main.c: 31:         sprintf(valor2_c,"%u",valor2);
   560  000DF8  0E88               	movlw	low _valor2_c
   561  000DFA  6E56               	movwf	sprintf@s^0,c
   562  000DFC  0E00               	movlw	high _valor2_c
   563  000DFE  6E57               	movwf	(sprintf@s+1)^0,c
   564  000E00  0E01               	movlw	low STR_1
   565  000E02  6E58               	movwf	sprintf@fmt^0,c
   566  000E04  0E08               	movlw	high STR_1
   567  000E06  6E59               	movwf	(sprintf@fmt+1)^0,c
   568  000E08  C0AB  F05A         	movff	_valor2,?_sprintf+4
   569  000E0C  C0AC  F05B         	movff	_valor2+1,?_sprintf+5
   570  000E10  ECFA  F008         	call	_sprintf	;wreg free
   571  000E14                     
   572                           ;main.c: 34:         strcat(valor1_c,":");
   573  000E14  0E92               	movlw	low _valor1_c
   574  000E16  6E0F               	movwf	strcat@dest^0,c
   575  000E18  0E00               	movlw	high _valor1_c
   576  000E1A  6E10               	movwf	(strcat@dest+1)^0,c
   577  000E1C  0E04               	movlw	low STR_3
   578  000E1E  6E11               	movwf	strcat@src^0,c
   579  000E20  0E08               	movlw	high STR_3
   580  000E22  6E12               	movwf	(strcat@src+1)^0,c
   581  000E24  ECB3  F009         	call	_strcat	;wreg free
   582  000E28                     
   583                           ;main.c: 35:         strcat(valor1_c,valor2_c);
   584  000E28  0E92               	movlw	low _valor1_c
   585  000E2A  6E0F               	movwf	strcat@dest^0,c
   586  000E2C  0E00               	movlw	high _valor1_c
   587  000E2E  6E10               	movwf	(strcat@dest+1)^0,c
   588  000E30  0E88               	movlw	low _valor2_c
   589  000E32  6E11               	movwf	strcat@src^0,c
   590  000E34  0E00               	movlw	high _valor2_c
   591  000E36  6E12               	movwf	(strcat@src+1)^0,c
   592  000E38  ECB3  F009         	call	_strcat	;wreg free
   593  000E3C                     
   594                           ;main.c: 36:         serial_trama(valor1_c);
   595  000E3C  0E92               	movlw	low _valor1_c
   596  000E3E  6E02               	movwf	serial_trama@data^0,c
   597  000E40  0E00               	movlw	high _valor1_c
   598  000E42  6E03               	movwf	(serial_trama@data+1)^0,c
   599  000E44  EC45  F009         	call	_serial_trama	;wreg free
   600  000E48                     
   601                           ;main.c: 38:         _delay((unsigned long)((3000)*(8000000/4000.0)));
   602  000E48  0E1F               	movlw	31
   603  000E4A  6E5D               	movwf	(??_main+1)^0,c
   604  000E4C  0E71               	movlw	113
   605  000E4E  6E5C               	movwf	??_main^0,c
   606  000E50  0E1E               	movlw	30
   607  000E52                     u797:
   608  000E52  2EE8               	decfsz	wreg,f,c
   609  000E54  D7FE               	bra	u797
   610  000E56  2E5C               	decfsz	??_main^0,f,c
   611  000E58  D7FC               	bra	u797
   612  000E5A  2E5D               	decfsz	(??_main+1)^0,f,c
   613  000E5C  D7FA               	bra	u797
   614  000E5E  D000               	nop2	
   615  000E60  EFE0  F006         	goto	l1512
   616  000E64  EF00  F000         	goto	start
   617  000E68                     __end_of_main:
   618                           	opt callstack 0
   619                           
   620 ;; *************** function _strcat *****************
   621 ;; Defined at:
   622 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcat.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  dest            2   14[COMRAM] PTR unsigned char 
   625 ;;		 -> valor1_c(10), 
   626 ;;  src             2   16[COMRAM] PTR const unsigned char 
   627 ;;		 -> STR_3(2), valor2_c(10), 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  2   14[COMRAM] PTR unsigned char 
   632 ;; Registers used:
   633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   639 ;;      Params:         4       0       0       0       0       0       0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0
   641 ;;      Temps:          0       0       0       0       0       0       0       0       0
   642 ;;      Totals:         4       0       0       0       0       0       0       0       0
   643 ;;Total ram usage:        4 bytes
   644 ;; Hardware stack levels used:    1
   645 ;; Hardware stack levels required when called:    1
   646 ;; This function calls:
   647 ;;		_strcpy
   648 ;;		_strlen
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text1
   655  001366                     __ptext1:
   656                           	opt callstack 0
   657  001366                     _strcat:
   658                           	opt callstack 29
   659  001366  C00F  F001         	movff	strcat@dest,strlen@s
   660  00136A  C010  F002         	movff	strcat@dest+1,strlen@s+1
   661  00136E  EC82  F009         	call	_strlen	;wreg free
   662  001372  5001               	movf	?_strlen^0,w,c
   663  001374  240F               	addwf	strcat@dest^0,w,c
   664  001376  6E05               	movwf	strcpy@dest^0,c
   665  001378  5002               	movf	(?_strlen+1)^0,w,c
   666  00137A  2010               	addwfc	(strcat@dest+1)^0,w,c
   667  00137C  6E06               	movwf	(strcpy@dest+1)^0,c
   668  00137E  C011  F007         	movff	strcat@src,strcpy@src
   669  001382  C012  F008         	movff	strcat@src+1,strcpy@src+1
   670  001386  ECCC  F008         	call	_strcpy	;wreg free
   671  00138A  0012               	return		;funcret
   672  00138C                     __end_of_strcat:
   673                           	opt callstack 0
   674                           
   675 ;; *************** function _strcpy *****************
   676 ;; Defined at:
   677 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcpy.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;  dest            2    4[COMRAM] PTR unsigned char 
   680 ;;		 -> valor1_c(10), 
   681 ;;  src             2    6[COMRAM] PTR const unsigned char 
   682 ;;		 -> STR_3(2), valor2_c(10), 
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  d               2   12[COMRAM] PTR unsigned char 
   685 ;;		 -> valor1_c(10), 
   686 ;;  s               2   10[COMRAM] PTR const unsigned char 
   687 ;;		 -> STR_3(2), valor2_c(10), 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  2    4[COMRAM] PTR unsigned char 
   690 ;; Registers used:
   691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   697 ;;      Params:         4       0       0       0       0       0       0       0       0
   698 ;;      Locals:         4       0       0       0       0       0       0       0       0
   699 ;;      Temps:          2       0       0       0       0       0       0       0       0
   700 ;;      Totals:        10       0       0       0       0       0       0       0       0
   701 ;;Total ram usage:       10 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; This function calls:
   704 ;;		Nothing
   705 ;; This function is called by:
   706 ;;		_strcat
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text2
   711  001198                     __ptext2:
   712                           	opt callstack 0
   713  001198                     _strcpy:
   714                           	opt callstack 29
   715  001198  C007  F00B         	movff	strcpy@src,strcpy@s
   716  00119C  C008  F00C         	movff	strcpy@src+1,strcpy@s+1
   717  0011A0  C005  F00D         	movff	strcpy@dest,strcpy@d
   718  0011A4  C006  F00E         	movff	strcpy@dest+1,strcpy@d+1
   719  0011A8                     l1438:
   720  0011A8  500B               	movf	strcpy@s^0,w,c
   721  0011AA  6E09               	movwf	??_strcpy^0,c
   722  0011AC  500C               	movf	(strcpy@s+1)^0,w,c
   723  0011AE  6E0A               	movwf	(??_strcpy+1)^0,c
   724  0011B0  4A0B               	infsnz	strcpy@s^0,f,c
   725  0011B2  2A0C               	incf	(strcpy@s+1)^0,f,c
   726  0011B4  C009  FFF6         	movff	??_strcpy,tblptrl
   727  0011B8  C00A  FFF7         	movff	??_strcpy+1,tblptrh
   728  0011BC  6AF8               	clrf	tblptru,c
   729  0011BE  C00D  FFD9         	movff	strcpy@d,fsr2l
   730  0011C2  C00E  FFDA         	movff	strcpy@d+1,fsr2h
   731  0011C6  4A0D               	infsnz	strcpy@d^0,f,c
   732  0011C8  2A0E               	incf	(strcpy@d+1)^0,f,c
   733  0011CA  0E07               	movlw	(high __ramtop+-1)
   734  0011CC  64F7               	cpfsgt	tblptrh,c
   735  0011CE  D003               	bra	u757
   736  0011D0  0008               	tblrd		*
   737  0011D2  50F5               	movf	tablat,w,c
   738  0011D4  D005               	bra	u750
   739  0011D6                     u757:
   740  0011D6  CFF6 FFE1          	movff	tblptrl,fsr1l
   741  0011DA  CFF7 FFE2          	movff	tblptrh,fsr1h
   742  0011DE  50E7               	movf	indf1,w,c
   743  0011E0                     u750:
   744  0011E0  6EDF               	movwf	indf2,c
   745  0011E2  50DF               	movf	indf2,w,c
   746  0011E4  A4D8               	btfss	status,2,c
   747  0011E6  EFF7  F008         	goto	u761
   748  0011EA  EFF9  F008         	goto	u760
   749  0011EE                     u761:
   750  0011EE  EFD4  F008         	goto	l1438
   751  0011F2                     u760:
   752  0011F2  0012               	return		;funcret
   753  0011F4                     __end_of_strcpy:
   754                           	opt callstack 0
   755                           
   756 ;; *************** function _sprintf *****************
   757 ;; Defined at:
   758 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  s               2   85[COMRAM] PTR unsigned char 
   761 ;;		 -> valor2_c(10), valor1_c(10), 
   762 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   763 ;;		 -> STR_2(3), STR_1(3), 
   764 ;; Auto vars:     Size  Location     Type
   765 ;;  f               6    4[BANK0 ] struct _IO_FILE
   766 ;;  ap              2    2[BANK0 ] PTR void [1]
   767 ;;		 -> ?_sprintf(2), 
   768 ;;  ret             2    0        int 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2   85[COMRAM] int 
   771 ;; Registers used:
   772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   778 ;;      Params:         6       0       0       0       0       0       0       0       0
   779 ;;      Locals:         0      10       0       0       0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0       0       0       0       0
   781 ;;      Totals:         6      10       0       0       0       0       0       0       0
   782 ;;Total ram usage:       16 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    7
   785 ;; This function calls:
   786 ;;		_vfprintf
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text3
   793  0011F4                     __ptext3:
   794                           	opt callstack 0
   795  0011F4                     _sprintf:
   796                           	opt callstack 23
   797  0011F4  0E5A               	movlw	low (?_sprintf+4)
   798  0011F6  0100               	movlb	0	; () banked
   799  0011F8  6F9E               	movwf	sprintf@ap& (0+255),b
   800  0011FA  0E00               	movlw	high (?_sprintf+4)
   801  0011FC  6F9F               	movwf	(sprintf@ap+1)& (0+255),b
   802  0011FE  C056  F0A0         	movff	sprintf@s,sprintf@f
   803  001202  C057  F0A1         	movff	sprintf@s+1,sprintf@f+1
   804  001206                     
   805                           ; BSR set to: 0
   806  001206  0E00               	movlw	0
   807  001208  6FA3               	movwf	(sprintf@f+3)& (0+255),b
   808  00120A  0E00               	movlw	0
   809  00120C  6FA2               	movwf	(sprintf@f+2)& (0+255),b
   810  00120E                     
   811                           ; BSR set to: 0
   812  00120E  0E00               	movlw	0
   813  001210  6FA5               	movwf	(sprintf@f+5)& (0+255),b
   814  001212  0E00               	movlw	0
   815  001214  6FA4               	movwf	(sprintf@f+4)& (0+255),b
   816  001216                     
   817                           ; BSR set to: 0
   818  001216  0EA0               	movlw	low sprintf@f
   819  001218  6E4E               	movwf	vfprintf@fp^0,c
   820  00121A  0E00               	movlw	high sprintf@f
   821  00121C  6E4F               	movwf	(vfprintf@fp+1)^0,c
   822  00121E  C058  F050         	movff	sprintf@fmt,vfprintf@fmt
   823  001222  C059  F051         	movff	sprintf@fmt+1,vfprintf@fmt+1
   824  001226  0E9E               	movlw	low sprintf@ap
   825  001228  6E52               	movwf	vfprintf@ap^0,c
   826  00122A  0E00               	movlw	high sprintf@ap
   827  00122C  6E53               	movwf	(vfprintf@ap+1)^0,c
   828  00122E  EC9B  F008         	call	_vfprintf	;wreg free
   829  001232  0100               	movlb	0	; () banked
   830  001234  51A2               	movf	(sprintf@f+2)& (0+255),w,b
   831  001236  2456               	addwf	sprintf@s^0,w,c
   832  001238  6ED9               	movwf	fsr2l,c
   833  00123A  51A3               	movf	(sprintf@f+3)& (0+255),w,b
   834  00123C  2057               	addwfc	(sprintf@s+1)^0,w,c
   835  00123E  6EDA               	movwf	fsr2h,c
   836  001240  0E00               	movlw	0
   837  001242  6EDF               	movwf	indf2,c
   838  001244                     
   839                           ; BSR set to: 0
   840  001244  0012               	return		;funcret
   841  001246                     __end_of_sprintf:
   842                           	opt callstack 0
   843                           
   844 ;; *************** function _vfprintf *****************
   845 ;; Defined at:
   846 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  fp              2   77[COMRAM] PTR struct _IO_FILE
   849 ;;		 -> sprintf@f(6), 
   850 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
   851 ;;		 -> STR_2(3), STR_1(3), 
   852 ;;  ap              2   81[COMRAM] PTR PTR void 
   853 ;;		 -> sprintf@ap(2), 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
   856 ;;		 -> STR_2(3), STR_1(3), 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  2   77[COMRAM] int 
   859 ;; Registers used:
   860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   866 ;;      Params:         6       0       0       0       0       0       0       0       0
   867 ;;      Locals:         2       0       0       0       0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0       0       0       0
   869 ;;      Totals:         8       0       0       0       0       0       0       0       0
   870 ;;Total ram usage:        8 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; Hardware stack levels required when called:    6
   873 ;; This function calls:
   874 ;;		_vfpfcnvrt
   875 ;; This function is called by:
   876 ;;		_sprintf
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text4
   881  001136                     __ptext4:
   882                           	opt callstack 0
   883  001136                     _vfprintf:
   884                           	opt callstack 23
   885  001136                     
   886                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   887  001136  C050  F054         	movff	vfprintf@fmt,vfprintf@cfmt
   888  00113A  C051  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   889  00113E                     
   890                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   891  00113E  0E00               	movlw	0
   892  001140  0100               	movlb	0	; () banked
   893  001142  6F61               	movwf	(_nout+1)& (0+255),b
   894  001144  0E00               	movlw	0
   895  001146  6F60               	movwf	_nout& (0+255),b
   896                           
   897                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   898  001148  EFB9  F008         	goto	l1390
   899  00114C                     l1388:
   900                           
   901                           ; BSR set to: 0
   902                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   903  00114C  C04E  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   904  001150  C04F  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   905  001154  0E54               	movlw	low vfprintf@cfmt
   906  001156  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   907  001158  0E00               	movlw	high vfprintf@cfmt
   908  00115A  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   909  00115C  C052  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   910  001160  C053  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   911  001164  EC04  F005         	call	_vfpfcnvrt	;wreg free
   912  001168  503C               	movf	?_vfpfcnvrt^0,w,c
   913  00116A  0100               	movlb	0	; () banked
   914  00116C  2760               	addwf	_nout& (0+255),f,b
   915  00116E  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   916  001170  2361               	addwfc	(_nout+1)& (0+255),f,b
   917  001172                     l1390:
   918                           
   919                           ; BSR set to: 0
   920                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   921  001172  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
   922  001176  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   923  00117A                     	if	0	;tblptru may be non-zero
   924  00117A                     	endif
   925  00117A                     	if	0	;tblptru may be non-zero
   926  00117A                     	endif
   927  00117A  0008               	tblrd		*
   928  00117C  50F5               	movf	tablat,w,c
   929  00117E  0900               	iorlw	0
   930  001180  A4D8               	btfss	status,2,c
   931  001182  EFC5  F008         	goto	u681
   932  001186  EFC7  F008         	goto	u680
   933  00118A                     u681:
   934  00118A  EFA6  F008         	goto	l1388
   935  00118E                     u680:
   936  00118E                     
   937                           ; BSR set to: 0
   938                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   939  00118E  C060  F04E         	movff	_nout,?_vfprintf
   940  001192  C061  F04F         	movff	_nout+1,?_vfprintf+1
   941  001196                     
   942                           ; BSR set to: 0
   943  001196  0012               	return		;funcret
   944  001198                     __end_of_vfprintf:
   945                           	opt callstack 0
   946                           
   947 ;; *************** function _vfpfcnvrt *****************
   948 ;; Defined at:
   949 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   952 ;;		 -> sprintf@f(6), 
   953 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   954 ;;		 -> vfprintf@cfmt(2), 
   955 ;;  ap              2   63[COMRAM] PTR PTR void 
   956 ;;		 -> sprintf@ap(2), 
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  llu             8   69[COMRAM] unsigned long long 
   959 ;;  ll              8    0        long long 
   960 ;;  f               4    0        long long 
   961 ;;  vp              3    0        PTR void 
   962 ;;  ct              3    0        unsigned char [3]
   963 ;;  cp              3    0        PTR unsigned char 
   964 ;;  i               2    0        int 
   965 ;;  done            2    0        int 
   966 ;;  c               1    0        unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  2   59[COMRAM] int 
   969 ;; Registers used:
   970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   976 ;;      Params:         6       0       0       0       0       0       0       0       0
   977 ;;      Locals:         8       0       0       0       0       0       0       0       0
   978 ;;      Temps:          4       0       0       0       0       0       0       0       0
   979 ;;      Totals:        18       0       0       0       0       0       0       0       0
   980 ;;Total ram usage:       18 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    5
   983 ;; This function calls:
   984 ;;		_fputc
   985 ;;		_utoa
   986 ;; This function is called by:
   987 ;;		_vfprintf
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text5
   992  000A08                     __ptext5:
   993                           	opt callstack 0
   994  000A08                     _vfpfcnvrt:
   995                           	opt callstack 23
   996  000A08                     
   997                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   998  000A08  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   999  000A0C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1000  000A10  CFDE FFF6          	movff	postinc2,tblptrl
  1001  000A14  CFDD FFF7          	movff	postdec2,tblptrh
  1002  000A18                     	if	0	;tblptru may be non-zero
  1003  000A18                     	endif
  1004  000A18                     	if	0	;tblptru may be non-zero
  1005  000A18                     	endif
  1006  000A18  0008               	tblrd		*
  1007  000A1A  50F5               	movf	tablat,w,c
  1008  000A1C  0A25               	xorlw	37
  1009  000A1E  A4D8               	btfss	status,2,c
  1010  000A20  EF14  F005         	goto	u641
  1011  000A24  EF16  F005         	goto	u640
  1012  000A28                     u641:
  1013  000A28  EFB1  F005         	goto	l1372
  1014  000A2C                     u640:
  1015  000A2C                     
  1016                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1017  000A2C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1018  000A30  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1019  000A34  2ADE               	incf	postinc2,f,c
  1020  000A36  0E00               	movlw	0
  1021  000A38  22DD               	addwfc	postdec2,f,c
  1022  000A3A                     
  1023                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1024  000A3A  0E00               	movlw	0
  1025  000A3C  0100               	movlb	0	; () banked
  1026  000A3E  6F63               	movwf	(_width+1)& (0+255),b
  1027  000A40  0E00               	movlw	0
  1028  000A42  6F62               	movwf	_width& (0+255),b
  1029  000A44  C062  F05E         	movff	_width,_flags
  1030  000A48  C063  F05F         	movff	_width+1,_flags+1
  1031  000A4C                     
  1032                           ; BSR set to: 0
  1033                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1034  000A4C  6964               	setf	_prec& (0+255),b
  1035  000A4E  6965               	setf	(_prec+1)& (0+255),b
  1036  000A50                     
  1037                           ; BSR set to: 0
  1038                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1039  000A50  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1040  000A54  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1041  000A58  CFDE FFF6          	movff	postinc2,tblptrl
  1042  000A5C  CFDD FFF7          	movff	postdec2,tblptrh
  1043  000A60                     	if	0	;tblptru may be non-zero
  1044  000A60                     	endif
  1045  000A60                     	if	0	;tblptru may be non-zero
  1046  000A60                     	endif
  1047  000A60  0008               	tblrd		*
  1048  000A62  50F5               	movf	tablat,w,c
  1049  000A64  0A75               	xorlw	117
  1050  000A66  A4D8               	btfss	status,2,c
  1051  000A68  EF38  F005         	goto	u651
  1052  000A6C  EF3A  F005         	goto	u650
  1053  000A70                     u651:
  1054  000A70  EF7B  F005         	goto	l1356
  1055  000A74                     u650:
  1056  000A74                     
  1057                           ; BSR set to: 0
  1058                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1059  000A74  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1060  000A78  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1061  000A7C  2ADE               	incf	postinc2,f,c
  1062  000A7E  0E00               	movlw	0
  1063  000A80  22DD               	addwfc	postdec2,f,c
  1064                           
  1065                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1066  000A82  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1067  000A86  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1068  000A8A  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1069  000A8E  0E02               	movlw	2
  1070  000A90  26DE               	addwf	postinc2,f,c
  1071  000A92  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1072  000A96  0E00               	movlw	0
  1073  000A98  22DD               	addwfc	postdec2,f,c
  1074  000A9A  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1075  000A9E  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1076  000AA2  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
  1077  000AA6  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
  1078  000AAA  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1079  000AAE  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1080  000AB2  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
  1081  000AB4  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
  1082  000AB6  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
  1083  000AB8  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
  1084  000ABA  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
  1085  000ABC  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
  1086  000ABE                     
  1087                           ; BSR set to: 0
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1089  000ABE  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
  1090  000AC2  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1091  000AC6  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1092  000ACA  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1093  000ACE  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1094  000AD2  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1095  000AD6  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1096  000ADA  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1097  000ADE  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1098  000AE2  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1099  000AE6  EC04  F004         	call	_utoa	;wreg free
  1100  000AEA  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1101  000AEE  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1102  000AF2  EFCC  F005         	goto	l160
  1103  000AF6                     l1356:
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1107  000AF6  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1108  000AFA  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1109  000AFE  CFDE FFF6          	movff	postinc2,tblptrl
  1110  000B02  CFDD FFF7          	movff	postdec2,tblptrh
  1111  000B06                     	if	0	;tblptru may be non-zero
  1112  000B06                     	endif
  1113  000B06                     	if	0	;tblptru may be non-zero
  1114  000B06                     	endif
  1115  000B06  0008               	tblrd		*
  1116  000B08  50F5               	movf	tablat,w,c
  1117  000B0A  0A25               	xorlw	37
  1118  000B0C  A4D8               	btfss	status,2,c
  1119  000B0E  EF8B  F005         	goto	u661
  1120  000B12  EF8D  F005         	goto	u660
  1121  000B16                     u661:
  1122  000B16  EFA4  F005         	goto	l1366
  1123  000B1A                     u660:
  1124  000B1A                     
  1125                           ; BSR set to: 0
  1126                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1127  000B1A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1128  000B1E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1129  000B22  2ADE               	incf	postinc2,f,c
  1130  000B24  0E00               	movlw	0
  1131  000B26  22DD               	addwfc	postdec2,f,c
  1132  000B28                     
  1133                           ; BSR set to: 0
  1134                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1135  000B28  0E00               	movlw	0
  1136  000B2A  6E02               	movwf	(fputc@c+1)^0,c
  1137  000B2C  0E25               	movlw	37
  1138  000B2E  6E01               	movwf	fputc@c^0,c
  1139  000B30  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1140  000B34  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1141  000B38  EC9C  F007         	call	_fputc	;wreg free
  1142  000B3C                     l1362:
  1143                           
  1144                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1145  000B3C  0E00               	movlw	0
  1146  000B3E  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1147  000B40  0E01               	movlw	1
  1148  000B42  6E3C               	movwf	?_vfpfcnvrt^0,c
  1149  000B44  EFCC  F005         	goto	l160
  1150  000B48                     l1366:
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1154  000B48  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1155  000B4C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1156  000B50  2ADE               	incf	postinc2,f,c
  1157  000B52  0E00               	movlw	0
  1158  000B54  22DD               	addwfc	postdec2,f,c
  1159  000B56                     
  1160                           ; BSR set to: 0
  1161                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1162  000B56  0E00               	movlw	0
  1163  000B58  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1164  000B5A  0E00               	movlw	0
  1165  000B5C  6E3C               	movwf	?_vfpfcnvrt^0,c
  1166  000B5E  EFCC  F005         	goto	l160
  1167  000B62                     l1372:
  1168                           
  1169                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1170  000B62  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1171  000B66  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1172  000B6A  CFDE FFF6          	movff	postinc2,tblptrl
  1173  000B6E  CFDD FFF7          	movff	postdec2,tblptrh
  1174  000B72                     	if	0	;tblptru may be non-zero
  1175  000B72                     	endif
  1176  000B72                     	if	0	;tblptru may be non-zero
  1177  000B72                     	endif
  1178  000B72  0008               	tblrd		*
  1179  000B74  50F5               	movf	tablat,w,c
  1180  000B76  6E01               	movwf	fputc@c^0,c
  1181  000B78  6A02               	clrf	(fputc@c+1)^0,c
  1182  000B7A  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1183  000B7E  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1184  000B82  EC9C  F007         	call	_fputc	;wreg free
  1185  000B86                     
  1186                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1187  000B86  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1188  000B8A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1189  000B8E  2ADE               	incf	postinc2,f,c
  1190  000B90  0E00               	movlw	0
  1191  000B92  22DD               	addwfc	postdec2,f,c
  1192  000B94  EF9E  F005         	goto	l1362
  1193  000B98                     l160:
  1194  000B98  0012               	return		;funcret
  1195  000B9A                     __end_of_vfpfcnvrt:
  1196                           	opt callstack 0
  1197                           
  1198 ;; *************** function _utoa *****************
  1199 ;; Defined at:
  1200 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1203 ;;		 -> sprintf@f(6), 
  1204 ;;  d               8   29[COMRAM] unsigned long long 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  n               8   49[COMRAM] unsigned long long 
  1207 ;;  i               2   57[COMRAM] int 
  1208 ;;  w               2   47[COMRAM] int 
  1209 ;;  p               2   45[COMRAM] int 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  2   27[COMRAM] int 
  1212 ;; Registers used:
  1213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1219 ;;      Params:        10       0       0       0       0       0       0       0       0
  1220 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1221 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1222 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1223 ;;Total ram usage:       32 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    4
  1226 ;; This function calls:
  1227 ;;		___lodiv
  1228 ;;		___lomod
  1229 ;;		_pad
  1230 ;; This function is called by:
  1231 ;;		_vfpfcnvrt
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text6
  1236  000808                     __ptext6:
  1237                           	opt callstack 0
  1238  000808                     _utoa:
  1239                           	opt callstack 23
  1240  000808                     
  1241                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1242  000808  0100               	movlb	0	; () banked
  1243  00080A  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1244  00080C  EF0A  F004         	goto	u571
  1245  000810  EF0C  F004         	goto	u570
  1246  000814                     u571:
  1247  000814  EF0D  F004         	goto	l1308
  1248  000818                     u570:
  1249  000818                     
  1250                           ; BSR set to: 0
  1251                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1252  000818  925E               	bcf	_flags^0,1,c
  1253  00081A                     l1308:
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1257  00081A  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1258  00081C  EF1A  F004         	goto	u580
  1259  000820  5165               	movf	(_prec+1)& (0+255),w,b
  1260  000822  E106               	bnz	u581
  1261  000824  0564               	decf	_prec& (0+255),w,b
  1262  000826  B0D8               	btfsc	status,0,c
  1263  000828  EF18  F004         	goto	u581
  1264  00082C  EF1A  F004         	goto	u580
  1265  000830                     u581:
  1266  000830  EF20  F004         	goto	l145
  1267  000834                     u580:
  1268  000834                     
  1269                           ; BSR set to: 0
  1270  000834  0E00               	movlw	0
  1271  000836  6E2F               	movwf	(utoa@p+1)^0,c
  1272  000838  0E01               	movlw	1
  1273  00083A  6E2E               	movwf	utoa@p^0,c
  1274  00083C  EF24  F004         	goto	l147
  1275  000840                     l145:
  1276                           
  1277                           ; BSR set to: 0
  1278  000840  C064  F02E         	movff	_prec,utoa@p
  1279  000844  C065  F02F         	movff	_prec+1,utoa@p+1
  1280  000848                     l147:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1284  000848  C062  F030         	movff	_width,utoa@w
  1285  00084C  C063  F031         	movff	_width+1,utoa@w+1
  1286                           
  1287                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1288  000850  C01E  F032         	movff	utoa@d,utoa@n
  1289  000854  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1290  000858  C020  F034         	movff	utoa@d+2,utoa@n+2
  1291  00085C  C021  F035         	movff	utoa@d+3,utoa@n+3
  1292  000860  C022  F036         	movff	utoa@d+4,utoa@n+4
  1293  000864  C023  F037         	movff	utoa@d+5,utoa@n+5
  1294  000868  C024  F038         	movff	utoa@d+6,utoa@n+6
  1295  00086C  C025  F039         	movff	utoa@d+7,utoa@n+7
  1296  000870                     
  1297                           ; BSR set to: 0
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1299  000870  0E00               	movlw	0
  1300  000872  6E3B               	movwf	(utoa@i+1)^0,c
  1301  000874  0E1F               	movlw	31
  1302  000876  6E3A               	movwf	utoa@i^0,c
  1303  000878                     
  1304                           ; BSR set to: 0
  1305                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1306  000878  0E00               	movlw	0
  1307  00087A  6F87               	movwf	(_dbuf+31)& (0+255),b
  1308                           
  1309                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1310  00087C  EFB6  F004         	goto	l1326
  1311  000880                     l1316:
  1312                           
  1313                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1314  000880  063A               	decf	utoa@i^0,f,c
  1315  000882  A0D8               	btfss	status,0,c
  1316  000884  063B               	decf	(utoa@i+1)^0,f,c
  1317  000886                     
  1318                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1319  000886  0E68               	movlw	low _dbuf
  1320  000888  243A               	addwf	utoa@i^0,w,c
  1321  00088A  6ED9               	movwf	fsr2l,c
  1322  00088C  0E00               	movlw	high _dbuf
  1323  00088E  203B               	addwfc	(utoa@i+1)^0,w,c
  1324  000890  6EDA               	movwf	fsr2h,c
  1325  000892  C032  F001         	movff	utoa@n,___lomod@dividend
  1326  000896  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1327  00089A  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1328  00089E  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1329  0008A2  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1330  0008A6  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1331  0008AA  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1332  0008AE  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1333  0008B2  0E0A               	movlw	10
  1334  0008B4  6E09               	movwf	___lomod@divisor^0,c
  1335  0008B6  0E00               	movlw	0
  1336  0008B8  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1337  0008BA  0E00               	movlw	0
  1338  0008BC  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1339  0008BE  0E00               	movlw	0
  1340  0008C0  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1341  0008C2  0E00               	movlw	0
  1342  0008C4  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1343  0008C6  0E00               	movlw	0
  1344  0008C8  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1345  0008CA  0E00               	movlw	0
  1346  0008CC  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1347  0008CE  0E00               	movlw	0
  1348  0008D0  6E10               	movwf	(___lomod@divisor+7)^0,c
  1349  0008D2  EC34  F007         	call	___lomod	;wreg free
  1350  0008D6  C001  F026         	movff	?___lomod,??_utoa
  1351  0008DA  C002  F027         	movff	?___lomod+1,??_utoa+1
  1352  0008DE  C003  F028         	movff	?___lomod+2,??_utoa+2
  1353  0008E2  C004  F029         	movff	?___lomod+3,??_utoa+3
  1354  0008E6  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1355  0008EA  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1356  0008EE  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1357  0008F2  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1358  0008F6  5026               	movf	??_utoa^0,w,c
  1359  0008F8  0F30               	addlw	48
  1360  0008FA  6EDF               	movwf	indf2,c
  1361  0008FC                     
  1362                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1363  0008FC  062E               	decf	utoa@p^0,f,c
  1364  0008FE  A0D8               	btfss	status,0,c
  1365  000900  062F               	decf	(utoa@p+1)^0,f,c
  1366  000902                     
  1367                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1368  000902  0630               	decf	utoa@w^0,f,c
  1369  000904  A0D8               	btfss	status,0,c
  1370  000906  0631               	decf	(utoa@w+1)^0,f,c
  1371  000908                     
  1372                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1373  000908  C032  F001         	movff	utoa@n,___lodiv@dividend
  1374  00090C  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1375  000910  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1376  000914  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1377  000918  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1378  00091C  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1379  000920  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1380  000924  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1381  000928  0E0A               	movlw	10
  1382  00092A  6E09               	movwf	___lodiv@divisor^0,c
  1383  00092C  0E00               	movlw	0
  1384  00092E  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1385  000930  0E00               	movlw	0
  1386  000932  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1387  000934  0E00               	movlw	0
  1388  000936  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1389  000938  0E00               	movlw	0
  1390  00093A  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1391  00093C  0E00               	movlw	0
  1392  00093E  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1393  000940  0E00               	movlw	0
  1394  000942  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1395  000944  0E00               	movlw	0
  1396  000946  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1397  000948  EC53  F006         	call	___lodiv	;wreg free
  1398  00094C  C001  F032         	movff	?___lodiv,utoa@n
  1399  000950  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1400  000954  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1401  000958  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1402  00095C  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1403  000960  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1404  000964  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1405  000968  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1406  00096C                     l1326:
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1409  00096C  503A               	movf	utoa@i^0,w,c
  1410  00096E  103B               	iorwf	(utoa@i+1)^0,w,c
  1411  000970  B4D8               	btfsc	status,2,c
  1412  000972  EFBD  F004         	goto	u591
  1413  000976  EFBF  F004         	goto	u590
  1414  00097A                     u591:
  1415  00097A  EFEF  F004         	goto	l1336
  1416  00097E                     u590:
  1417  00097E  5032               	movf	utoa@n^0,w,c
  1418  000980  1033               	iorwf	(utoa@n+1)^0,w,c
  1419  000982  1034               	iorwf	(utoa@n+2)^0,w,c
  1420  000984  1035               	iorwf	(utoa@n+3)^0,w,c
  1421  000986  1036               	iorwf	(utoa@n+4)^0,w,c
  1422  000988  1037               	iorwf	(utoa@n+5)^0,w,c
  1423  00098A  1038               	iorwf	(utoa@n+6)^0,w,c
  1424  00098C  1039               	iorwf	(utoa@n+7)^0,w,c
  1425  00098E  A4D8               	btfss	status,2,c
  1426  000990  EFCC  F004         	goto	u601
  1427  000994  EFCE  F004         	goto	u600
  1428  000998                     u601:
  1429  000998  EF40  F004         	goto	l1316
  1430  00099C                     u600:
  1431  00099C  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1432  00099E  EFDB  F004         	goto	u610
  1433  0009A2  502F               	movf	(utoa@p+1)^0,w,c
  1434  0009A4  E106               	bnz	u611
  1435  0009A6  042E               	decf	utoa@p^0,w,c
  1436  0009A8  B0D8               	btfsc	status,0,c
  1437  0009AA  EFD9  F004         	goto	u611
  1438  0009AE  EFDB  F004         	goto	u610
  1439  0009B2                     u611:
  1440  0009B2  EF40  F004         	goto	l1316
  1441  0009B6                     u610:
  1442  0009B6  BE31               	btfsc	(utoa@w+1)^0,7,c
  1443  0009B8  EFE6  F004         	goto	u621
  1444  0009BC  5031               	movf	(utoa@w+1)^0,w,c
  1445  0009BE  E108               	bnz	u620
  1446  0009C0  0430               	decf	utoa@w^0,w,c
  1447  0009C2  A0D8               	btfss	status,0,c
  1448  0009C4  EFE6  F004         	goto	u621
  1449  0009C8  EFE8  F004         	goto	u620
  1450  0009CC                     u621:
  1451  0009CC  EFEF  F004         	goto	l1336
  1452  0009D0                     u620:
  1453  0009D0  B25E               	btfsc	_flags^0,1,c
  1454  0009D2  EFED  F004         	goto	u631
  1455  0009D6  EFEF  F004         	goto	u630
  1456  0009DA                     u631:
  1457  0009DA  EF40  F004         	goto	l1316
  1458  0009DE                     u630:
  1459  0009DE                     l1336:
  1460                           
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1462  0009DE  C01C  F011         	movff	utoa@fp,pad@fp
  1463  0009E2  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1464  0009E6  0E68               	movlw	low _dbuf
  1465  0009E8  243A               	addwf	utoa@i^0,w,c
  1466  0009EA  6E13               	movwf	pad@buf^0,c
  1467  0009EC  0E00               	movlw	high _dbuf
  1468  0009EE  203B               	addwfc	(utoa@i+1)^0,w,c
  1469  0009F0  6E14               	movwf	(pad@buf+1)^0,c
  1470  0009F2  C030  F015         	movff	utoa@w,pad@p
  1471  0009F6  C031  F016         	movff	utoa@w+1,pad@p+1
  1472  0009FA  EC01  F008         	call	_pad	;wreg free
  1473  0009FE  C011  F01C         	movff	?_pad,?_utoa
  1474  000A02  C012  F01D         	movff	?_pad+1,?_utoa+1
  1475  000A06  0012               	return		;funcret
  1476  000A08                     __end_of_utoa:
  1477                           	opt callstack 0
  1478                           
  1479 ;; *************** function _pad *****************
  1480 ;; Defined at:
  1481 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1484 ;;		 -> sprintf@f(6), 
  1485 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1486 ;;		 -> dbuf(32), 
  1487 ;;  p               2   20[COMRAM] int 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  w               2   25[COMRAM] int 
  1490 ;;  i               2   23[COMRAM] int 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2   16[COMRAM] int 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1500 ;;      Params:         6       0       0       0       0       0       0       0       0
  1501 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1502 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1503 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1504 ;;Total ram usage:       11 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    3
  1507 ;; This function calls:
  1508 ;;		_fputc
  1509 ;;		_fputs
  1510 ;;		_strlen
  1511 ;; This function is called by:
  1512 ;;		_utoa
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text7
  1517  001002                     __ptext7:
  1518                           	opt callstack 0
  1519  001002                     _pad:
  1520                           	opt callstack 23
  1521  001002                     
  1522                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1523  001002  A05E               	btfss	_flags^0,0,c
  1524  001004  EF06  F008         	goto	u461
  1525  001008  EF08  F008         	goto	u460
  1526  00100C                     u461:
  1527  00100C  EF12  F008         	goto	l1248
  1528  001010                     u460:
  1529  001010                     
  1530                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1531  001010  C013  F00A         	movff	pad@buf,fputs@s
  1532  001014  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1533  001018  C011  F00C         	movff	pad@fp,fputs@fp
  1534  00101C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1535  001020  EC23  F009         	call	_fputs	;wreg free
  1536  001024                     l1248:
  1537                           
  1538                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1539  001024  BE16               	btfsc	(pad@p+1)^0,7,c
  1540  001026  EF17  F008         	goto	u471
  1541  00102A  EF19  F008         	goto	u470
  1542  00102E                     u471:
  1543  00102E  EF1F  F008         	goto	l1252
  1544  001032                     u470:
  1545  001032  C015  F01A         	movff	pad@p,pad@w
  1546  001036  C016  F01B         	movff	pad@p+1,pad@w+1
  1547  00103A  EF23  F008         	goto	l135
  1548  00103E                     l1252:
  1549  00103E  0E00               	movlw	0
  1550  001040  6E1B               	movwf	(pad@w+1)^0,c
  1551  001042  0E00               	movlw	0
  1552  001044  6E1A               	movwf	pad@w^0,c
  1553  001046                     l135:
  1554                           
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1556  001046  0E00               	movlw	0
  1557  001048  6E19               	movwf	(pad@i+1)^0,c
  1558  00104A  0E00               	movlw	0
  1559  00104C  6E18               	movwf	pad@i^0,c
  1560                           
  1561                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1562  00104E  EF35  F008         	goto	l1258
  1563  001052                     l1254:
  1564                           
  1565                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1566  001052  0E00               	movlw	0
  1567  001054  6E02               	movwf	(fputc@c+1)^0,c
  1568  001056  0E20               	movlw	32
  1569  001058  6E01               	movwf	fputc@c^0,c
  1570  00105A  C011  F003         	movff	pad@fp,fputc@fp
  1571  00105E  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1572  001062  EC9C  F007         	call	_fputc	;wreg free
  1573  001066                     
  1574                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1575  001066  4A18               	infsnz	pad@i^0,f,c
  1576  001068  2A19               	incf	(pad@i+1)^0,f,c
  1577  00106A                     l1258:
  1578                           
  1579                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1580  00106A  501A               	movf	pad@w^0,w,c
  1581  00106C  5C18               	subwf	pad@i^0,w,c
  1582  00106E  5019               	movf	(pad@i+1)^0,w,c
  1583  001070  0A80               	xorlw	128
  1584  001072  6E17               	movwf	??_pad^0,c
  1585  001074  501B               	movf	(pad@w+1)^0,w,c
  1586  001076  0A80               	xorlw	128
  1587  001078  5817               	subwfb	??_pad^0,w,c
  1588  00107A  A0D8               	btfss	status,0,c
  1589  00107C  EF42  F008         	goto	u481
  1590  001080  EF44  F008         	goto	u480
  1591  001084                     u481:
  1592  001084  EF29  F008         	goto	l1254
  1593  001088                     u480:
  1594  001088                     
  1595                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1596  001088  B05E               	btfsc	_flags^0,0,c
  1597  00108A  EF49  F008         	goto	u491
  1598  00108E  EF4B  F008         	goto	u490
  1599  001092                     u491:
  1600  001092  EF55  F008         	goto	l1262
  1601  001096                     u490:
  1602  001096                     
  1603                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1604  001096  C013  F00A         	movff	pad@buf,fputs@s
  1605  00109A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1606  00109E  C011  F00C         	movff	pad@fp,fputs@fp
  1607  0010A2  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1608  0010A6  EC23  F009         	call	_fputs	;wreg free
  1609  0010AA                     l1262:
  1610                           
  1611                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1612  0010AA  C013  F001         	movff	pad@buf,strlen@s
  1613  0010AE  C014  F002         	movff	pad@buf+1,strlen@s+1
  1614  0010B2  EC82  F009         	call	_strlen	;wreg free
  1615  0010B6  501A               	movf	pad@w^0,w,c
  1616  0010B8  2401               	addwf	?_strlen^0,w,c
  1617  0010BA  6E11               	movwf	?_pad^0,c
  1618  0010BC  501B               	movf	(pad@w+1)^0,w,c
  1619  0010BE  2002               	addwfc	(?_strlen+1)^0,w,c
  1620  0010C0  6E12               	movwf	(?_pad+1)^0,c
  1621  0010C2  0012               	return		;funcret
  1622  0010C4                     __end_of_pad:
  1623                           	opt callstack 0
  1624                           
  1625 ;; *************** function _strlen *****************
  1626 ;; Defined at:
  1627 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1630 ;;		 -> dbuf(32), valor1_c(10), 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1633 ;;		 -> dbuf(32), valor1_c(10), 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  2    0[COMRAM] unsigned int 
  1636 ;; Registers used:
  1637 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1643 ;;      Params:         2       0       0       0       0       0       0       0       0
  1644 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1646 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1647 ;;Total ram usage:        4 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_pad
  1653 ;;		_strcat
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text8
  1658  001304                     __ptext8:
  1659                           	opt callstack 0
  1660  001304                     _strlen:
  1661                           	opt callstack 29
  1662  001304  C001  F003         	movff	strlen@s,strlen@a
  1663  001308  C002  F004         	movff	strlen@s+1,strlen@a+1
  1664  00130C  EF8A  F009         	goto	l1238
  1665  001310                     l1236:
  1666  001310  4A01               	infsnz	strlen@s^0,f,c
  1667  001312  2A02               	incf	(strlen@s+1)^0,f,c
  1668  001314                     l1238:
  1669  001314  C001  FFD9         	movff	strlen@s,fsr2l
  1670  001318  C002  FFDA         	movff	strlen@s+1,fsr2h
  1671  00131C  50DF               	movf	indf2,w,c
  1672  00131E  A4D8               	btfss	status,2,c
  1673  001320  EF94  F009         	goto	u451
  1674  001324  EF96  F009         	goto	u450
  1675  001328                     u451:
  1676  001328  EF88  F009         	goto	l1236
  1677  00132C                     u450:
  1678  00132C  5003               	movf	strlen@a^0,w,c
  1679  00132E  5C01               	subwf	strlen@s^0,w,c
  1680  001330  6E01               	movwf	?_strlen^0,c
  1681  001332  5004               	movf	(strlen@a+1)^0,w,c
  1682  001334  5802               	subwfb	(strlen@s+1)^0,w,c
  1683  001336  6E02               	movwf	(?_strlen+1)^0,c
  1684  001338  0012               	return		;funcret
  1685  00133A                     __end_of_strlen:
  1686                           	opt callstack 0
  1687                           
  1688 ;; *************** function _fputs *****************
  1689 ;; Defined at:
  1690 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1693 ;;		 -> dbuf(32), 
  1694 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1695 ;;		 -> sprintf@f(6), 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  i               2   14[COMRAM] int 
  1698 ;;  c               1   13[COMRAM] unsigned char 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2    9[COMRAM] int 
  1701 ;; Registers used:
  1702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1708 ;;      Params:         4       0       0       0       0       0       0       0       0
  1709 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1711 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1712 ;;Total ram usage:        7 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    2
  1715 ;; This function calls:
  1716 ;;		_fputc
  1717 ;; This function is called by:
  1718 ;;		_pad
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text9
  1723  001246                     __ptext9:
  1724                           	opt callstack 0
  1725  001246                     _fputs:
  1726                           	opt callstack 23
  1727  001246  0E00               	movlw	0
  1728  001248  6E10               	movwf	(fputs@i+1)^0,c
  1729  00124A  0E00               	movlw	0
  1730  00124C  6E0F               	movwf	fputs@i^0,c
  1731  00124E  EF34  F009         	goto	l1232
  1732  001252                     l1228:
  1733  001252  C00E  F001         	movff	fputs@c,fputc@c
  1734  001256  6A02               	clrf	(fputc@c+1)^0,c
  1735  001258  C00C  F003         	movff	fputs@fp,fputc@fp
  1736  00125C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1737  001260  EC9C  F007         	call	_fputc	;wreg free
  1738  001264  4A0F               	infsnz	fputs@i^0,f,c
  1739  001266  2A10               	incf	(fputs@i+1)^0,f,c
  1740  001268                     l1232:
  1741  001268  500F               	movf	fputs@i^0,w,c
  1742  00126A  240A               	addwf	fputs@s^0,w,c
  1743  00126C  6ED9               	movwf	fsr2l,c
  1744  00126E  5010               	movf	(fputs@i+1)^0,w,c
  1745  001270  200B               	addwfc	(fputs@s+1)^0,w,c
  1746  001272  6EDA               	movwf	fsr2h,c
  1747  001274  50DF               	movf	indf2,w,c
  1748  001276  6E0E               	movwf	fputs@c^0,c
  1749  001278  500E               	movf	fputs@c^0,w,c
  1750  00127A  A4D8               	btfss	status,2,c
  1751  00127C  EF42  F009         	goto	u441
  1752  001280  EF44  F009         	goto	u440
  1753  001284                     u441:
  1754  001284  EF29  F009         	goto	l1228
  1755  001288                     u440:
  1756  001288  0012               	return		;funcret
  1757  00128A                     __end_of_fputs:
  1758                           	opt callstack 0
  1759                           
  1760 ;; *************** function _fputc *****************
  1761 ;; Defined at:
  1762 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  c               2    0[COMRAM] int 
  1765 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1766 ;;		 -> sprintf@f(6), 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  2    0[COMRAM] int 
  1771 ;; Registers used:
  1772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1778 ;;      Params:         4       0       0       0       0       0       0       0       0
  1779 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1780 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1781 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1782 ;;Total ram usage:        9 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    1
  1785 ;; This function calls:
  1786 ;;		_putch
  1787 ;; This function is called by:
  1788 ;;		_pad
  1789 ;;		_vfpfcnvrt
  1790 ;;		_fputs
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text10
  1795  000F38                     __ptext10:
  1796                           	opt callstack 0
  1797  000F38                     _fputc:
  1798                           	opt callstack 23
  1799  000F38  5003               	movf	fputc@fp^0,w,c
  1800  000F3A  1004               	iorwf	(fputc@fp+1)^0,w,c
  1801  000F3C  B4D8               	btfsc	status,2,c
  1802  000F3E  EFA3  F007         	goto	u401
  1803  000F42  EFA5  F007         	goto	u400
  1804  000F46                     u401:
  1805  000F46  EFAE  F007         	goto	l1216
  1806  000F4A                     u400:
  1807  000F4A  5003               	movf	fputc@fp^0,w,c
  1808  000F4C  1004               	iorwf	(fputc@fp+1)^0,w,c
  1809  000F4E  A4D8               	btfss	status,2,c
  1810  000F50  EFAC  F007         	goto	u411
  1811  000F54  EFAE  F007         	goto	u410
  1812  000F58                     u411:
  1813  000F58  EFB3  F007         	goto	l1218
  1814  000F5C                     u410:
  1815  000F5C                     l1216:
  1816  000F5C  5001               	movf	fputc@c^0,w,c
  1817  000F5E  ECE3  F009         	call	_putch
  1818  000F62  EF00  F008         	goto	l853
  1819  000F66                     l1218:
  1820  000F66  EE20 F004          	lfsr	2,4
  1821  000F6A  5003               	movf	fputc@fp^0,w,c
  1822  000F6C  26D9               	addwf	fsr2l,f,c
  1823  000F6E  5004               	movf	(fputc@fp+1)^0,w,c
  1824  000F70  22DA               	addwfc	fsr2h,f,c
  1825  000F72  50DE               	movf	postinc2,w,c
  1826  000F74  10DE               	iorwf	postinc2,w,c
  1827  000F76  B4D8               	btfsc	status,2,c
  1828  000F78  EFC0  F007         	goto	u421
  1829  000F7C  EFC2  F007         	goto	u420
  1830  000F80                     u421:
  1831  000F80  EFDD  F007         	goto	l1222
  1832  000F84                     u420:
  1833  000F84  EE20 F004          	lfsr	2,4
  1834  000F88  5003               	movf	fputc@fp^0,w,c
  1835  000F8A  26D9               	addwf	fsr2l,f,c
  1836  000F8C  5004               	movf	(fputc@fp+1)^0,w,c
  1837  000F8E  22DA               	addwfc	fsr2h,f,c
  1838  000F90  EE10 F002          	lfsr	1,2
  1839  000F94  5003               	movf	fputc@fp^0,w,c
  1840  000F96  26E1               	addwf	fsr1l,f,c
  1841  000F98  5004               	movf	(fputc@fp+1)^0,w,c
  1842  000F9A  22E2               	addwfc	fsr1h,f,c
  1843  000F9C  50DE               	movf	postinc2,w,c
  1844  000F9E  5CE6               	subwf	postinc1,w,c
  1845  000FA0  50E6               	movf	postinc1,w,c
  1846  000FA2  0A80               	xorlw	128
  1847  000FA4  6E09               	movwf	(??_fputc+4)^0,c
  1848  000FA6  50DE               	movf	postinc2,w,c
  1849  000FA8  0A80               	xorlw	128
  1850  000FAA  5809               	subwfb	(??_fputc+4)^0,w,c
  1851  000FAC  B0D8               	btfsc	status,0,c
  1852  000FAE  EFDB  F007         	goto	u431
  1853  000FB2  EFDD  F007         	goto	u430
  1854  000FB6                     u431:
  1855  000FB6  EF00  F008         	goto	l853
  1856  000FBA                     u430:
  1857  000FBA                     l1222:
  1858  000FBA  EE20 F002          	lfsr	2,2
  1859  000FBE  5003               	movf	fputc@fp^0,w,c
  1860  000FC0  26D9               	addwf	fsr2l,f,c
  1861  000FC2  5004               	movf	(fputc@fp+1)^0,w,c
  1862  000FC4  22DA               	addwfc	fsr2h,f,c
  1863  000FC6  CFDE F005          	movff	postinc2,??_fputc
  1864  000FCA  CFDD F006          	movff	postdec2,??_fputc+1
  1865  000FCE  C003  FFD9         	movff	fputc@fp,fsr2l
  1866  000FD2  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1867  000FD6  CFDE F007          	movff	postinc2,??_fputc+2
  1868  000FDA  CFDD F008          	movff	postdec2,??_fputc+3
  1869  000FDE  5005               	movf	??_fputc^0,w,c
  1870  000FE0  2407               	addwf	(??_fputc+2)^0,w,c
  1871  000FE2  6ED9               	movwf	fsr2l,c
  1872  000FE4  5006               	movf	(??_fputc+1)^0,w,c
  1873  000FE6  2008               	addwfc	(??_fputc+3)^0,w,c
  1874  000FE8  6EDA               	movwf	fsr2h,c
  1875  000FEA  C001  FFDF         	movff	fputc@c,indf2
  1876  000FEE  EE20 F002          	lfsr	2,2
  1877  000FF2  5003               	movf	fputc@fp^0,w,c
  1878  000FF4  26D9               	addwf	fsr2l,f,c
  1879  000FF6  5004               	movf	(fputc@fp+1)^0,w,c
  1880  000FF8  22DA               	addwfc	fsr2h,f,c
  1881  000FFA  2ADE               	incf	postinc2,f,c
  1882  000FFC  0E00               	movlw	0
  1883  000FFE  22DD               	addwfc	postdec2,f,c
  1884  001000                     l853:
  1885  001000  0012               	return		;funcret
  1886  001002                     __end_of_fputc:
  1887                           	opt callstack 0
  1888                           
  1889 ;; *************** function _putch *****************
  1890 ;; Defined at:
  1891 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;  c               1    wreg     unsigned char 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  c               1    0[COMRAM] unsigned char 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_fputc
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text11
  1919  0013C6                     __ptext11:
  1920                           	opt callstack 0
  1921  0013C6                     _putch:
  1922                           	opt callstack 23
  1923  0013C6  0012               	return		;funcret
  1924  0013C8                     __end_of_putch:
  1925                           	opt callstack 0
  1926                           
  1927 ;; *************** function ___lomod *****************
  1928 ;; Defined at:
  1929 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lomod.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  dividend        8    0[COMRAM] unsigned long long 
  1932 ;;  divisor         8    8[COMRAM] unsigned long long 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;  counter         1   16[COMRAM] unsigned char 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  8    0[COMRAM] unsigned long long 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2, status,0
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1944 ;;      Params:        16       0       0       0       0       0       0       0       0
  1945 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1947 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1948 ;;Total ram usage:       17 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; This function calls:
  1951 ;;		Nothing
  1952 ;; This function is called by:
  1953 ;;		_utoa
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text12
  1958  000E68                     __ptext12:
  1959                           	opt callstack 0
  1960  000E68                     ___lomod:
  1961                           	opt callstack 26
  1962  000E68  5009               	movf	___lomod@divisor^0,w,c
  1963  000E6A  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  1964  000E6C  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  1965  000E6E  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  1966  000E70  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  1967  000E72  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  1968  000E74  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  1969  000E76  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  1970  000E78  B4D8               	btfsc	status,2,c
  1971  000E7A  EF41  F007         	goto	u541
  1972  000E7E  EF43  F007         	goto	u540
  1973  000E82                     u541:
  1974  000E82  EF8B  F007         	goto	l618
  1975  000E86                     u540:
  1976  000E86  0E01               	movlw	1
  1977  000E88  6E11               	movwf	___lomod@counter^0,c
  1978  000E8A  EF51  F007         	goto	l1294
  1979  000E8E                     l1292:
  1980  000E8E  90D8               	bcf	status,0,c
  1981  000E90  3609               	rlcf	___lomod@divisor^0,f,c
  1982  000E92  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  1983  000E94  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  1984  000E96  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  1985  000E98  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  1986  000E9A  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  1987  000E9C  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  1988  000E9E  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  1989  000EA0  2A11               	incf	___lomod@counter^0,f,c
  1990  000EA2                     l1294:
  1991  000EA2  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  1992  000EA4  EF56  F007         	goto	u551
  1993  000EA8  EF58  F007         	goto	u550
  1994  000EAC                     u551:
  1995  000EAC  EF47  F007         	goto	l1292
  1996  000EB0                     u550:
  1997  000EB0                     l1296:
  1998  000EB0  5009               	movf	___lomod@divisor^0,w,c
  1999  000EB2  5C01               	subwf	___lomod@dividend^0,w,c
  2000  000EB4  500A               	movf	(___lomod@divisor+1)^0,w,c
  2001  000EB6  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  2002  000EB8  500B               	movf	(___lomod@divisor+2)^0,w,c
  2003  000EBA  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  2004  000EBC  500C               	movf	(___lomod@divisor+3)^0,w,c
  2005  000EBE  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  2006  000EC0  500D               	movf	(___lomod@divisor+4)^0,w,c
  2007  000EC2  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  2008  000EC4  500E               	movf	(___lomod@divisor+5)^0,w,c
  2009  000EC6  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  2010  000EC8  500F               	movf	(___lomod@divisor+6)^0,w,c
  2011  000ECA  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  2012  000ECC  5010               	movf	(___lomod@divisor+7)^0,w,c
  2013  000ECE  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  2014  000ED0  A0D8               	btfss	status,0,c
  2015  000ED2  EF6D  F007         	goto	u561
  2016  000ED6  EF6F  F007         	goto	u560
  2017  000EDA                     u561:
  2018  000EDA  EF7F  F007         	goto	l1300
  2019  000EDE                     u560:
  2020  000EDE  5009               	movf	___lomod@divisor^0,w,c
  2021  000EE0  5E01               	subwf	___lomod@dividend^0,f,c
  2022  000EE2  500A               	movf	(___lomod@divisor+1)^0,w,c
  2023  000EE4  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  2024  000EE6  500B               	movf	(___lomod@divisor+2)^0,w,c
  2025  000EE8  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  2026  000EEA  500C               	movf	(___lomod@divisor+3)^0,w,c
  2027  000EEC  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  2028  000EEE  500D               	movf	(___lomod@divisor+4)^0,w,c
  2029  000EF0  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  2030  000EF2  500E               	movf	(___lomod@divisor+5)^0,w,c
  2031  000EF4  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  2032  000EF6  500F               	movf	(___lomod@divisor+6)^0,w,c
  2033  000EF8  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  2034  000EFA  5010               	movf	(___lomod@divisor+7)^0,w,c
  2035  000EFC  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  2036  000EFE                     l1300:
  2037  000EFE  90D8               	bcf	status,0,c
  2038  000F00  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  2039  000F02  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  2040  000F04  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  2041  000F06  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  2042  000F08  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  2043  000F0A  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  2044  000F0C  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  2045  000F0E  3209               	rrcf	___lomod@divisor^0,f,c
  2046  000F10  2E11               	decfsz	___lomod@counter^0,f,c
  2047  000F12  EF58  F007         	goto	l1296
  2048  000F16                     l618:
  2049  000F16  C001  F001         	movff	___lomod@dividend,?___lomod
  2050  000F1A  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2051  000F1E  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2052  000F22  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2053  000F26  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2054  000F2A  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2055  000F2E  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2056  000F32  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2057  000F36  0012               	return		;funcret
  2058  000F38                     __end_of___lomod:
  2059                           	opt callstack 0
  2060                           
  2061 ;; *************** function ___lodiv *****************
  2062 ;; Defined at:
  2063 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lodiv.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  dividend        8    0[COMRAM] unsigned long long 
  2066 ;;  divisor         8    8[COMRAM] unsigned long long 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  quotient        8   16[COMRAM] unsigned long long 
  2069 ;;  counter         1   24[COMRAM] unsigned char 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  8    0[COMRAM] unsigned long long 
  2072 ;; Registers used:
  2073 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2079 ;;      Params:        16       0       0       0       0       0       0       0       0
  2080 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2082 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2083 ;;Total ram usage:       25 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_utoa
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text13
  2093  000CA6                     __ptext13:
  2094                           	opt callstack 0
  2095  000CA6                     ___lodiv:
  2096                           	opt callstack 26
  2097  000CA6  EE20  F011         	lfsr	2,___lodiv@quotient
  2098  000CAA  0E07               	movlw	7
  2099  000CAC                     u501:
  2100  000CAC  6ADE               	clrf	postinc2,c
  2101  000CAE  06E8               	decf	wreg,f,c
  2102  000CB0  E2FD               	bc	u501
  2103  000CB2  5009               	movf	___lodiv@divisor^0,w,c
  2104  000CB4  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2105  000CB6  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2106  000CB8  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2107  000CBA  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2108  000CBC  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2109  000CBE  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2110  000CC0  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2111  000CC2  B4D8               	btfsc	status,2,c
  2112  000CC4  EF66  F006         	goto	u511
  2113  000CC8  EF68  F006         	goto	u510
  2114  000CCC                     u511:
  2115  000CCC  EFBA  F006         	goto	l608
  2116  000CD0                     u510:
  2117  000CD0  0E01               	movlw	1
  2118  000CD2  6E19               	movwf	___lodiv@counter^0,c
  2119  000CD4  EF76  F006         	goto	l1274
  2120  000CD8                     l1272:
  2121  000CD8  90D8               	bcf	status,0,c
  2122  000CDA  3609               	rlcf	___lodiv@divisor^0,f,c
  2123  000CDC  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2124  000CDE  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2125  000CE0  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2126  000CE2  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2127  000CE4  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2128  000CE6  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2129  000CE8  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2130  000CEA  2A19               	incf	___lodiv@counter^0,f,c
  2131  000CEC                     l1274:
  2132  000CEC  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2133  000CEE  EF7B  F006         	goto	u521
  2134  000CF2  EF7D  F006         	goto	u520
  2135  000CF6                     u521:
  2136  000CF6  EF6C  F006         	goto	l1272
  2137  000CFA                     u520:
  2138  000CFA                     l1276:
  2139  000CFA  90D8               	bcf	status,0,c
  2140  000CFC  3611               	rlcf	___lodiv@quotient^0,f,c
  2141  000CFE  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2142  000D00  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2143  000D02  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2144  000D04  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2145  000D06  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2146  000D08  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2147  000D0A  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2148  000D0C  5009               	movf	___lodiv@divisor^0,w,c
  2149  000D0E  5C01               	subwf	___lodiv@dividend^0,w,c
  2150  000D10  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2151  000D12  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2152  000D14  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2153  000D16  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2154  000D18  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2155  000D1A  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2156  000D1C  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2157  000D1E  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2158  000D20  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2159  000D22  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2160  000D24  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2161  000D26  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2162  000D28  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2163  000D2A  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2164  000D2C  A0D8               	btfss	status,0,c
  2165  000D2E  EF9B  F006         	goto	u531
  2166  000D32  EF9D  F006         	goto	u530
  2167  000D36                     u531:
  2168  000D36  EFAE  F006         	goto	l1284
  2169  000D3A                     u530:
  2170  000D3A  5009               	movf	___lodiv@divisor^0,w,c
  2171  000D3C  5E01               	subwf	___lodiv@dividend^0,f,c
  2172  000D3E  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2173  000D40  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2174  000D42  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2175  000D44  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2176  000D46  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2177  000D48  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2178  000D4A  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2179  000D4C  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2180  000D4E  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2181  000D50  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2182  000D52  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2183  000D54  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2184  000D56  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2185  000D58  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2186  000D5A  8011               	bsf	___lodiv@quotient^0,0,c
  2187  000D5C                     l1284:
  2188  000D5C  90D8               	bcf	status,0,c
  2189  000D5E  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2190  000D60  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2191  000D62  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2192  000D64  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2193  000D66  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2194  000D68  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2195  000D6A  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2196  000D6C  3209               	rrcf	___lodiv@divisor^0,f,c
  2197  000D6E  2E19               	decfsz	___lodiv@counter^0,f,c
  2198  000D70  EF7D  F006         	goto	l1276
  2199  000D74                     l608:
  2200  000D74  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2201  000D78  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2202  000D7C  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2203  000D80  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2204  000D84  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2205  000D88  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2206  000D8C  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2207  000D90  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2208  000D94  0012               	return		;funcret
  2209  000D96                     __end_of___lodiv:
  2210                           	opt callstack 0
  2211                           
  2212 ;; *************** function _serial_trama *****************
  2213 ;; Defined at:
  2214 ;;		line 31 in file "EUSART.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  data            2    1[COMRAM] PTR unsigned char 
  2217 ;;		 -> valor1_c(10), 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;  k               2    3[COMRAM] int 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2229 ;;      Params:         2       0       0       0       0       0       0       0       0
  2230 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2232 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2233 ;;Total ram usage:        4 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    1
  2236 ;; This function calls:
  2237 ;;		_serial_print
  2238 ;; This function is called by:
  2239 ;;		_main
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text14
  2244  00128A                     __ptext14:
  2245                           	opt callstack 0
  2246  00128A                     _serial_trama:
  2247                           	opt callstack 29
  2248  00128A                     
  2249                           ;EUSART.c: 33:     for (int k=0;data[k]!='\0';k++){
  2250  00128A  0E00               	movlw	0
  2251  00128C  6E05               	movwf	(serial_trama@k+1)^0,c
  2252  00128E  0E00               	movlw	0
  2253  001290  6E04               	movwf	serial_trama@k^0,c
  2254  001292  EF56  F009         	goto	l1484
  2255  001296                     l1480:
  2256                           
  2257                           ;EUSART.c: 35:         serial_print(data[k]);
  2258  001296  5004               	movf	serial_trama@k^0,w,c
  2259  001298  2402               	addwf	serial_trama@data^0,w,c
  2260  00129A  6ED9               	movwf	fsr2l,c
  2261  00129C  5005               	movf	(serial_trama@k+1)^0,w,c
  2262  00129E  2003               	addwfc	(serial_trama@data+1)^0,w,c
  2263  0012A0  6EDA               	movwf	fsr2h,c
  2264  0012A2  50DF               	movf	indf2,w,c
  2265  0012A4  ECD3  F009         	call	_serial_print
  2266  0012A8                     
  2267                           ;EUSART.c: 36:     }
  2268  0012A8  4A04               	infsnz	serial_trama@k^0,f,c
  2269  0012AA  2A05               	incf	(serial_trama@k+1)^0,f,c
  2270  0012AC                     l1484:
  2271  0012AC  5004               	movf	serial_trama@k^0,w,c
  2272  0012AE  2402               	addwf	serial_trama@data^0,w,c
  2273  0012B0  6ED9               	movwf	fsr2l,c
  2274  0012B2  5005               	movf	(serial_trama@k+1)^0,w,c
  2275  0012B4  2003               	addwfc	(serial_trama@data+1)^0,w,c
  2276  0012B6  6EDA               	movwf	fsr2h,c
  2277  0012B8  50DF               	movf	indf2,w,c
  2278  0012BA  A4D8               	btfss	status,2,c
  2279  0012BC  EF62  F009         	goto	u781
  2280  0012C0  EF64  F009         	goto	u780
  2281  0012C4                     u781:
  2282  0012C4  EF4B  F009         	goto	l1480
  2283  0012C8                     u780:
  2284  0012C8  0012               	return		;funcret
  2285  0012CA                     __end_of_serial_trama:
  2286                           	opt callstack 0
  2287                           
  2288 ;; *************** function _serial_print *****************
  2289 ;; Defined at:
  2290 ;;		line 25 in file "EUSART.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  caracter        1    wreg     unsigned char 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  caracter        1    0[COMRAM] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0
  2305 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2307 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2308 ;;Total ram usage:        1 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; This function calls:
  2311 ;;		Nothing
  2312 ;; This function is called by:
  2313 ;;		_serial_trama
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text15
  2318  0013A6                     __ptext15:
  2319                           	opt callstack 0
  2320  0013A6                     _serial_print:
  2321                           	opt callstack 29
  2322                           
  2323                           ;incstack = 0
  2324                           ;serial_print@caracter stored from wreg
  2325  0013A6  6E01               	movwf	serial_print@caracter^0,c
  2326  0013A8                     l53:
  2327  0013A8  A2AC               	btfss	172,1,c	;volatile
  2328  0013AA  EFD9  F009         	goto	u671
  2329  0013AE  EFDB  F009         	goto	u670
  2330  0013B2                     u671:
  2331  0013B2  EFD4  F009         	goto	l53
  2332  0013B6                     u670:
  2333  0013B6                     
  2334                           ;EUSART.c: 28:     TXREG1=caracter;
  2335  0013B6  C001  FFAD         	movff	serial_print@caracter,4013	;volatile
  2336  0013BA  0012               	return		;funcret
  2337  0013BC                     __end_of_serial_print:
  2338                           	opt callstack 0
  2339                           
  2340 ;; *************** function _serial_begin *****************
  2341 ;; Defined at:
  2342 ;;		line 6 in file "EUSART.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  baudios         4   14[COMRAM] long 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, status,0, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2356 ;;      Params:         4       0       0       0       0       0       0       0       0
  2357 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2359 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2360 ;;Total ram usage:        8 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    1
  2363 ;; This function calls:
  2364 ;;		___aldiv
  2365 ;; This function is called by:
  2366 ;;		_main
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text16
  2371  0010C4                     __ptext16:
  2372                           	opt callstack 0
  2373  0010C4                     _serial_begin:
  2374                           	opt callstack 29
  2375  0010C4                     
  2376                           ;EUSART.c: 8:     TRISCbits.RC6=0;
  2377  0010C4  9C94               	bcf	148,6,c	;volatile
  2378                           
  2379                           ;EUSART.c: 9:     TRISCbits.RC7=1;
  2380  0010C6  8E94               	bsf	148,7,c	;volatile
  2381                           
  2382                           ;EUSART.c: 10:     BAUDCONbits.BRG16=0;
  2383  0010C8  96B8               	bcf	184,3,c	;volatile
  2384                           
  2385                           ;EUSART.c: 11:     TXSTAbits.BRGH=0;
  2386  0010CA  94AC               	bcf	172,2,c	;volatile
  2387                           
  2388                           ;EUSART.c: 12:     TXSTAbits.SYNC=0;
  2389  0010CC  98AC               	bcf	172,4,c	;volatile
  2390  0010CE                     
  2391                           ;EUSART.c: 13:     SPBRG=(unsigned char)(((8000000/baudios)/64)-1);
  2392  0010CE  C00F  F005         	movff	serial_begin@baudios,___aldiv@divisor
  2393  0010D2  C010  F006         	movff	serial_begin@baudios+1,___aldiv@divisor+1
  2394  0010D6  C011  F007         	movff	serial_begin@baudios+2,___aldiv@divisor+2
  2395  0010DA  C012  F008         	movff	serial_begin@baudios+3,___aldiv@divisor+3
  2396  0010DE  0E00               	movlw	0
  2397  0010E0  6E01               	movwf	___aldiv@dividend^0,c
  2398  0010E2  0E12               	movlw	18
  2399  0010E4  6E02               	movwf	(___aldiv@dividend+1)^0,c
  2400  0010E6  0E7A               	movlw	122
  2401  0010E8  6E03               	movwf	(___aldiv@dividend+2)^0,c
  2402  0010EA  0E00               	movlw	0
  2403  0010EC  6E04               	movwf	(___aldiv@dividend+3)^0,c
  2404  0010EE  ECCD  F005         	call	___aldiv	;wreg free
  2405  0010F2  C001  F013         	movff	?___aldiv,_serial_begin$1454
  2406  0010F6  C002  F014         	movff	?___aldiv+1,_serial_begin$1454+1
  2407  0010FA  C003  F015         	movff	?___aldiv+2,_serial_begin$1454+2
  2408  0010FE  C004  F016         	movff	?___aldiv+3,_serial_begin$1454+3
  2409                           
  2410                           ;EUSART.c: 13:     SPBRG=(unsigned char)(((8000000/baudios)/64)-1);
  2411  001102  C013  F001         	movff	_serial_begin$1454,___aldiv@dividend
  2412  001106  C014  F002         	movff	_serial_begin$1454+1,___aldiv@dividend+1
  2413  00110A  C015  F003         	movff	_serial_begin$1454+2,___aldiv@dividend+2
  2414  00110E  C016  F004         	movff	_serial_begin$1454+3,___aldiv@dividend+3
  2415  001112  0E40               	movlw	64
  2416  001114  6E05               	movwf	___aldiv@divisor^0,c
  2417  001116  0E00               	movlw	0
  2418  001118  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2419  00111A  0E00               	movlw	0
  2420  00111C  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2421  00111E  0E00               	movlw	0
  2422  001120  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2423  001122  ECCD  F005         	call	___aldiv	;wreg free
  2424  001126  0401               	decf	?___aldiv^0,w,c
  2425  001128  6EAF               	movwf	175,c	;volatile
  2426  00112A                     
  2427                           ;EUSART.c: 14:     RCSTAbits.SPEN=1;
  2428  00112A  8EAB               	bsf	171,7,c	;volatile
  2429  00112C                     
  2430                           ;EUSART.c: 17:     TXSTAbits.TX9=0;
  2431  00112C  9CAC               	bcf	172,6,c	;volatile
  2432  00112E                     
  2433                           ;EUSART.c: 18:     TXSTAbits.TXEN=1;
  2434  00112E  8AAC               	bsf	172,5,c	;volatile
  2435  001130                     
  2436                           ;EUSART.c: 21:     RCSTAbits.RC9=0;
  2437  001130  9CAB               	bcf	171,6,c	;volatile
  2438  001132                     
  2439                           ;EUSART.c: 22:     RCSTAbits.CREN=1;
  2440  001132  88AB               	bsf	171,4,c	;volatile
  2441  001134  0012               	return		;funcret
  2442  001136                     __end_of_serial_begin:
  2443                           	opt callstack 0
  2444                           
  2445 ;; *************** function ___aldiv *****************
  2446 ;; Defined at:
  2447 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aldiv.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  dividend        4    0[COMRAM] long 
  2450 ;;  divisor         4    4[COMRAM] long 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  quotient        4   10[COMRAM] long 
  2453 ;;  sign            1    9[COMRAM] unsigned char 
  2454 ;;  counter         1    8[COMRAM] unsigned char 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  4    0[COMRAM] long 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2464 ;;      Params:         8       0       0       0       0       0       0       0       0
  2465 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2467 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2468 ;;Total ram usage:       14 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_serial_begin
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text17
  2478  000B9A                     __ptext17:
  2479                           	opt callstack 0
  2480  000B9A                     ___aldiv:
  2481                           	opt callstack 29
  2482  000B9A  0E00               	movlw	0
  2483  000B9C  6E0A               	movwf	___aldiv@sign^0,c
  2484  000B9E  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  2485  000BA0  EFD6  F005         	goto	u690
  2486  000BA4  EFD4  F005         	goto	u691
  2487  000BA8                     u691:
  2488  000BA8  EFE0  F005         	goto	l1400
  2489  000BAC                     u690:
  2490  000BAC  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  2491  000BAE  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  2492  000BB0  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  2493  000BB2  6C05               	negf	___aldiv@divisor^0,c
  2494  000BB4  0E00               	movlw	0
  2495  000BB6  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  2496  000BB8  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  2497  000BBA  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  2498  000BBC  0E01               	movlw	1
  2499  000BBE  6E0A               	movwf	___aldiv@sign^0,c
  2500  000BC0                     l1400:
  2501  000BC0  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  2502  000BC2  EFE7  F005         	goto	u700
  2503  000BC6  EFE5  F005         	goto	u701
  2504  000BCA                     u701:
  2505  000BCA  EFF1  F005         	goto	l1406
  2506  000BCE                     u700:
  2507  000BCE  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  2508  000BD0  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  2509  000BD2  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  2510  000BD4  6C01               	negf	___aldiv@dividend^0,c
  2511  000BD6  0E00               	movlw	0
  2512  000BD8  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  2513  000BDA  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  2514  000BDC  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  2515  000BDE  0E01               	movlw	1
  2516  000BE0  1A0A               	xorwf	___aldiv@sign^0,f,c
  2517  000BE2                     l1406:
  2518  000BE2  0E00               	movlw	0
  2519  000BE4  6E0B               	movwf	___aldiv@quotient^0,c
  2520  000BE6  0E00               	movlw	0
  2521  000BE8  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  2522  000BEA  0E00               	movlw	0
  2523  000BEC  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  2524  000BEE  0E00               	movlw	0
  2525  000BF0  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  2526  000BF2  5005               	movf	___aldiv@divisor^0,w,c
  2527  000BF4  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  2528  000BF6  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  2529  000BF8  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  2530  000BFA  B4D8               	btfsc	status,2,c
  2531  000BFC  EF02  F006         	goto	u711
  2532  000C00  EF04  F006         	goto	u710
  2533  000C04                     u711:
  2534  000C04  EF3A  F006         	goto	l1428
  2535  000C08                     u710:
  2536  000C08  0E01               	movlw	1
  2537  000C0A  6E09               	movwf	___aldiv@counter^0,c
  2538  000C0C  EF0E  F006         	goto	l1414
  2539  000C10                     l1412:
  2540  000C10  90D8               	bcf	status,0,c
  2541  000C12  3605               	rlcf	___aldiv@divisor^0,f,c
  2542  000C14  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  2543  000C16  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  2544  000C18  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  2545  000C1A  2A09               	incf	___aldiv@counter^0,f,c
  2546  000C1C                     l1414:
  2547  000C1C  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  2548  000C1E  EF13  F006         	goto	u721
  2549  000C22  EF15  F006         	goto	u720
  2550  000C26                     u721:
  2551  000C26  EF08  F006         	goto	l1412
  2552  000C2A                     u720:
  2553  000C2A                     l1416:
  2554  000C2A  90D8               	bcf	status,0,c
  2555  000C2C  360B               	rlcf	___aldiv@quotient^0,f,c
  2556  000C2E  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  2557  000C30  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  2558  000C32  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  2559  000C34  5005               	movf	___aldiv@divisor^0,w,c
  2560  000C36  5C01               	subwf	___aldiv@dividend^0,w,c
  2561  000C38  5006               	movf	(___aldiv@divisor+1)^0,w,c
  2562  000C3A  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  2563  000C3C  5007               	movf	(___aldiv@divisor+2)^0,w,c
  2564  000C3E  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  2565  000C40  5008               	movf	(___aldiv@divisor+3)^0,w,c
  2566  000C42  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  2567  000C44  A0D8               	btfss	status,0,c
  2568  000C46  EF27  F006         	goto	u731
  2569  000C4A  EF29  F006         	goto	u730
  2570  000C4E                     u731:
  2571  000C4E  EF32  F006         	goto	l1424
  2572  000C52                     u730:
  2573  000C52  5005               	movf	___aldiv@divisor^0,w,c
  2574  000C54  5E01               	subwf	___aldiv@dividend^0,f,c
  2575  000C56  5006               	movf	(___aldiv@divisor+1)^0,w,c
  2576  000C58  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  2577  000C5A  5007               	movf	(___aldiv@divisor+2)^0,w,c
  2578  000C5C  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  2579  000C5E  5008               	movf	(___aldiv@divisor+3)^0,w,c
  2580  000C60  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  2581  000C62  800B               	bsf	___aldiv@quotient^0,0,c
  2582  000C64                     l1424:
  2583  000C64  90D8               	bcf	status,0,c
  2584  000C66  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  2585  000C68  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  2586  000C6A  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  2587  000C6C  3205               	rrcf	___aldiv@divisor^0,f,c
  2588  000C6E  2E09               	decfsz	___aldiv@counter^0,f,c
  2589  000C70  EF15  F006         	goto	l1416
  2590  000C74                     l1428:
  2591  000C74  500A               	movf	___aldiv@sign^0,w,c
  2592  000C76  B4D8               	btfsc	status,2,c
  2593  000C78  EF40  F006         	goto	u741
  2594  000C7C  EF42  F006         	goto	u740
  2595  000C80                     u741:
  2596  000C80  EF4A  F006         	goto	l1432
  2597  000C84                     u740:
  2598  000C84  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  2599  000C86  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  2600  000C88  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  2601  000C8A  6C0B               	negf	___aldiv@quotient^0,c
  2602  000C8C  0E00               	movlw	0
  2603  000C8E  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  2604  000C90  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  2605  000C92  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  2606  000C94                     l1432:
  2607  000C94  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2608  000C98  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2609  000C9C  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2610  000CA0  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2611  000CA4  0012               	return		;funcret
  2612  000CA6                     __end_of___aldiv:
  2613                           	opt callstack 0
  2614                           
  2615 ;; *************** function _oscilador *****************
  2616 ;; Defined at:
  2617 ;;		line 44 in file "main.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2631 ;;      Params:         0       0       0       0       0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text18
  2645  0013BC                     __ptext18:
  2646                           	opt callstack 0
  2647  0013BC                     _oscilador:
  2648                           	opt callstack 30
  2649  0013BC                     
  2650                           ;main.c: 45:     OSCCON=0x60;
  2651  0013BC  0E60               	movlw	96
  2652  0013BE  6ED3               	movwf	211,c	;volatile
  2653                           
  2654                           ;main.c: 46:     OSCCON2=0x00;
  2655  0013C0  0E00               	movlw	0
  2656  0013C2  6ED2               	movwf	210,c	;volatile
  2657  0013C4  0012               	return		;funcret
  2658  0013C6                     __end_of_oscilador:
  2659                           	opt callstack 0
  2660                           
  2661 ;; *************** function _analogRead *****************
  2662 ;; Defined at:
  2663 ;;		line 23 in file "ADC.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  canal           1    wreg     unsigned char 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  canal           1    3[COMRAM] unsigned char 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  2    0[COMRAM] unsigned int 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         2       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2679 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2680 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2681 ;;Total ram usage:        4 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text19
  2691  0012CA                     __ptext19:
  2692                           	opt callstack 0
  2693  0012CA                     _analogRead:
  2694                           	opt callstack 30
  2695                           
  2696                           ;incstack = 0
  2697                           ;analogRead@canal stored from wreg
  2698  0012CA  6E04               	movwf	analogRead@canal^0,c
  2699  0012CC                     
  2700                           ;ADC.c: 24:     ADCON0bits.CHS=canal;
  2701  0012CC  C004  F003         	movff	analogRead@canal,??_analogRead
  2702  0012D0  4603               	rlncf	??_analogRead^0,f,c
  2703  0012D2  4603               	rlncf	??_analogRead^0,f,c
  2704  0012D4  50C2               	movf	194,w,c	;volatile
  2705  0012D6  1803               	xorwf	??_analogRead^0,w,c
  2706  0012D8  0B83               	andlw	-125
  2707  0012DA  1803               	xorwf	??_analogRead^0,w,c
  2708  0012DC  6EC2               	movwf	194,c	;volatile
  2709  0012DE                     
  2710                           ;ADC.c: 25:     ADCON0bits.GO_DONE=1;
  2711  0012DE  82C2               	bsf	194,1,c	;volatile
  2712  0012E0                     l30:
  2713  0012E0  B2C2               	btfsc	194,1,c	;volatile
  2714  0012E2  EF75  F009         	goto	u771
  2715  0012E6  EF77  F009         	goto	u770
  2716  0012EA                     u771:
  2717  0012EA  EF70  F009         	goto	l30
  2718  0012EE                     u770:
  2719  0012EE                     
  2720                           ;ADC.c: 27:     conversion=ADRESH<<8;
  2721  0012EE  50C4               	movf	196,w,c	;volatile
  2722  0012F0  0100               	movlb	0	; () banked
  2723  0012F2  6F67               	movwf	(_conversion+1)& (0+255),b
  2724  0012F4  6B66               	clrf	_conversion& (0+255),b
  2725  0012F6                     
  2726                           ; BSR set to: 0
  2727                           ;ADC.c: 28:     conversion|=ADRESL;
  2728  0012F6  50C3               	movf	195,w,c	;volatile
  2729  0012F8  1366               	iorwf	_conversion& (0+255),f,b
  2730  0012FA                     
  2731                           ; BSR set to: 0
  2732                           ;ADC.c: 29:     return conversion;
  2733  0012FA  C066  F001         	movff	_conversion,?_analogRead
  2734  0012FE  C067  F002         	movff	_conversion+1,?_analogRead+1
  2735  001302                     
  2736                           ; BSR set to: 0
  2737  001302  0012               	return		;funcret
  2738  001304                     __end_of_analogRead:
  2739                           	opt callstack 0
  2740                           
  2741 ;; *************** function _ADC_begin *****************
  2742 ;; Defined at:
  2743 ;;		line 4 in file "ADC.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2757 ;;      Params:         0       0       0       0       0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2760 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text20
  2771  00133A                     __ptext20:
  2772                           	opt callstack 0
  2773  00133A                     _ADC_begin:
  2774                           	opt callstack 30
  2775  00133A                     
  2776                           ;ADC.c: 5:     ANSELAbits.ANSA0=1;
  2777  00133A  010F               	movlb	15	; () banked
  2778  00133C  815B               	bsf	91,0,b	;volatile
  2779                           
  2780                           ;ADC.c: 6:     TRISAbits.RA0=1;
  2781  00133E  8092               	bsf	146,0,c	;volatile
  2782                           
  2783                           ;ADC.c: 7:     ANSELBbits.ANSB0=1;
  2784  001340  815C               	bsf	92,0,b	;volatile
  2785                           
  2786                           ;ADC.c: 8:     TRISBbits.RB0=1;
  2787  001342  8093               	bsf	147,0,c	;volatile
  2788                           
  2789                           ;ADC.c: 9:     ANSELCbits.ANSC2=1;
  2790  001344  855D               	bsf	93,2,b	;volatile
  2791                           
  2792                           ;ADC.c: 10:     TRISCbits.RC2=1;
  2793  001346  8494               	bsf	148,2,c	;volatile
  2794  001348                     
  2795                           ; BSR set to: 15
  2796                           ;ADC.c: 13:     ADCON0bits.CHS=0b0000;
  2797  001348  0E83               	movlw	-125
  2798  00134A  16C2               	andwf	194,f,c	;volatile
  2799  00134C                     
  2800                           ; BSR set to: 15
  2801                           ;ADC.c: 14:     ADCON1bits.PVCFG0=0b00;
  2802  00134C  94C1               	bcf	193,2,c	;volatile
  2803  00134E                     
  2804                           ; BSR set to: 15
  2805                           ;ADC.c: 15:     ADCON1bits.NVCFG1=0b00;
  2806  00134E  92C1               	bcf	193,1,c	;volatile
  2807                           
  2808                           ;ADC.c: 17:     ADCON2bits.ADCS=0b100;
  2809  001350  50C0               	movf	192,w,c	;volatile
  2810  001352  0BF8               	andlw	-8
  2811  001354  0904               	iorlw	4
  2812  001356  6EC0               	movwf	192,c	;volatile
  2813                           
  2814                           ;ADC.c: 18:     ADCON2bits.ACQT=0b010;
  2815  001358  50C0               	movf	192,w,c	;volatile
  2816  00135A  0BC7               	andlw	-57
  2817  00135C  0910               	iorlw	16
  2818  00135E  6EC0               	movwf	192,c	;volatile
  2819  001360                     
  2820                           ; BSR set to: 15
  2821                           ;ADC.c: 19:     ADCON2bits.ADFM=1;
  2822  001360  8EC0               	bsf	192,7,c	;volatile
  2823  001362                     
  2824                           ; BSR set to: 15
  2825                           ;ADC.c: 20:     ADCON0bits.ADON=1;
  2826  001362  80C2               	bsf	194,0,c	;volatile
  2827  001364                     
  2828                           ; BSR set to: 15
  2829  001364  0012               	return		;funcret
  2830  001366                     __end_of_ADC_begin:
  2831                           	opt callstack 0
  2832                           
  2833                           	psect	rparam
  2834  0000                     tosu	equ	0xFFF
  2835                           tosh	equ	0xFFE
  2836                           tosl	equ	0xFFD
  2837                           stkptr	equ	0xFFC
  2838                           pclatu	equ	0xFFB
  2839                           pclath	equ	0xFFA
  2840                           pcl	equ	0xFF9
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           indf0	equ	0xFEF
  2848                           postinc0	equ	0xFEE
  2849                           postdec0	equ	0xFED
  2850                           preinc0	equ	0xFEC
  2851                           plusw0	equ	0xFEB
  2852                           fsr0h	equ	0xFEA
  2853                           fsr0l	equ	0xFE9
  2854                           wreg	equ	0xFE8
  2855                           indf1	equ	0xFE7
  2856                           postinc1	equ	0xFE6
  2857                           postdec1	equ	0xFE5
  2858                           preinc1	equ	0xFE4
  2859                           plusw1	equ	0xFE3
  2860                           fsr1h	equ	0xFE2
  2861                           fsr1l	equ	0xFE1
  2862                           bsr	equ	0xFE0
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           preinc2	equ	0xFDC
  2867                           plusw2	equ	0xFDB
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         62
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160     15      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), valor1_c(BANK0[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), valor1_c(BANK0[10]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[2]), valor2_c(BANK0[10]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[2]), valor2_c(BANK0[10]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    strcat@src	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[2]), valor2_c(BANK0[10]), 

    strcat@dest	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1193_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> valor2_c(BANK0[10]), valor1_c(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 

    serial_trama@data	PTR unsigned char  size(2) Largest target is 10
		 -> valor1_c(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _strcat->_strcpy
    _strcpy->_strlen
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _serial_trama->_serial_print
    _serial_begin->___aldiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    7863
                                             91 COMRAM     2     2      0
                                             10 BANK0      5     0      5
                          _ADC_begin
                         _analogRead
                          _oscilador
                       _serial_begin
                       _serial_trama
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _strcat                                               4     0      4     866
                                             14 COMRAM     4     0      4
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                              10     6      4     248
                                              4 COMRAM    10     6      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6062
                                             85 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5559
                                             77 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    5206
                                             59 COMRAM    18    12      6
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3835
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2785
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _serial_trama                                         4     2      2     188
                                              1 COMRAM     4     2      2
                       _serial_print
 ---------------------------------------------------------------------------------
 (2) _serial_print                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _serial_begin                                         8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _oscilador                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _analogRead                                           4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_begin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_begin
   _analogRead
   _oscilador
   _serial_begin
     ___aldiv
   _serial_trama
     _serial_print
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
   _strcat
     _strcpy
       _strlen (ARG)
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F      4F       5       49.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AE       6        0.0%
DATA                 0      0      AE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 05 18:31:07 2020

                     l30 12E0                       l33 1302                       l50 1134  
                     l27 1364                       l53 13A8                       l62 12C8  
                     l56 13BA       __size_of_ADC_begin 002C             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l110 13C4                      l140 10C2  
                    l135 1046                      l160 0B98                      l145 0840  
                    l138 1088                      l155 0A06                      l147 0848  
                    l166 118E                      l167 1196                      l249 0CA4  
                    l615 0D94                      l608 0D74                      l625 0F36  
                    l618 0F16                      l853 1000                      l861 1288  
                    l871 13C6                      l890 1338                      l868 1244  
                    l884 11F2                      l878 138A             __CFG_CPB$OFF 000000  
                    u400 0F4A                      u401 0F46                      u410 0F5C  
                    u411 0F58                      u420 0F84                      u501 0CAC  
                    u421 0F80                      u510 0CD0                      u430 0FBA  
                    u511 0CCC                      u431 0FB6                      u520 0CFA  
                    u440 1288                      u600 099C                      u521 0CF6  
                    u441 1284                      u601 0998                      u530 0D3A  
                    u450 132C                      u610 09B6             __CFG_CPD$OFF 000000  
                    u531 0D36                      u451 1328                      u611 09B2  
                    u700 0BCE                      u540 0E86                      u460 1010  
                    u620 09D0                      u701 0BCA                      u541 0E82  
                    u461 100C                      u621 09CC                      u710 0C08  
                    u550 0EB0                      u470 1032                      u630 09DE  
                    u711 0C04                      u551 0EAC                      u471 102E  
                    u631 09DA                      u720 0C2A                      u560 0EDE  
                    u480 1088                      u640 0A2C                      u721 0C26  
                    u561 0EDA                      u481 1084                      u641 0A28  
                    u730 0C52                      u490 1096                      u570 0818  
                    u650 0A74                      u731 0C4E                      u491 1092  
                    u571 0814                      u651 0A70                      u740 0C84  
                    u580 0834                      u660 0B1A                      u741 0C80  
                    u581 0830                      u661 0B16                      u670 13B6  
                    u590 097E                      u750 11E0                      u671 13B2  
                    u591 097A                      u680 118E                      u760 11F2  
                    u681 118A                      u761 11EE                      u770 12EE  
                    u690 0BAC                      u771 12EA                      u691 0BA8  
                    u780 12C8                      u781 12C4                      u757 11D6  
                    u797 0E52                      _pad 1002                      wreg 000FE8  
                   l1300 0EFE                     l1220 0F84                     l1212 0F38  
                   l1302 0F10                     l1222 0FBA                     l1214 0F4A  
                   l1230 1264                     l1310 0834                     l1400 0BC0  
                   l1216 0F5C                     l1232 1268                     l1240 132C  
                   l1320 08FC                     l1312 0870                     l1304 0808  
                   l1410 0C08                     l1402 0BCE                     l1218 0F66  
                   l1226 1246                     l1234 1304                     l1250 1032  
                   l1330 099C                     l1322 0902                     l1314 0878  
                   l1306 0818                     l1420 0C52                     l1412 0C10  
                   l1404 0BDE                     l1228 1252                     l1236 1310  
                   l1260 1096                     l1252 103E                     l1244 1002  
                   l1332 09B6                     l1324 0908                     l1316 0880  
                   l1308 081A                     l1340 0A08                     l1500 1366  
                   l1430 0C84                     l1422 0C62                     l1414 0C1C  
                   l1406 0BE2                     l1270 0CD0                     l1238 1314  
                   l1262 10AA                     l1254 1052                     l1246 1010  
                   l1334 09D0                     l1318 0886                     l1326 096C  
                   l1350 0A74                     l1342 0A2C                     l1510 0DBC  
                   l1440 133A                     l1432 0C94                     l1424 0C64  
                   l1416 0C2A                     l1408 0BF2                     l1280 0D3A  
                   l1272 0CD8                     l1256 1066                     l1248 1024  
                   l1328 097E                     l1336 09DE                     l1360 0B28  
                   l1352 0ABE                     l1344 0A3A                     l1520 0E14  
                   l1512 0DC0                     l1504 0D96                     l1450 1362  
                   l1442 1348                     l1426 0C6E                     l1418 0C34  
                   l1282 0D5A                     l1274 0CEC                     l1266 0CA6  
                   l1290 0E86                     l1258 106A                     l1362 0B3C  
                   l1346 0A4C                     l1522 0E28                     l1514 0DCE  
                   l1506 0DA4                     l1444 134C                     l1460 12FA  
                   l1452 12CC                     l1428 0C74                     l1380 13A8  
                   l1284 0D5C                     l1276 0CFA                     l1268 0CB2  
                   l1292 0E8E                     l1356 0AF6                     l1348 0A50  
                   l1372 0B62                     l1436 1198                     l1524 0E3C  
                   l1516 0DDC                     l1508 0DA8                     l1446 134E  
                   l1454 12DE                     l1470 112C                     l1382 13B6  
                   l1286 0D6E                     l1278 0D0C                     l1294 0EA2  
                   l1374 0B86                     l1358 0B1A                     l1366 0B48  
                   l1390 1172                     l1438 11A8                     l1526 0E48  
                   l1518 0DF8                     l1448 1360                     l1456 12EE  
                   l1392 0B9A                     l1472 112E                     l1464 10C4  
                   l1480 1296                     l1296 0EB0                     l1288 0E68  
                   l1368 0B56                     l1384 1136                     l1458 12F6  
                   l1394 0B9E                     l1474 1130                     l1466 10CE  
                   l1482 12A8                     l1298 0EDE                     l1386 113E  
                   l1490 1206                     l1396 0BAC                     l1476 1132  
                   l1468 112A                     l1484 12AC                     l1388 114C  
                   l1492 120E                     l1486 13BC                     l1398 0BBC  
                   l1478 128A                     l1494 1216                     l1496 1232  
                   l1488 11F4                     ?_pad 0011                     STR_1 0801  
                   STR_2 0801                     STR_3 0804                     _dbuf 0068  
                   _main 0D96                     _prec 0064                     _nout 0060  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   _utoa 0808            __CFG_BORV$190 000000                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_pad 0017          __end_of___aldiv 0CA6                    ?_main 00A6  
                  ?_utoa 001C          __end_of___lodiv 0D96          __end_of___lomod 0F38  
           vfpfcnvrt@fmt 003E             vfpfcnvrt@llu 0046                    _SPBRG 000FAF  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000         serial_trama@data 0002  
                  _flags 005E                    _fputc 0F38                    _fputs 1246  
                  pad@fp 0011                    _width 0062                    _putch 13C6  
                  tablat 000FF5        __end_of_ADC_begin 1366                    utoa@d 001E  
                  utoa@i 003A                    utoa@n 0032                    utoa@p 002E  
                  utoa@w 0030                    status 000FD8           __CFG_T3CMX$RC0 000000  
        __end_of_sprintf 1246         ___lodiv@dividend 0001           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000          __initialization 138C             __end_of_main 0E68  
           __end_of_utoa 0A08           __CFG_PCLKEN$ON 000000                   ??_main 005C  
                 ??_utoa 0026            __activetblptr 000002         ___lodiv@quotient 0011  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   ?_fputc 0001  
                 ?_fputs 000A                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 ?_putch 0001                   _ANSELC 000F5D                   _ANSELD 000F5E  
         __CFG_WDTEN$OFF 000000                   _RCREG1 000FAE                   _OSCCON 000FD3  
                 _TXREG1 000FAD           __CFG_XINST$OFF 000000             vfprintf@cfmt 0054  
              ??___aldiv 0009           __CFG_STVREN$ON 000000                ??___lodiv 0011  
              ??___lomod 0011                   clear_0 1392                   _valor1 00AD  
                 _valor2 00AB                   pad@buf 0013                   _strcat 1366  
                 _strcpy 1198                   _strlen 1304                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 1198  
                 utoa@fp 001C                ??_sprintf 005C     __CFG_LS48MHZ$SYS24X4 000000  
             __accesstop 0060  __end_of__initialization 139C            ___rparam_used 000001  
         __pcstackCOMRAM 0001         __CFG_nPWRTEN$OFF 000000            __end_of_fputc 1002  
          __end_of_fputs 128A            __end_of_putch 13C8      serial_begin@baudios 000F  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0060               _analogRead 12CA        __CFG_PLLSEL$PLL4X 000000  
     __size_of_oscilador 000A                  ?_strcat 000F                  ?_strcpy 0005  
                ?_strlen 0001                  _OSCCON2 000FD2       __size_of_vfpfcnvrt 0192  
       ___lomod@dividend 0001               _conversion 0066                  __Hparam 0000  
              _ADC_begin 133A                  __Lparam 0000            ?_serial_begin 000F  
          ?_serial_print 0001            ?_serial_trama 0002                  ___aldiv 0B9A  
                ___lodiv 0CA6                  ___lomod 0E68                ?_vfprintf 004E  
           __psmallconst 0800                  __pcinit 138C                  __ramtop 0800  
                __ptext0 0D96                  __ptext1 1366                  __ptext2 1198  
                __ptext3 11F4                  __ptext4 1136                  __ptext5 0A08  
                __ptext6 0808                  __ptext7 1002                  __ptext8 1304  
                __ptext9 1246          __size_of_strcat 0026          __size_of_strcpy 005C  
        __size_of_strlen 0036             __size_of_pad 00C2         ___aldiv@dividend 0001  
                _sprintf 11F4     end_of_initialization 139C                  fputc@fp 0003  
          __Lmediumconst 0000        __end_of_oscilador 13C6                  fputs@fp 000C  
            ?_analogRead 0001           ??_serial_begin 0013               ?_ADC_begin 0001  
         ??_serial_print 0001           ??_serial_trama 0004        __end_of_vfpfcnvrt 0B9A  
              _RCSTAbits 000FAB         ___aldiv@quotient 000B                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0054                  strcpy@d 000D                  strlen@a 0003  
                strcpy@s 000B                  strlen@s 0001                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISCbits 000F94                _TXSTAbits 000FAC  
            vfpfcnvrt@ap 0040              vfpfcnvrt@fp 003C              _BAUDCONbits 000FB8  
         __end_of_strcat 138C           __end_of_strcpy 11F4           __end_of_strlen 133A  
    __size_of_analogRead 003A      start_initialization 138C          ___lodiv@divisor 0009  
        ___lodiv@counter 0019              __end_of_pad 10C4     serial_print@caracter 0001  
        __CFG_nLPBOR$OFF 000000              ??_ADC_begin 0001              vfprintf@fmt 0050  
               ??_strcat 0013                 ??_strcpy 0009                 ??_strlen 0003  
            __pbssCOMRAM 005E            __pcstackBANK0 009C     __end_of_serial_begin 1136  
   __end_of_serial_print 13BC     __end_of_serial_trama 12CA                __pnvBANK0 00AB  
               ?___aldiv 0001                 ?___lodiv 0001                 ?___lomod 0001  
      __size_of_vfprintf 0062          ___lomod@divisor 0009              __smallconst 0800  
        ___lomod@counter 0011                 ?_sprintf 0056           __size_of_fputc 00CA  
         __size_of_fputs 0044           __size_of_putch 0002          ___aldiv@divisor 0005  
        ___aldiv@counter 0009             ??_analogRead 0003        _serial_begin$1454 0013  
              _oscilador 13BC         __CFG_WDTPS$32768 000000                _vfpfcnvrt 0A08  
             _ADCON0bits 000FC2               _ADCON1bits 000FC1               _ADCON2bits 000FC0  
          serial_trama@k 0004        __CFG_CFGPLLEN$OFF 000000       __end_of_analogRead 1304  
               __Hrparam 0000               ?_oscilador 0001               vfprintf@ap 0052  
               __Lrparam 0000               vfprintf@fp 004E       __CFG_BOREN$SBORDIS 000000  
        analogRead@canal 0004         __size_of___aldiv 010C         __size_of___lodiv 00F0  
       __size_of___lomod 00D0               ?_vfpfcnvrt 003C    __size_of_serial_begin 0072  
             _ANSELAbits 000F5B               _ANSELBbits 000F5C               _ANSELCbits 000F5D  
  __size_of_serial_print 0016    __size_of_serial_trama 0040               sprintf@fmt 0058  
             strcat@dest 000F                 __ptext10 0F38                 __ptext11 13C6  
               __ptext20 133A                 __ptext12 0E68                 __ptext13 0CA6  
               __ptext14 128A                 __ptext15 13A6                 __ptext16 10C4  
               __ptext17 0B9A                 __ptext18 13BC                 __ptext19 12CA  
       __size_of_sprintf 0052               strcpy@dest 0005            __size_of_main 00D2  
          __size_of_utoa 0200                 _valor1_c 0092                 _valor2_c 0088  
           _serial_begin 10C4             _serial_print 13A6             _serial_trama 128A  
               _vfprintf 1136                 main@argc 00A6                 main@argv 00A8  
              sprintf@ap 009E                strcat@src 0011                strcpy@src 0007  
            ??_oscilador 0001     __CFG_CPUDIV$NOCLKDIV 000000              ??_vfpfcnvrt 0042  
               sprintf@f 00A0                 sprintf@s 0056             ___aldiv@sign 000A  
     __CFG_FOSC$INTOSCIO 000000  
